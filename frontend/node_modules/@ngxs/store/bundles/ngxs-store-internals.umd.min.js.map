{"version":3,"sources":["ng://@ngxs/store/internals/ngxs-bootstrapper.ts"],"names":["NgxsBootstrapper","this","bootstrap$","ReplaySubject","Object","defineProperty","prototype","asObservable","bootstrap","next","complete","Injectable"],"mappings":"sWAAA,IAAAA,EAAA,WAGA,SAAAA,IAKUC,KAAAC,WAAa,IAAIC,EAAAA,cAAuB,GAclD,OAZEC,OAAAC,eAAIL,EAAAM,UAAA,mBAAgB,KAApB,WACE,OAAOL,KAAKC,WAAWK,gDAOzBP,EAAAM,UAAAE,UAAA,WACEP,KAAKC,WAAWO,MAAK,GACrBR,KAAKC,WAAWQ,gCAjBnBC,EAAAA,aAmBDX,EAtBA","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxsBootstrapper {\r\n  /**\r\n   * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\r\n   */\r\n  private bootstrap$ = new ReplaySubject<boolean>(1);\r\n\r\n  get appBootstrapped$(): Observable<boolean> {\r\n    return this.bootstrap$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * This event will be emitted after attaching `ComponentRef` of the root component\r\n   * to the tree of views, that's a signal that application has been fully rendered\r\n   */\r\n  bootstrap(): void {\r\n    this.bootstrap$.next(true);\r\n    this.bootstrap$.complete();\r\n  }\r\n}\r\n"]}