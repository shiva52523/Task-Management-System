(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@ngxs/store/internals', ['exports', '@angular/core', 'rxjs'], factory) :
    (factory((global.ngxs = global.ngxs || {}, global.ngxs.store = global.ngxs.store || {}, global.ngxs.store.internals = {}),global.ng.core,global.rxjs));
}(this, (function (exports,core,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxsBootstrapper = /** @class */ (function () {
        function NgxsBootstrapper() {
            /**
             * Use `ReplaySubject`, thus we can get cached value even if the stream is completed
             */
            this.bootstrap$ = new rxjs.ReplaySubject(1);
        }
        Object.defineProperty(NgxsBootstrapper.prototype, "appBootstrapped$", {
            get: /**
             * @return {?}
             */ function () {
                return this.bootstrap$.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * This event will be emitted after attaching `ComponentRef` of the root component
         * to the tree of views, that's a signal that application has been fully rendered
         */
        /**
         * This event will be emitted after attaching `ComponentRef` of the root component
         * to the tree of views, that's a signal that application has been fully rendered
         * @return {?}
         */
        NgxsBootstrapper.prototype.bootstrap = /**
         * This event will be emitted after attaching `ComponentRef` of the root component
         * to the tree of views, that's a signal that application has been fully rendered
         * @return {?}
         */
            function () {
                this.bootstrap$.next(true);
                this.bootstrap$.complete();
            };
        NgxsBootstrapper.decorators = [
            { type: core.Injectable }
        ];
        return NgxsBootstrapper;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxsBootstrapper = NgxsBootstrapper;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngxs-store-internals.umd.js.map