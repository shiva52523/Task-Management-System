{"version":3,"file":"ngxs-store.umd.js.map","sources":["node_modules/tslib/tslib.es6.js","ng://@ngxs/store/src/execution/dispatch-outside-zone-ngxs-execution-strategy.ts","ng://@ngxs/store/src/symbols.ts","ng://@ngxs/store/src/execution/symbols.ts","ng://@ngxs/store/src/internal/internals.ts","ng://@ngxs/store/src/utils/utils.ts","ng://@ngxs/store/src/operators/of-action.ts","ng://@ngxs/store/src/execution/internal-ngxs-execution-strategy.ts","ng://@ngxs/store/src/operators/leave-ngxs.ts","ng://@ngxs/store/src/actions-stream.ts","ng://@ngxs/store/src/utils/compose.ts","ng://@ngxs/store/src/internal/state-stream.ts","ng://@ngxs/store/src/plugin-manager.ts","ng://@ngxs/store/src/internal/dispatcher.ts","ng://@ngxs/store/src/utils/memoize.ts","ng://@ngxs/store/src/utils/angular.ts","ng://@ngxs/store/src/internal/config-validator.ts","ng://@ngxs/store/src/utils/freeze.ts","ng://@ngxs/store/src/internal/state-operations.ts","ng://@ngxs/store/src/internal/state-operators.ts","ng://@ngxs/store/src/internal/state-context-factory.ts","ng://@ngxs/store/src/utils/store-validators.ts","ng://@ngxs/store/src/internal/state-factory.ts","ng://@ngxs/store/src/internal/lifecycle-state-manager.ts","ng://@ngxs/store/src/utils/selector-utils.ts","ng://@ngxs/store/src/store.ts","ng://@ngxs/store/src/decorators/select.ts","ng://@ngxs/store/src/actions/actions.ts","ng://@ngxs/store/src/module.ts","ng://@ngxs/store/src/decorators/action.ts","ng://@ngxs/store/src/decorators/state.ts","ng://@ngxs/store/src/decorators/selector.ts","ng://@ngxs/store/src/execution/noop-ngxs-execution-strategy.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\r\n  NgZone,\r\n  PLATFORM_ID,\r\n  Injectable,\r\n  ÉµNoopNgZone as NoopNgZone,\r\n  Inject\r\n} from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\n\r\n@Injectable()\r\nexport class DispatchOutsideZoneNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(private _ngZone: NgZone, @Inject(PLATFORM_ID) private _platformId: Object) {\r\n    this.verifyZoneIsNotNooped(this._ngZone);\r\n  }\r\n\r\n  enter<T>(func: () => T): T {\r\n    if (isPlatformServer(this._platformId)) {\r\n      return this.runInsideAngular(func);\r\n    }\r\n    return this.runOutsideAngular(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this.runInsideAngular(func);\r\n  }\r\n\r\n  private runInsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return func();\r\n    }\r\n    return this._ngZone.run(func);\r\n  }\r\n\r\n  private runOutsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return this._ngZone.runOutsideAngular(func);\r\n    }\r\n    return func();\r\n  }\r\n\r\n  private verifyZoneIsNotNooped(ngZone: NgZone): void {\r\n    /* - Removed because unsafe for Angular 5 - investigate\r\n    if (ngZone instanceof NoopNgZone) {\r\n      console.warn(\r\n        'Your application was bootstrapped with nooped zone and your execution strategy requires an ngZone'\r\n      );\r\n    }\r\n    */\r\n  }\r\n}\r\n","import { Injectable, InjectionToken, Type } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ObjectKeyMap } from './internal/internals';\r\nimport { NgxsExecutionStrategy } from './execution/symbols';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\n\r\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\r\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\r\nexport const META_KEY = 'NGXS_META';\r\nexport const META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\r\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\r\n\r\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\r\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\r\n\r\n/**\r\n * The NGXS config settings.\r\n */\r\n@Injectable()\r\nexport class NgxsConfig {\r\n  /**\r\n   * Run in development mode. This will add additional debugging features:\r\n   * - Object.freeze on the state and actions to guarantee immutability\r\n   * (default: false)\r\n   */\r\n  developmentMode: boolean;\r\n  compatibility: {\r\n    /**\r\n     * Support a strict Content Security Policy.\r\n     * This will cirumvent some optimisations that violate a strict CSP through the use of `new Function(...)`.\r\n     * (default: false)\r\n     */\r\n    strictContentSecurityPolicy: boolean;\r\n  };\r\n  /**\r\n   * Determines the execution context to perform async operations inside. An implementation can be\r\n   * provided to override the default behaviour where the async operations are run\r\n   * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\r\n   * These observable behaviours are from:\r\n   *   `@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\r\n   * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\r\n   * application doesn't rely on zone.js running change detection then you can switch to the\r\n   * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\r\n   * (default: null)\r\n   */\r\n  executionStrategy: Type<NgxsExecutionStrategy>;\r\n  /**\r\n   * Defining the default state before module initialization\r\n   * This is convenient if we need to create a define our own set of states.\r\n   * (default: {})\r\n   */\r\n  defaultsState: ObjectKeyMap<any> = {};\r\n\r\n  constructor() {\r\n    this.compatibility = {\r\n      strictContentSecurityPolicy: false\r\n    };\r\n    this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\r\n  }\r\n}\r\n\r\nexport interface ActionDef {\r\n  type: string;\r\n\r\n  new (...args: any[]): any;\r\n}\r\n\r\nexport type StateOperator<T> = (existing: Readonly<T>) => T;\r\n\r\n/**\r\n * State context provided to the actions in the state.\r\n */\r\nexport interface StateContext<T> {\r\n  /**\r\n   * Get the current state.\r\n   */\r\n  getState(): T;\r\n\r\n  /**\r\n   * Reset the state to a new value.\r\n   */\r\n  setState(val: T | StateOperator<T>): T;\r\n\r\n  /**\r\n   * Patch the existing state with the provided value.\r\n   */\r\n  patchState(val: Partial<T>): T;\r\n\r\n  /**\r\n   * Dispatch a new action and return the dispatched observable.\r\n   */\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\r\n\r\n/**\r\n * Plugin interface\r\n */\r\nexport interface NgxsPlugin {\r\n  /**\r\n   * Handle the state/action before its submitted to the state handlers.\r\n   */\r\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\r\n}\r\n\r\n/**\r\n * Options that can be provided to the store.\r\n */\r\nexport interface StoreOptions<T> {\r\n  /**\r\n   * Name of the state. Required.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * Default values for the state. If not provided, uses empty object.\r\n   */\r\n  defaults?: T;\r\n\r\n  /**\r\n   * Sub states for the given state.\r\n   */\r\n  children?: any[];\r\n}\r\n\r\n/**\r\n * Actions that can be provided in a action decorator.\r\n */\r\nexport interface ActionOptions {\r\n  /**\r\n   * Cancel the previous uncompleted observable(s).\r\n   */\r\n  cancelUncompleted?: boolean;\r\n}\r\n\r\nexport const enum LifecycleHooks {\r\n  NgxsOnInit = 'ngxsOnInit',\r\n  NgxsAfterBootstrap = 'ngxsAfterBootstrap'\r\n}\r\n\r\n/**\r\n * On init interface\r\n */\r\nexport interface NgxsOnInit {\r\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\r\n}\r\n\r\n/**\r\n * After bootstrap interface\r\n */\r\nexport interface NgxsAfterBootstrap {\r\n  ngxsAfterBootstrap(ctx?: StateContext<any>): void;\r\n}\r\n\r\nexport type NgxsLifeCycle = Partial<NgxsOnInit> & Partial<NgxsAfterBootstrap>;\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/*\r\n * Internal execution strategy injection token\r\n */\r\nexport const NGXS_EXECUTION_STRATEGY = new InjectionToken<NgxsExecutionStrategy>(\r\n  'NGXS_EXECUTION_STRATEGY'\r\n);\r\n\r\n/*\r\n * Execution strategy interface\r\n */\r\nexport interface NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T;\r\n  leave<T>(func: () => T): T;\r\n}\r\n","import {\r\n  ActionOptions,\r\n  META_KEY,\r\n  META_OPTIONS_KEY,\r\n  NgxsConfig,\r\n  SELECTOR_META_KEY,\r\n  StoreOptions\r\n} from '../symbols';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ObjectKeyMap<T> {\r\n  [key: string]: T;\r\n}\r\n\r\n// inspired from https://stackoverflow.com/a/43674389\r\nexport interface StateClass<T = any, U = any> {\r\n  [META_KEY]?: MetaDataModel;\r\n  [META_OPTIONS_KEY]?: StoreOptions<U>;\r\n\r\n  new (...args: any[]): T;\r\n}\r\n\r\nexport type StateKeyGraph = ObjectKeyMap<string[]>;\r\nexport type StatesByName = ObjectKeyMap<StateClass>;\r\n\r\nexport interface ActionHandlerMetaData {\r\n  fn: string | symbol;\r\n  options: ActionOptions;\r\n  type: string;\r\n}\r\n\r\nexport interface StateOperations<T> {\r\n  getState(): T;\r\n\r\n  setState(val: T): T;\r\n\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport interface MetaDataModel {\r\n  name: string | null;\r\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  selectFromAppState: SelectFromState | null;\r\n  children?: StateClass[];\r\n  instance: any;\r\n}\r\n\r\nexport type SelectFromState = (state: any) => any;\r\n\r\nexport interface SelectorMetaDataModel {\r\n  selectFromAppState: SelectFromState | null;\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n}\r\n\r\nexport interface MappedStore {\r\n  name: string;\r\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  instance: any;\r\n  depth: string;\r\n}\r\n\r\nexport interface StatesAndDefaults {\r\n  defaults: any;\r\n  states: MappedStore[];\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the class and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureStoreMetadata(target: StateClass): MetaDataModel {\r\n  if (!target.hasOwnProperty(META_KEY)) {\r\n    const defaultMetadata: MetaDataModel = {\r\n      name: null,\r\n      actions: {},\r\n      defaults: {},\r\n      path: null,\r\n      selectFromAppState: null,\r\n      children: [],\r\n      instance: null\r\n    };\r\n\r\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\r\n  }\r\n  return getStoreMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the state class if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getStoreMetadata(target: StateClass): MetaDataModel {\r\n  return target[META_KEY]!;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the selector and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\r\n    const defaultMetadata: SelectorMetaDataModel = {\r\n      selectFromAppState: null,\r\n      originalFn: null,\r\n      containerClass: null,\r\n      selectorName: null\r\n    };\r\n\r\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\r\n  }\r\n\r\n  return getSelectorMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the selector if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return target[SELECTOR_META_KEY];\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\r\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\r\n *\r\n * @ignore\r\n */\r\nfunction compliantPropGetter(paths: string[]): (x: any) => any {\r\n  const copyOfPaths = [...paths];\r\n  return obj => copyOfPaths.reduce((acc: any, part: string) => acc && acc[part], obj);\r\n}\r\n\r\n/**\r\n * The generated function is faster than:\r\n * - pluck (Observable operator)\r\n * - memoize\r\n *\r\n * @ignore\r\n */\r\nfunction fastPropGetter(paths: string[]): (x: any) => any {\r\n  const segments = paths;\r\n  let seg = 'store.' + segments[0];\r\n  let i = 0;\r\n  const l = segments.length;\r\n\r\n  let expr = seg;\r\n  while (++i < l) {\r\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\r\n  }\r\n\r\n  const fn = new Function('store', 'return ' + expr + ';');\r\n\r\n  return <(x: any) => any>fn;\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport function propGetter(paths: string[], config: NgxsConfig) {\r\n  if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\r\n    return compliantPropGetter(paths);\r\n  } else {\r\n    return fastPropGetter(paths);\r\n  }\r\n}\r\n\r\n/**\r\n * Given an array of states, it will return a object graph. Example:\r\n *    const states = [\r\n *      Cart,\r\n *      CartSaved,\r\n *      CartSavedItems\r\n *    ]\r\n *\r\n * would return:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function buildGraph(stateClasses: StateClass[]): StateKeyGraph {\r\n  const findName = (stateClass: StateClass) => {\r\n    const meta = stateClasses.find(g => g === stateClass);\r\n    if (!meta) {\r\n      throw new Error(\r\n        `Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`\r\n      );\r\n    }\r\n\r\n    return meta[META_KEY]!.name!;\r\n  };\r\n\r\n  return stateClasses.reduce<StateKeyGraph>(\r\n    (result: StateKeyGraph, stateClass: StateClass) => {\r\n      const { name, children } = stateClass[META_KEY]!;\r\n      result[name!] = (children || []).map(findName);\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a states array, returns object graph\r\n * returning the name and state metadata. Example:\r\n *\r\n *  const graph = {\r\n *    cart: { metadata }\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function nameToState(states: StateClass[]): ObjectKeyMap<StateClass> {\r\n  return states.reduce<ObjectKeyMap<StateClass>>(\r\n    (result: ObjectKeyMap<StateClass>, stateClass: StateClass) => {\r\n      const meta = stateClass[META_KEY]!;\r\n      result[meta.name!] = stateClass;\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a object relationship graph will return the full path\r\n * for the child items. Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const r = {\r\n *    cart: 'cart',\r\n *    saved: 'cart.saved',\r\n *    items: 'cart.saved.items'\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function findFullParentPath(\r\n  obj: StateKeyGraph,\r\n  newObj: ObjectKeyMap<string> = {}\r\n): ObjectKeyMap<string> {\r\n  const visit = (child: StateKeyGraph, keyToFind: string): string | null => {\r\n    for (const key in child) {\r\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\r\n        const parent = visit(child, key);\r\n        return parent !== null ? `${parent}.${key}` : key;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      const parent = visit(obj, key);\r\n      newObj[key] = parent ? `${parent}.${key}` : key;\r\n    }\r\n  }\r\n\r\n  return newObj;\r\n}\r\n\r\n/**\r\n * Given a object graph, it will return the items topologically sorted Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const results = [\r\n *    'items',\r\n *    'saved',\r\n *    'cart'\r\n *  ];\r\n *\r\n * @ignore\r\n */\r\nexport function topologicalSort(graph: StateKeyGraph): string[] {\r\n  const sorted: string[] = [];\r\n  const visited: ObjectKeyMap<boolean> = {};\r\n\r\n  const visit = (name: string, ancestors: string[] = []) => {\r\n    if (!Array.isArray(ancestors)) {\r\n      ancestors = [];\r\n    }\r\n\r\n    ancestors.push(name);\r\n    visited[name] = true;\r\n\r\n    graph[name].forEach((dep: string) => {\r\n      if (ancestors.indexOf(dep) >= 0) {\r\n        throw new Error(\r\n          `Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`\r\n        );\r\n      }\r\n\r\n      if (visited[dep]) {\r\n        return;\r\n      }\r\n\r\n      visit(dep, ancestors.slice(0));\r\n    });\r\n\r\n    if (sorted.indexOf(name) < 0) {\r\n      sorted.push(name);\r\n    }\r\n  };\r\n\r\n  Object.keys(graph).forEach(k => visit(k));\r\n\r\n  return sorted.reverse();\r\n}\r\n\r\n/**\r\n * Returns if the parameter is a object or not.\r\n *\r\n * @ignore\r\n */\r\nexport function isObject(obj: any) {\r\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\r\n}\r\n\r\nconst DOLLAR_CHAR_CODE = 36;\r\n\r\n/**\r\n * If `foo$` => make it just `foo`\r\n *\r\n * @ignore\r\n */\r\nexport function removeDollarAtTheEnd(name: string): string {\r\n  const lastCharIndex = name.length - 1;\r\n  const dollarAtTheEnd = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\r\n  return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\r\n}\r\n","/**\r\n * Returns the type from an action instance/class.\r\n * @ignore\r\n */\r\nexport function getActionTypeFromInstance(action: any): string | undefined {\r\n  if (action.constructor && action.constructor.type) {\r\n    return action.constructor.type;\r\n  }\r\n\r\n  return action.type;\r\n}\r\n\r\nexport function getActionTypeFromClass<T = any>(actionClass: any): string {\r\n  return actionClass.type;\r\n}\r\n\r\n/**\r\n * Matches a action\r\n * @ignore\r\n */\r\nexport function actionMatcher(action1: any) {\r\n  const type1 = getActionTypeFromInstance(action1);\r\n\r\n  return function(action2: any) {\r\n    return type1 === getActionTypeFromInstance(action2);\r\n  };\r\n}\r\n\r\n/**\r\n * Set a deeply nested value. Example:\r\n *\r\n *   setValue({ foo: { bar: { eat: false } } },\r\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\r\n *\r\n * While it traverses it also creates new objects from top down.\r\n *\r\n * @ignore\r\n */\r\nexport const setValue = (obj: any, prop: string, val: any) => {\r\n  obj = { ...obj };\r\n\r\n  const split = prop.split('.');\r\n  const lastIndex = split.length - 1;\r\n\r\n  split.reduce((acc, part, index) => {\r\n    if (index === lastIndex) {\r\n      acc[part] = val;\r\n    } else {\r\n      acc[part] = Array.isArray(acc[part]) ? [...acc[part]] : { ...acc[part] };\r\n    }\r\n\r\n    return acc && acc[part];\r\n  }, obj);\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport const getValue = (obj: any, prop: string): any =>\r\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\r\n","import { OperatorFunction, Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\nimport { ActionContext, ActionStatus } from '../actions-stream';\r\n\r\nexport interface ActionCompletion<T = any, E = Error> {\r\n  action: T;\r\n  result: {\r\n    successful: boolean;\r\n    canceled: boolean;\r\n    error?: E;\r\n  };\r\n}\r\n\r\nexport function ofAction<T>(allowedType: any): OperatorFunction<ActionContext, T>;\r\nexport function ofAction<T>(...allowedTypes: any[]): OperatorFunction<ActionContext, T>;\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will grab actions that have just been dispatched as well as actions that have completed\r\n */\r\nexport function ofAction(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been dispatched\r\n */\r\nexport function ofActionDispatched(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Dispatched]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been successfully completed\r\n */\r\nexport function ofActionSuccessful(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Successful]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been canceled\r\n */\r\nexport function ofActionCanceled(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Canceled]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been completed\r\n */\r\nexport function ofActionCompleted(...allowedTypes: any[]) {\r\n  const allowedStatuses = [\r\n    ActionStatus.Successful,\r\n    ActionStatus.Canceled,\r\n    ActionStatus.Errored\r\n  ];\r\n  return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just thrown an error\r\n */\r\nexport function ofActionErrored(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Errored]);\r\n}\r\n\r\nfunction ofActionOperator<T = any>(\r\n  allowedTypes: any[],\r\n  statuses?: ActionStatus[],\r\n  mapOperator: () => OperatorFunction<ActionContext, T> = mapAction\r\n) {\r\n  const allowedMap = createAllowedActionTypesMap(allowedTypes);\r\n  const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\r\n  return function(o: Observable<ActionContext>) {\r\n    return o.pipe(\r\n      filterStatus(allowedMap, allowedStatusMap),\r\n      mapOperator()\r\n    );\r\n  };\r\n}\r\n\r\nfunction filterStatus(allowedTypes: FilterMap, allowedStatuses?: FilterMap) {\r\n  return filter((ctx: ActionContext) => {\r\n    const actionType = getActionTypeFromInstance(ctx.action)!;\r\n    const typeMatch = allowedTypes[actionType];\r\n    const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\r\n    return typeMatch && statusMatch;\r\n  });\r\n}\r\n\r\nfunction mapActionResult(): OperatorFunction<ActionContext, ActionCompletion> {\r\n  return map(({ action, status, error }: ActionContext) => {\r\n    return <ActionCompletion>{\r\n      action,\r\n      result: {\r\n        successful: ActionStatus.Successful === status,\r\n        canceled: ActionStatus.Canceled === status,\r\n        error\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction mapAction<T = any>(): OperatorFunction<ActionContext, T> {\r\n  return map((ctx: ActionContext) => <T>ctx.action);\r\n}\r\n\r\ntype FilterMap = { [key: string]: boolean };\r\n\r\nfunction createAllowedActionTypesMap(types: any[]): FilterMap {\r\n  return types.reduce(\r\n    (filterMap: FilterMap, klass: any) => {\r\n      filterMap[getActionTypeFromInstance(klass)!] = true;\r\n      return filterMap;\r\n    },\r\n    <FilterMap>{}\r\n  );\r\n}\r\n\r\nfunction createAllowedStatusesMap(statuses: ActionStatus[]): FilterMap {\r\n  return statuses.reduce(\r\n    (filterMap: FilterMap, status: ActionStatus) => {\r\n      filterMap[status] = true;\r\n      return filterMap;\r\n    },\r\n    <FilterMap>{}\r\n  );\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy, NGXS_EXECUTION_STRATEGY } from './symbols';\r\n\r\n@Injectable()\r\nexport class InternalNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(\r\n    @Inject(NGXS_EXECUTION_STRATEGY) private _executionStrategy: NgxsExecutionStrategy\r\n  ) {}\r\n\r\n  enter<T>(func: () => T): T {\r\n    return this._executionStrategy.enter(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this._executionStrategy.leave(func);\r\n  }\r\n}\r\n","import { MonoTypeOperatorFunction, Observable, Observer } from 'rxjs';\r\nimport { NgxsExecutionStrategy } from '../execution/symbols';\r\n\r\n/**\r\n * Returns operator that will run\r\n * `subscribe` outside of the ngxs execution context\r\n */\r\nexport function leaveNgxs<T>(\r\n  ngxsExecutionStrategy: NgxsExecutionStrategy\r\n): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => {\r\n    return new Observable((sink: Observer<T>) => {\r\n      return source.subscribe({\r\n        next(value) {\r\n          ngxsExecutionStrategy.leave(() => sink.next(value));\r\n        },\r\n        error(error) {\r\n          ngxsExecutionStrategy.leave(() => sink.error(error));\r\n        },\r\n        complete() {\r\n          ngxsExecutionStrategy.leave(() => sink.complete());\r\n        }\r\n      });\r\n    });\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\n\r\n/**\r\n * Status of a dispatched action\r\n */\r\nexport const enum ActionStatus {\r\n  Dispatched = 'DISPATCHED',\r\n  Successful = 'SUCCESSFUL',\r\n  Canceled = 'CANCELED',\r\n  Errored = 'ERRORED'\r\n}\r\n\r\nexport interface ActionContext<T = any> {\r\n  status: ActionStatus;\r\n  action: T;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n     subject.subscribe(value => {\r\n       if (value === 'start') subject.next('end');\r\n     });\r\n     subject.subscribe(value => { });\r\n     subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n */\r\nexport class OrderedSubject<T> extends Subject<T> {\r\n  private _itemQueue: T[] = [];\r\n  private _busyPushingNext = false;\r\n\r\n  next(value?: T): void {\r\n    if (this._busyPushingNext) {\r\n      this._itemQueue.unshift(value!);\r\n      return;\r\n    }\r\n    this._busyPushingNext = true;\r\n    super.next(value);\r\n    while (this._itemQueue.length > 0) {\r\n      const nextValue = this._itemQueue.pop();\r\n      super.next(nextValue);\r\n    }\r\n    this._busyPushingNext = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\n@Injectable()\r\nexport class InternalActions extends OrderedSubject<ActionContext> {}\r\n\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\n@Injectable()\r\nexport class Actions extends Observable<any> {\r\n  constructor(\r\n    actions$: InternalActions,\r\n    internalExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {\r\n    super(observer => {\r\n      actions$\r\n        .pipe(leaveNgxs(internalExecutionStrategy))\r\n        .subscribe(\r\n          res => observer.next(res),\r\n          err => observer.error(err),\r\n          () => observer.complete()\r\n        );\r\n    });\r\n  }\r\n}\r\n","export type StateFn = (...args: any[]) => any;\r\n\r\n/**\r\n * Composes a array of functions from left to right. Example:\r\n *\r\n *      compose([fn, final])(state, action);\r\n *\r\n * then the funcs have a signature like:\r\n *\r\n *      function fn (state, action, next) {\r\n *          console.log('here', state, action, next);\r\n *          return next(state, action);\r\n *      }\r\n *\r\n *      function final (state, action) {\r\n *          console.log('here', state, action);\r\n *          return state;\r\n *      }\r\n *\r\n * the last function should not call `next`.\r\n *\r\n * @ignore\r\n */\r\nexport const compose = (funcs: StateFn[]) => (...args: any[]) => {\r\n  const curr = funcs.shift()!;\r\n  return curr(...args, (...nextArgs: any[]) => compose(funcs)(...nextArgs));\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { ObjectKeyMap } from '../internal/internals';\r\n\r\n/**\r\n * BehaviorSubject of the entire state.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateStream extends BehaviorSubject<ObjectKeyMap<any>> {\r\n  constructor() {\r\n    super({});\r\n  }\r\n}\r\n","import { Injectable, Optional, SkipSelf, Inject } from '@angular/core';\r\nimport { NgxsPluginFn, NGXS_PLUGINS, NgxsPlugin } from './symbols';\r\n\r\n/**\r\n * Plugin manager class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class PluginManager {\r\n  plugins: NgxsPluginFn[] = [];\r\n\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentManager: PluginManager,\r\n    @Inject(NGXS_PLUGINS)\r\n    @Optional()\r\n    private _plugins: NgxsPlugin[]\r\n  ) {\r\n    this.register();\r\n  }\r\n\r\n  private register() {\r\n    if (!this._plugins) {\r\n      return;\r\n    }\r\n\r\n    this.plugins = this._plugins.map(plugin => {\r\n      if (plugin.handle) {\r\n        return plugin.handle.bind(plugin);\r\n      } else {\r\n        return plugin;\r\n      }\r\n    });\r\n\r\n    if (this._parentManager) {\r\n      this._parentManager.plugins.push(...this.plugins);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, ErrorHandler } from '@angular/core';\r\nimport { Observable, of, forkJoin, empty, Subject, throwError } from 'rxjs';\r\nimport { shareReplay, filter, exhaustMap, take } from 'rxjs/operators';\r\n\r\nimport { compose } from '../utils/compose';\r\nimport { InternalActions, ActionStatus, ActionContext } from '../actions-stream';\r\nimport { StateStream } from './state-stream';\r\nimport { PluginManager } from '../plugin-manager';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from '../operators/leave-ngxs';\r\n\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\n@Injectable()\r\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\r\n\r\n@Injectable()\r\nexport class InternalDispatcher {\r\n  constructor(\r\n    private _errorHandler: ErrorHandler,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _pluginManager: PluginManager,\r\n    private _stateStream: StateStream,\r\n    private _ngxsExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(actionOrActions: any | any[]): Observable<any> {\r\n    const result = this._ngxsExecutionStrategy.enter(() =>\r\n      this.dispatchByEvents(actionOrActions)\r\n    );\r\n\r\n    result.subscribe({\r\n      error: error =>\r\n        this._ngxsExecutionStrategy.leave(() => this._errorHandler.handleError(error))\r\n    });\r\n\r\n    return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\r\n  }\r\n\r\n  private dispatchByEvents(actionOrActions: any | any[]): Observable<any> {\r\n    if (Array.isArray(actionOrActions)) {\r\n      return forkJoin(actionOrActions.map(a => this.dispatchSingle(a)));\r\n    } else {\r\n      return this.dispatchSingle(actionOrActions);\r\n    }\r\n  }\r\n\r\n  private dispatchSingle(action: any): Observable<any> {\r\n    const prevState = this._stateStream.getValue();\r\n    const plugins = this._pluginManager.plugins;\r\n\r\n    return (compose([\r\n      ...plugins,\r\n      (nextState: any, nextAction: any) => {\r\n        if (nextState !== prevState) {\r\n          this._stateStream.next(nextState);\r\n        }\r\n        const actionResult$ = this.getActionResultStream(nextAction);\r\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\r\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\r\n        return this.createDispatchObservable(actionResult$);\r\n      }\r\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\r\n  }\r\n\r\n  private getActionResultStream(action: any): Observable<ActionContext> {\r\n    return this._actionResults.pipe(\r\n      filter(\r\n        (ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched\r\n      ),\r\n      take(1),\r\n      shareReplay()\r\n    );\r\n  }\r\n\r\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\r\n    return actionResult$\r\n      .pipe(\r\n        exhaustMap((ctx: ActionContext) => {\r\n          switch (ctx.status) {\r\n            case ActionStatus.Successful:\r\n              return of(this._stateStream.getValue());\r\n            case ActionStatus.Errored:\r\n              return throwError(ctx.error);\r\n            default:\r\n              return empty();\r\n          }\r\n        })\r\n      )\r\n      .pipe(shareReplay());\r\n  }\r\n}\r\n","function defaultEqualityCheck(a: any, b: any) {\r\n  return a === b;\r\n}\r\n\r\nfunction areArgumentsShallowlyEqual(\r\n  equalityCheck: (a: any, b: any) => boolean,\r\n  prev: IArguments | null,\r\n  next: IArguments | null\r\n) {\r\n  if (prev === null || next === null || prev.length !== next.length) {\r\n    return false;\r\n  }\r\n\r\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\r\n  const length = prev.length;\r\n  for (let i = 0; i < length; i++) {\r\n    if (!equalityCheck(prev[i], next[i])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Memoize a function on its last inputs only.\r\n * Oringinally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\r\n *\r\n * @ignore\r\n */\r\nexport function memoize<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  equalityCheck = defaultEqualityCheck\r\n): T {\r\n  let lastArgs: IArguments | null = null;\r\n  let lastResult: any = null;\r\n  // we reference arguments instead of spreading them for performance reasons\r\n  function memoized() {\r\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\r\n      // apply arguments instead of spreading for performance.\r\n      lastResult = (<Function>func).apply(null, arguments);\r\n    }\r\n\r\n    lastArgs = arguments;\r\n    return lastResult;\r\n  }\r\n  (<any>memoized).reset = function() {\r\n    // The hidden (for now) ability to reset the memoization\r\n    lastArgs = null;\r\n    lastResult = null;\r\n  };\r\n  return memoized as T;\r\n}\r\n","import { getPlatform, COMPILER_OPTIONS, CompilerOptions, PlatformRef } from '@angular/core';\r\nimport { memoize } from './memoize';\r\n\r\nfunction _isAngularInTestMode() {\r\n  const platformRef: PlatformRef | null = getPlatform();\r\n  if (!platformRef) return false;\r\n  const compilerOptions = platformRef.injector.get(COMPILER_OPTIONS, null);\r\n  if (!compilerOptions) return false;\r\n  const isInTestMode = compilerOptions.some((item: CompilerOptions) => {\r\n    const providers = (item && item.providers) || [];\r\n    return providers.some((provider: any) => {\r\n      return (\r\n        (provider && provider.provide && provider.provide.name === 'MockNgModuleResolver') ||\r\n        false\r\n      );\r\n    });\r\n  });\r\n  return isInTestMode;\r\n}\r\n\r\nexport const isAngularInTestMode = memoize(_isAngularInTestMode);\r\n","import { Injectable, isDevMode } from '@angular/core';\r\n\r\nimport { isAngularInTestMode } from '../utils/angular';\r\nimport { NgxsConfig } from '../symbols';\r\n\r\n@Injectable()\r\nexport class ConfigValidator {\r\n  constructor(private _config: NgxsConfig) {}\r\n\r\n  public verifyDevMode(): void {\r\n    if (isAngularInTestMode()) {\r\n      return;\r\n    }\r\n\r\n    const isNgxsDevMode = this._config.developmentMode;\r\n    const isNgDevMode = isDevMode();\r\n    const incorrectProduction = !isNgDevMode && isNgxsDevMode;\r\n    const incorrectDevelopment = isNgDevMode && !isNgxsDevMode;\r\n    const example = 'NgxsModule.forRoot(states, { developmentMode: !environment.production })';\r\n\r\n    if (incorrectProduction) {\r\n      console.warn(\r\n        'Angular is running in production mode but NGXS is still running in the development mode!\\n',\r\n        'Please set developmentMode to false on the NgxsModule options when in production mode.\\n',\r\n        example\r\n      );\r\n    } else if (incorrectDevelopment) {\r\n      console.warn(\r\n        'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\\n',\r\n        example\r\n      );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Object freeze code\r\n * https://github.com/jsdf/deep-freeze\r\n */\r\nexport const deepFreeze = (o: any) => {\r\n  Object.freeze(o);\r\n\r\n  const oIsFunction = typeof o === 'function';\r\n  const hasOwnProp = Object.prototype.hasOwnProperty;\r\n\r\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\r\n    if (\r\n      hasOwnProp.call(o, prop) &&\r\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\r\n      o[prop] !== null &&\r\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\r\n      !Object.isFrozen(o[prop])\r\n    ) {\r\n      deepFreeze(o[prop]);\r\n    }\r\n  });\r\n\r\n  return o;\r\n};\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ConfigValidator } from './config-validator';\r\nimport { StateOperations, StatesAndDefaults } from '../internal/internals';\r\nimport { InternalDispatcher } from '../internal/dispatcher';\r\nimport { StateStream } from './state-stream';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { deepFreeze } from '../utils/freeze';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class InternalStateOperations {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _dispatcher: InternalDispatcher,\r\n    private _config: NgxsConfig,\r\n    configValidator: ConfigValidator\r\n  ) {\r\n    configValidator.verifyDevMode();\r\n  }\r\n\r\n  /**\r\n   * Returns the root state operators.\r\n   */\r\n  getRootStateOperations(): StateOperations<any> {\r\n    const rootStateOperations = {\r\n      getState: () => this._stateStream.getValue(),\r\n      setState: (newState: any) => this._stateStream.next(newState),\r\n      dispatch: (actions: any[]) => this._dispatcher.dispatch(actions)\r\n    };\r\n\r\n    if (this._config.developmentMode) {\r\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\r\n    }\r\n\r\n    return rootStateOperations;\r\n  }\r\n\r\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\r\n    return {\r\n      getState: () => root.getState(),\r\n      setState: value => {\r\n        const frozenValue = deepFreeze(value);\r\n        return root.setState(frozenValue);\r\n      },\r\n      dispatch: actions => {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n\r\n  setStateToTheCurrentWithNew(results: StatesAndDefaults): void {\r\n    const stateOperations: StateOperations<any> = this.getRootStateOperations();\r\n\r\n    // Get our current stream\r\n    const currentState = stateOperations.getState();\r\n    // Set the state to the current + new\r\n    stateOperations.setState({ ...currentState, ...results.defaults });\r\n  }\r\n}\r\n","import { StateOperator } from '../symbols';\r\n\r\nexport function simplePatch<T>(val: Partial<T>): StateOperator<T> {\r\n  return (existingState: Readonly<T>) => {\r\n    const isArray = Array.isArray(val);\r\n    const isPrimitive = typeof val !== 'object';\r\n    if (isArray) {\r\n      throw new Error('Patching arrays is not supported.');\r\n    }\r\n    if (isPrimitive) {\r\n      throw new Error('Patching primitives is not supported.');\r\n    }\r\n    const newState = { ...(<any>existingState) };\r\n    for (const k in val) {\r\n      newState[k] = val[k];\r\n    }\r\n    return <T>newState;\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { StateContext, StateOperator } from '../symbols';\r\nimport { MappedStore } from '../internal/internals';\r\nimport { setValue, getValue } from '../utils/utils';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { simplePatch } from './state-operators';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateContextFactory {\r\n  constructor(private _internalStateOperations: InternalStateOperations) {}\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  createStateContext<T>(metadata: MappedStore): StateContext<T> {\r\n    const root = this._internalStateOperations.getRootStateOperations();\r\n\r\n    function getState(currentAppState: any): T {\r\n      return getValue(currentAppState, metadata.depth);\r\n    }\r\n\r\n    function setStateValue(currentAppState: any, newValue: T): any {\r\n      const newAppState = setValue(currentAppState, metadata.depth, newValue);\r\n      root.setState(newAppState);\r\n      return newAppState;\r\n      // In doing this refactoring I noticed that there is a 'bug' where the\r\n      // application state is returned instead of this state slice.\r\n      // This has worked this way since the beginning see:\r\n      // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\r\n      // This needs to be fixed, but is a 'breaking' change.\r\n      // I will do this fix in a subsequent PR and we can decide how to handle it.\r\n    }\r\n\r\n    function setStateFromOperator(currentAppState: any, stateOperator: StateOperator<T>) {\r\n      const local = getState(currentAppState);\r\n      const newValue = stateOperator(local);\r\n      return setStateValue(currentAppState, newValue);\r\n    }\r\n\r\n    function isStateOperator(value: T | StateOperator<T>): value is StateOperator<T> {\r\n      return typeof value === 'function';\r\n    }\r\n\r\n    return {\r\n      getState(): T {\r\n        const currentAppState = root.getState();\r\n        return getState(currentAppState);\r\n      },\r\n      patchState(val: Partial<T>): T {\r\n        const currentAppState = root.getState();\r\n        const patchOperator = simplePatch<T>(val);\r\n        return setStateFromOperator(currentAppState, patchOperator);\r\n      },\r\n      setState(val: T | StateOperator<T>): T {\r\n        const currentAppState = root.getState();\r\n        return isStateOperator(val)\r\n          ? setStateFromOperator(currentAppState, val)\r\n          : setStateValue(currentAppState, val);\r\n      },\r\n      dispatch(actions: any | any[]): Observable<void> {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n","import {\r\n  getStoreMetadata,\r\n  MetaDataModel,\r\n  StateClass,\r\n  StatesByName\r\n} from '../internal/internals';\r\n\r\nexport abstract class StoreValidators {\r\n  public static stateNameRegex: RegExp = new RegExp('^[a-zA-Z0-9_]+$');\r\n\r\n  public static stateNameErrorMessage(name: string) {\r\n    return `${name} is not a valid state name. It needs to be a valid object property name.`;\r\n  }\r\n\r\n  public static checkCorrectStateName(name: string) {\r\n    if (!name) {\r\n      throw new Error(`States must register a 'name' property`);\r\n    }\r\n\r\n    if (!this.stateNameRegex.test(name)) {\r\n      throw new Error(this.stateNameErrorMessage(name));\r\n    }\r\n  }\r\n\r\n  public static checkStateNameIsUnique(state: StateClass, statesByName: StatesByName): string {\r\n    const meta: MetaDataModel = this.getValidStateMeta(state);\r\n    const stateName: string = meta!.name as string;\r\n    const existingState = statesByName[stateName];\r\n    if (existingState && existingState !== state) {\r\n      throw new Error(\r\n        `State name '${stateName}' from ${state.name} already exists in ${existingState.name}`\r\n      );\r\n    }\r\n    return stateName;\r\n  }\r\n\r\n  public static getValidStateMeta(state: StateClass): MetaDataModel {\r\n    const meta: MetaDataModel = getStoreMetadata(state);\r\n    if (!meta) {\r\n      throw new Error('States must be decorated with @State() decorator');\r\n    }\r\n\r\n    return meta;\r\n  }\r\n}\r\n","import { Injectable, Injector, Optional, SkipSelf } from '@angular/core';\r\nimport { forkJoin, from, Observable, of, throwError } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  defaultIfEmpty,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  shareReplay,\r\n  takeUntil\r\n} from 'rxjs/operators';\r\n\r\nimport { META_KEY, NgxsConfig } from '../symbols';\r\nimport {\r\n  buildGraph,\r\n  findFullParentPath,\r\n  isObject,\r\n  MappedStore,\r\n  MetaDataModel,\r\n  nameToState,\r\n  ObjectKeyMap,\r\n  propGetter,\r\n  StateClass,\r\n  StateKeyGraph,\r\n  StatesAndDefaults,\r\n  StatesByName,\r\n  topologicalSort\r\n} from './internals';\r\nimport { getActionTypeFromInstance, getValue, setValue } from '../utils/utils';\r\nimport { ofActionDispatched } from '../operators/of-action';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\n\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateFactory {\r\n  private _connected = false;\r\n  private _states: MappedStore[] = [];\r\n  private _statesByName: StatesByName = {};\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    private _config: NgxsConfig,\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentFactory: StateFactory,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _stateContextFactory: StateContextFactory,\r\n    private _internalStateOperations: InternalStateOperations\r\n  ) {}\r\n\r\n  public get states(): MappedStore[] {\r\n    return this._parentFactory ? this._parentFactory.states : this._states;\r\n  }\r\n\r\n  public get statesByName(): StatesByName {\r\n    return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\r\n  }\r\n\r\n  private get stateTreeRef(): ObjectKeyMap<any> {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  private static cloneDefaults(defaults: any): any {\r\n    let value = {};\r\n\r\n    if (Array.isArray(defaults)) {\r\n      value = [...defaults];\r\n    } else if (isObject(defaults)) {\r\n      value = { ...defaults };\r\n    } else if (defaults === undefined) {\r\n      value = {};\r\n    } else {\r\n      value = defaults;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  private static checkStatesAreValid(stateClasses: StateClass[]): void {\r\n    stateClasses.forEach(StoreValidators.getValidStateMeta);\r\n  }\r\n\r\n  /**\r\n   * Add a new state to the global defs.\r\n   */\r\n  add(stateClasses: StateClass[]): MappedStore[] {\r\n    StateFactory.checkStatesAreValid(stateClasses);\r\n    const { newStates } = this.addToStatesMap(stateClasses);\r\n    if (!newStates.length) return [];\r\n\r\n    const stateGraph: StateKeyGraph = buildGraph(newStates);\r\n    const sortedStates: string[] = topologicalSort(stateGraph);\r\n    const depths: ObjectKeyMap<string> = findFullParentPath(stateGraph);\r\n    const nameGraph: ObjectKeyMap<StateClass> = nameToState(newStates);\r\n    const bootstrappedStores: MappedStore[] = [];\r\n\r\n    for (const name of sortedStates) {\r\n      const stateClass: StateClass = nameGraph[name];\r\n      const depth: string = depths[name];\r\n      const meta: MetaDataModel = stateClass[META_KEY]!;\r\n\r\n      this.addRuntimeInfoToMeta(meta, depth);\r\n\r\n      const stateMap: MappedStore = {\r\n        name,\r\n        depth,\r\n        actions: meta.actions,\r\n        instance: this._injector.get(stateClass),\r\n        defaults: StateFactory.cloneDefaults(meta.defaults)\r\n      };\r\n\r\n      // ensure our store hasn't already been added\r\n      // but don't throw since it could be lazy\r\n      // loaded from different paths\r\n      if (!this.hasBeenMountedAndBootstrapped(name, depth)) {\r\n        bootstrappedStores.push(stateMap);\r\n      }\r\n\r\n      this.states.push(stateMap);\r\n    }\r\n\r\n    return bootstrappedStores;\r\n  }\r\n\r\n  /**\r\n   * Add a set of states to the store and return the defaults\r\n   */\r\n  addAndReturnDefaults(stateClasses: StateClass[]): StatesAndDefaults {\r\n    const classes: StateClass[] = stateClasses || [];\r\n\r\n    const states: MappedStore[] = this.add(classes);\r\n    const defaults = states.reduce(\r\n      (result: any, meta: MappedStore) => setValue(result, meta.depth, meta.defaults),\r\n      {}\r\n    );\r\n    return { defaults, states };\r\n  }\r\n\r\n  /**\r\n   * Bind the actions to the handlers\r\n   */\r\n  connectActionHandlers() {\r\n    if (this._connected) return;\r\n    this._actions\r\n      .pipe(\r\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\r\n        mergeMap(({ action }) =>\r\n          this.invokeActions(this._actions, action!).pipe(\r\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\r\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\r\n            catchError(error =>\r\n              of(<ActionContext>{ action, status: ActionStatus.Errored, error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n      .subscribe(ctx => this._actionResults.next(ctx));\r\n    this._connected = true;\r\n  }\r\n\r\n  /**\r\n   * Invoke actions on the states.\r\n   */\r\n  invokeActions(actions$: InternalActions, action: any) {\r\n    const results = [];\r\n\r\n    for (const metadata of this.states) {\r\n      const type = getActionTypeFromInstance(action)!;\r\n      const actionMetas = metadata.actions[type];\r\n\r\n      if (actionMetas) {\r\n        for (const actionMeta of actionMetas) {\r\n          const stateContext = this._stateContextFactory.createStateContext(metadata);\r\n          try {\r\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\r\n\r\n            if (result instanceof Promise) {\r\n              result = from(result);\r\n            }\r\n\r\n            if (result instanceof Observable) {\r\n              result = result.pipe(\r\n                actionMeta.options.cancelUncompleted\r\n                  ? // todo: ofActionDispatched should be used with action class\r\n                    takeUntil(actions$.pipe(ofActionDispatched(action as any)))\r\n                  : map(r => r)\r\n              ); // map acts like a noop\r\n            } else {\r\n              result = of({}).pipe(shareReplay());\r\n            }\r\n\r\n            results.push(result);\r\n          } catch (e) {\r\n            results.push(throwError(e));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!results.length) {\r\n      results.push(of({}));\r\n    }\r\n\r\n    return forkJoin(results);\r\n  }\r\n\r\n  private addToStatesMap(stateClasses: StateClass[]): { newStates: StateClass[] } {\r\n    const newStates: StateClass[] = [];\r\n    const statesMap: StatesByName = this.statesByName;\r\n\r\n    for (const stateClass of stateClasses) {\r\n      const stateName: string = StoreValidators.checkStateNameIsUnique(stateClass, statesMap);\r\n      const unmountedState: boolean = !statesMap[stateName];\r\n      if (unmountedState) {\r\n        newStates.push(stateClass);\r\n        statesMap[stateName] = stateClass;\r\n      }\r\n    }\r\n\r\n    return { newStates };\r\n  }\r\n\r\n  private addRuntimeInfoToMeta(meta: MetaDataModel, depth: string): void {\r\n    meta.path = depth;\r\n    meta.selectFromAppState = propGetter(depth.split('.'), this._config);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * the method checks if the state has already been added to the tree\r\n   * and completed the life cycle\r\n   * @param name\r\n   * @param path\r\n   */\r\n  private hasBeenMountedAndBootstrapped(name: string, path: string): boolean {\r\n    const valueIsBootstrapped: boolean = getValue(this.stateTreeRef, path) !== undefined;\r\n    return this.statesByName[name] && valueIsBootstrapped;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NgxsBootstrapper } from '@ngxs/store/internals';\r\n\r\nimport { filter, tap, mergeMap } from 'rxjs/operators';\r\n\r\nimport { StateContextFactory } from './state-context-factory';\r\nimport { InternalStateOperations } from './state-operations';\r\nimport { MappedStore, StatesAndDefaults } from './internals';\r\nimport { LifecycleHooks, NgxsLifeCycle } from '../symbols';\r\n\r\n@Injectable()\r\nexport class LifecycleStateManager {\r\n  constructor(\r\n    private internalStateOperations: InternalStateOperations,\r\n    private stateContextFactory: StateContextFactory,\r\n    private bootstrapper: NgxsBootstrapper\r\n  ) {}\r\n\r\n  ngxsBootstrap<T>(action: T, results: StatesAndDefaults | undefined): void {\r\n    this.internalStateOperations\r\n      .getRootStateOperations()\r\n      .dispatch(action)\r\n      .pipe(\r\n        filter(() => !!results),\r\n        tap(() => this.invokeInit(results!.states)),\r\n        mergeMap(() => this.bootstrapper.appBootstrapped$),\r\n        filter(appBootstrapped => !!appBootstrapped)\r\n      )\r\n      .subscribe(() => {\r\n        this.invokeBootstrap(results!.states);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Invoke the init function on the states.\r\n   */\r\n  invokeInit(stateMetadatas: MappedStore[]): void {\r\n    this.invokeLifecycleHooks(stateMetadatas, LifecycleHooks.NgxsOnInit);\r\n  }\r\n\r\n  /**\r\n   * Invoke the bootstrap function on the states.\r\n   */\r\n  invokeBootstrap(stateMetadatas: MappedStore[]) {\r\n    this.invokeLifecycleHooks(stateMetadatas, LifecycleHooks.NgxsAfterBootstrap);\r\n  }\r\n\r\n  private invokeLifecycleHooks(stateMetadatas: MappedStore[], hook: LifecycleHooks): void {\r\n    for (const metadata of stateMetadatas) {\r\n      const instance: NgxsLifeCycle = metadata.instance;\r\n\r\n      if (instance[hook]) {\r\n        const stateContext = this.stateContextFactory.createStateContext(metadata);\r\n        instance[hook]!(stateContext);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {\r\n  SelectFromState,\r\n  ensureSelectorMetadata,\r\n  getSelectorMetadata,\r\n  getStoreMetadata\r\n} from '../internal/internals';\r\nimport { memoize } from '../utils/memoize';\r\n\r\n/**\r\n * Function for creating a selector\r\n * @param selectors The selectors to use to create the arguments of this function\r\n * @param originalFn The original function being made into a selector\r\n * @param creationMetadata\r\n */\r\nexport function createSelector<T extends (...args: any[]) => any>(\r\n  selectors: any[] | undefined,\r\n  originalFn: T,\r\n  creationMetadata?: { containerClass: any; selectorName: string }\r\n) {\r\n  const wrappedFn = function wrappedSelectorFn(...args: any[]) {\r\n    const returnValue = originalFn(...args);\r\n    if (returnValue instanceof Function) {\r\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\r\n      return innerMemoizedFn;\r\n    }\r\n    return returnValue;\r\n  } as T;\r\n  const memoizedFn = memoize(wrappedFn);\r\n  const containerClass = creationMetadata && creationMetadata.containerClass;\r\n\r\n  const fn = (state: any) => {\r\n    const results = [];\r\n\r\n    const selectorsToApply = [];\r\n\r\n    if (containerClass) {\r\n      // If we are on a state class, add it as the first selector parameter\r\n      const metadata = getStoreMetadata(containerClass);\r\n      if (metadata) {\r\n        selectorsToApply.push(containerClass);\r\n      }\r\n    }\r\n\r\n    if (selectors) {\r\n      selectorsToApply.push(...selectors);\r\n    }\r\n\r\n    // Determine arguments from the app state using the selectors\r\n    results.push(...selectorsToApply.map(a => getSelectorFn(a)(state)));\r\n\r\n    // if the lambda tries to access a something on the\r\n    // state that doesn't exist, it will throw a TypeError.\r\n    // since this is quite usual behaviour, we simply return undefined if so.\r\n    try {\r\n      return memoizedFn(...results);\r\n    } catch (ex) {\r\n      if (ex instanceof TypeError) {\r\n        return undefined;\r\n      }\r\n      throw ex;\r\n    }\r\n  };\r\n\r\n  const selectorMetaData = ensureSelectorMetadata(memoizedFn);\r\n  selectorMetaData.originalFn = originalFn;\r\n  selectorMetaData.selectFromAppState = fn;\r\n  if (creationMetadata) {\r\n    selectorMetaData.containerClass = creationMetadata.containerClass;\r\n    selectorMetaData.selectorName = creationMetadata.selectorName;\r\n  }\r\n  return memoizedFn;\r\n}\r\n\r\n/**\r\n * This function gets the selector function to be used to get the selected slice from the app state\r\n * @ignore\r\n */\r\nexport function getSelectorFn(selector: any): SelectFromState {\r\n  const metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\r\n  return (metadata && metadata.selectFromAppState) || selector;\r\n}\r\n","// tslint:disable:unified-signatures\r\nimport { Injectable, Type } from '@angular/core';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\r\n\r\nimport { getSelectorFn } from './utils/selector-utils';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { NgxsConfig } from './symbols';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\n\r\n@Injectable()\r\nexport class Store {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _internalStateOperations: InternalStateOperations,\r\n    private _config: NgxsConfig,\r\n    private _internalExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {\r\n    this._stateStream.next(this._config.defaultsState);\r\n  }\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(event: any | any[]): Observable<any> {\r\n    return this._internalStateOperations.getRootStateOperations().dispatch(event);\r\n  }\r\n\r\n  /**\r\n   * Selects a slice of data from the store.\r\n   */\r\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  select<T = any>(selector: string | Type<any>): Observable<T>;\r\n  select(selector: any): Observable<any> {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return this._stateStream.pipe(\r\n      map(selectorFn),\r\n      catchError(err => {\r\n        // if error is TypeError we swallow it to prevent usual errors with property access\r\n        if (err instanceof TypeError) {\r\n          return of(undefined);\r\n        }\r\n\r\n        // rethrow other errors\r\n        throw err;\r\n      }),\r\n      distinctUntilChanged(),\r\n      leaveNgxs(this._internalExecutionStrategy)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Select one slice of data from the store.\r\n   */\r\n\r\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  selectOnce<T = any>(selector: string | Type<any>): Observable<T>;\r\n  selectOnce(selector: any): Observable<any> {\r\n    return this.select(selector).pipe(take(1));\r\n  }\r\n\r\n  /**\r\n   * Select a snapshot from the state.\r\n   */\r\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\r\n  selectSnapshot<T = any>(selector: string | Type<any>): T;\r\n  selectSnapshot(selector: any): any {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return selectorFn(this._stateStream.getValue());\r\n  }\r\n\r\n  /**\r\n   * Allow the user to subscribe to the root of the state\r\n   */\r\n  subscribe(fn?: (value: any) => void): Subscription {\r\n    return this._stateStream.pipe(leaveNgxs(this._internalExecutionStrategy)).subscribe(fn);\r\n  }\r\n\r\n  /**\r\n   * Return the raw value of the state.\r\n   */\r\n  snapshot(): any {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  /**\r\n   * Reset the state to a specific point in time. This method is useful\r\n   * for plugin's who need to modify the state directly or unit testing.\r\n   */\r\n  reset(state: any) {\r\n    return this._internalStateOperations.getRootStateOperations().setState(state);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Store } from '../store';\r\nimport { propGetter, removeDollarAtTheEnd } from '../internal/internals';\r\nimport { META_KEY, NgxsConfig } from '../symbols';\r\n\r\n/**\r\n * Allows the select decorator to get access to the DI store.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class SelectFactory {\r\n  static store: Store | undefined = undefined;\r\n  static config: NgxsConfig | undefined = undefined;\r\n  constructor(store: Store, config: NgxsConfig) {\r\n    SelectFactory.store = store;\r\n    SelectFactory.config = config;\r\n  }\r\n}\r\n\r\n/**\r\n * Decorator for selecting a slice of state from the store.\r\n */\r\nexport function Select(selectorOrFeature?: any, ...paths: string[]) {\r\n  return function(target: any, name: string) {\r\n    const selectorFnName = '__' + name + '__selector';\r\n\r\n    if (!selectorOrFeature) {\r\n      selectorOrFeature = removeDollarAtTheEnd(name);\r\n    }\r\n\r\n    const createSelect = (fn: any) => {\r\n      const store = SelectFactory.store;\r\n\r\n      if (!store) {\r\n        throw new Error('SelectFactory not connected to store!');\r\n      }\r\n\r\n      return store.select(fn);\r\n    };\r\n\r\n    const createSelector = () => {\r\n      const config = SelectFactory.config;\r\n      if (typeof selectorOrFeature === 'string') {\r\n        const propsArray = paths.length\r\n          ? [selectorOrFeature, ...paths]\r\n          : selectorOrFeature.split('.');\r\n\r\n        return propGetter(propsArray, config!);\r\n      } else if (selectorOrFeature[META_KEY] && selectorOrFeature[META_KEY].path) {\r\n        return propGetter(selectorOrFeature[META_KEY].path.split('.'), config!);\r\n      } else {\r\n        return selectorOrFeature;\r\n      }\r\n    };\r\n\r\n    if (target[selectorFnName]) {\r\n      throw new Error(\r\n        'You cannot use @Select decorator and a ' + selectorFnName + ' property.'\r\n      );\r\n    }\r\n\r\n    if (delete target[name]) {\r\n      Object.defineProperty(target, selectorFnName, {\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      Object.defineProperty(target, name, {\r\n        get: function() {\r\n          return (\r\n            this[selectorFnName] ||\r\n            (this[selectorFnName] = createSelect.apply(this, [createSelector()]))\r\n          );\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    }\r\n  };\r\n}\r\n","/**\r\n * Init action\r\n */\r\nexport class InitState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@INIT';\r\n  }\r\n}\r\n\r\n/**\r\n * Update action\r\n */\r\nexport class UpdateState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@UPDATE_STATE';\r\n  }\r\n}\r\n","import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  Optional,\r\n  Inject,\r\n  InjectionToken,\r\n  APP_BOOTSTRAP_LISTENER\r\n} from '@angular/core';\r\n\r\nimport { NgxsBootstrapper } from '@ngxs/store/internals';\r\n\r\nimport { ROOT_STATE_TOKEN, FEATURE_STATE_TOKEN, NgxsConfig } from './symbols';\r\nimport { NGXS_EXECUTION_STRATEGY } from './execution/symbols';\r\nimport { StateFactory } from './internal/state-factory';\r\nimport { StateContextFactory } from './internal/state-context-factory';\r\nimport { Actions, InternalActions } from './actions-stream';\r\nimport { ConfigValidator } from './internal/config-validator';\r\nimport { LifecycleStateManager } from './internal/lifecycle-state-manager';\r\nimport { InternalDispatcher, InternalDispatchedActionResults } from './internal/dispatcher';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { Store } from './store';\r\nimport { SelectFactory } from './decorators/select';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { PluginManager } from './plugin-manager';\r\nimport { InitState, UpdateState } from './actions/actions';\r\nimport { StateClass } from './internal/internals';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\n\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsRootModule {\r\n  constructor(\r\n    factory: StateFactory,\r\n    internalStateOperations: InternalStateOperations,\r\n    store: Store,\r\n    select: SelectFactory,\r\n    @Optional()\r\n    @Inject(ROOT_STATE_TOKEN)\r\n    states: StateClass[] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // add stores to the state graph and return their defaults\r\n    const results = factory.addAndReturnDefaults(states);\r\n\r\n    internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n    // connect our actions stream\r\n    factory.connectActionHandlers();\r\n\r\n    // dispatch the init action and invoke init and bootstrap functions after\r\n    lifecycleStateManager.ngxsBootstrap(new InitState(), results);\r\n  }\r\n}\r\n\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\n@NgModule({})\r\nexport class NgxsFeatureModule {\r\n  constructor(\r\n    store: Store,\r\n    internalStateOperations: InternalStateOperations,\r\n    factory: StateFactory,\r\n    @Optional()\r\n    @Inject(FEATURE_STATE_TOKEN)\r\n    states: any[][],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n    const flattenedStates = ([] as any[]).concat(...states);\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results = factory.addAndReturnDefaults(flattenedStates);\r\n\r\n    if (results.states.length) {\r\n      internalStateOperations.setStateToTheCurrentWithNew(results);\r\n      // dispatch the update action and invoke init and bootstrap functions after\r\n      lifecycleStateManager.ngxsBootstrap(new UpdateState(), results);\r\n    }\r\n  }\r\n}\r\n\r\nexport type ModuleOptions = Partial<NgxsConfig>;\r\n\r\nexport function ngxsConfigFactory(options: ModuleOptions): NgxsConfig {\r\n  const config = Object.assign(new NgxsConfig(), options);\r\n  return config;\r\n}\r\n\r\nexport function appBootstrapListenerFactory(bootstrapper: NgxsBootstrapper) {\r\n  return () => bootstrapper.bootstrap();\r\n}\r\n\r\nexport const ROOT_OPTIONS = new InjectionToken<ModuleOptions>('ROOT_OPTIONS');\r\n\r\n/**\r\n * Ngxs Module\r\n */\r\n@NgModule({})\r\nexport class NgxsModule {\r\n  /**\r\n   * Root module factory\r\n   */\r\n  static forRoot(states: StateClass[] = [], options: ModuleOptions = {}): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsRootModule,\r\n      providers: [\r\n        StateFactory,\r\n        StateContextFactory,\r\n        Actions,\r\n        InternalActions,\r\n        NgxsBootstrapper,\r\n        ConfigValidator,\r\n        LifecycleStateManager,\r\n        InternalDispatcher,\r\n        InternalDispatchedActionResults,\r\n        InternalStateOperations,\r\n        InternalNgxsExecutionStrategy,\r\n        Store,\r\n        StateStream,\r\n        SelectFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: NGXS_EXECUTION_STRATEGY,\r\n          useClass: options.executionStrategy || DispatchOutsideZoneNgxsExecutionStrategy\r\n        },\r\n        {\r\n          provide: ROOT_STATE_TOKEN,\r\n          useValue: states\r\n        },\r\n        {\r\n          provide: ROOT_OPTIONS,\r\n          useValue: options\r\n        },\r\n        {\r\n          provide: NgxsConfig,\r\n          useFactory: ngxsConfigFactory,\r\n          deps: [ROOT_OPTIONS]\r\n        },\r\n        {\r\n          provide: APP_BOOTSTRAP_LISTENER,\r\n          useFactory: appBootstrapListenerFactory,\r\n          multi: true,\r\n          deps: [NgxsBootstrapper]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Feature module factory\r\n   */\r\n  static forFeature(states: StateClass[] = []): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsFeatureModule,\r\n      providers: [\r\n        StateFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: FEATURE_STATE_TOKEN,\r\n          multi: true,\r\n          useValue: states\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { ensureStoreMetadata } from '../internal/internals';\r\nimport { ActionOptions, ActionDef } from '../symbols';\r\n\r\n/**\r\n * Decorates a method with a action information.\r\n */\r\nexport function Action(\r\n  actions: ActionDef | ActionDef[] | { type: string } | { type: string }[],\r\n  options?: ActionOptions\r\n) {\r\n  return function(target: any, name: string, _descriptor: TypedPropertyDescriptor<any>) {\r\n    const meta = ensureStoreMetadata(target.constructor);\r\n\r\n    if (!Array.isArray(actions)) {\r\n      actions = [actions];\r\n    }\r\n\r\n    for (const action of actions) {\r\n      const type = action.type;\r\n\r\n      if (!meta.actions[type]) {\r\n        meta.actions[type] = [];\r\n      }\r\n\r\n      meta.actions[type].push({\r\n        fn: name,\r\n        options: options || {},\r\n        type\r\n      });\r\n    }\r\n  };\r\n}\r\n","import { ensureStoreMetadata, MetaDataModel, StateClass } from '../internal/internals';\r\nimport { META_KEY, META_OPTIONS_KEY, StoreOptions } from '../symbols';\r\nimport { StoreValidators } from '../utils/store-validators';\r\n\r\ninterface MutateMetaOptions<T> {\r\n  meta: MetaDataModel;\r\n  inheritedStateClass: StateClass;\r\n  optionsWithInheritance: StoreOptions<T>;\r\n}\r\n\r\n/**\r\n * Decorates a class with ngxs state information.\r\n */\r\nexport function State<T>(options: StoreOptions<T>) {\r\n  function getStateOptions(inheritedStateClass: StateClass): StoreOptions<T> {\r\n    const inheritanceOptions: Partial<StoreOptions<T>> =\r\n      inheritedStateClass[META_OPTIONS_KEY] || {};\r\n    return { ...inheritanceOptions, ...options } as StoreOptions<T>;\r\n  }\r\n\r\n  function mutateMetaData(params: MutateMetaOptions<T>): void {\r\n    const { meta, inheritedStateClass, optionsWithInheritance } = params;\r\n    const { children, defaults, name } = optionsWithInheritance;\r\n    StoreValidators.checkCorrectStateName(name);\r\n\r\n    if (inheritedStateClass.hasOwnProperty(META_KEY)) {\r\n      const inheritedMeta: Partial<MetaDataModel> = inheritedStateClass[META_KEY] || {};\r\n      meta.actions = { ...meta.actions, ...inheritedMeta.actions };\r\n    }\r\n\r\n    meta.children = children;\r\n    meta.defaults = defaults;\r\n    meta.name = name;\r\n  }\r\n\r\n  return (target: StateClass): void => {\r\n    const meta: MetaDataModel = ensureStoreMetadata(target);\r\n    const inheritedStateClass: StateClass = Object.getPrototypeOf(target);\r\n    const optionsWithInheritance: StoreOptions<T> = getStateOptions(inheritedStateClass);\r\n    mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });\r\n    target[META_OPTIONS_KEY] = optionsWithInheritance;\r\n  };\r\n}\r\n","import { createSelector } from '../utils/selector-utils';\r\n\r\n/**\r\n * Decorator for memoizing a state selector.\r\n */\r\nexport function Selector(selectors?: any[]) {\r\n  return (target: any, methodName: string, descriptor: PropertyDescriptor) => {\r\n    if (descriptor.value !== null) {\r\n      const originalFn = descriptor.value;\r\n\r\n      const memoizedFn = createSelector(\r\n        selectors,\r\n        originalFn.bind(target),\r\n        { containerClass: target, selectorName: methodName }\r\n      );\r\n\r\n      return {\r\n        configurable: true,\r\n        get() {\r\n          return memoizedFn;\r\n        }\r\n      };\r\n    } else {\r\n      throw new Error('Selectors only work on methods');\r\n    }\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\n\r\n@Injectable()\r\nexport class NoopNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n}\r\n"],"names":["isPlatformServer","NgZone","Injectable","Inject","PLATFORM_ID","InjectionToken","filter","map","Observable","tslib_1.__extends","Subject","BehaviorSubject","Optional","SkipSelf","forkJoin","shareReplay","take","exhaustMap","of","throwError","empty","ErrorHandler","getPlatform","COMPILER_OPTIONS","isDevMode","tslib_1.__values","mergeMap","defaultIfEmpty","catchError","from","takeUntil","Injector","tap","NgxsBootstrapper","distinctUntilChanged","NgModule","APP_BOOTSTRAP_LISTENER"],"mappings":"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"}
