/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getStoreMetadata } from '../internal/internals';
/**
 * @abstract
 */
export class StoreValidators {
    /**
     * @param {?} name
     * @return {?}
     */
    static stateNameErrorMessage(name) {
        return `${name} is not a valid state name. It needs to be a valid object property name.`;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    static checkCorrectStateName(name) {
        if (!name) {
            throw new Error(`States must register a 'name' property`);
        }
        if (!this.stateNameRegex.test(name)) {
            throw new Error(this.stateNameErrorMessage(name));
        }
    }
    /**
     * @param {?} state
     * @param {?} statesByName
     * @return {?}
     */
    static checkStateNameIsUnique(state, statesByName) {
        /** @type {?} */
        const meta = this.getValidStateMeta(state);
        /** @type {?} */
        const stateName = (/** @type {?} */ ((/** @type {?} */ (meta)).name));
        /** @type {?} */
        const existingState = statesByName[stateName];
        if (existingState && existingState !== state) {
            throw new Error(`State name '${stateName}' from ${state.name} already exists in ${existingState.name}`);
        }
        return stateName;
    }
    /**
     * @param {?} state
     * @return {?}
     */
    static getValidStateMeta(state) {
        /** @type {?} */
        const meta = getStoreMetadata(state);
        if (!meta) {
            throw new Error('States must be decorated with @State() decorator');
        }
        return meta;
    }
}
StoreValidators.stateNameRegex = new RegExp('^[a-zA-Z0-9_]+$');
if (false) {
    /** @type {?} */
    StoreValidators.stateNameRegex;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUtdmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsic3JjL3V0aWxzL3N0b3JlLXZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxnQkFBZ0IsRUFJakIsTUFBTSx1QkFBdUIsQ0FBQzs7OztBQUUvQixNQUFNLE9BQWdCLGVBQWU7Ozs7O0lBRzVCLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFZO1FBQzlDLE9BQU8sR0FBRyxJQUFJLDBFQUEwRSxDQUFDO0lBQzNGLENBQUM7Ozs7O0lBRU0sTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQVk7UUFDOUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztTQUMzRDtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNuQyxNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQzs7Ozs7O0lBRU0sTUFBTSxDQUFDLHNCQUFzQixDQUFDLEtBQWlCLEVBQUUsWUFBMEI7O2NBQzFFLElBQUksR0FBa0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQzs7Y0FDbkQsU0FBUyxHQUFXLG1CQUFBLG1CQUFBLElBQUksRUFBQyxDQUFDLElBQUksRUFBVTs7Y0FDeEMsYUFBYSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDN0MsSUFBSSxhQUFhLElBQUksYUFBYSxLQUFLLEtBQUssRUFBRTtZQUM1QyxNQUFNLElBQUksS0FBSyxDQUNiLGVBQWUsU0FBUyxVQUFVLEtBQUssQ0FBQyxJQUFJLHNCQUFzQixhQUFhLENBQUMsSUFBSSxFQUFFLENBQ3ZGLENBQUM7U0FDSDtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Ozs7O0lBRU0sTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQWlCOztjQUN6QyxJQUFJLEdBQWtCLGdCQUFnQixDQUFDLEtBQUssQ0FBQztRQUNuRCxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO1NBQ3JFO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOztBQW5DYSw4QkFBYyxHQUFXLElBQUksTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7OztJQUFyRSwrQkFBcUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIGdldFN0b3JlTWV0YWRhdGEsXHJcbiAgTWV0YURhdGFNb2RlbCxcclxuICBTdGF0ZUNsYXNzLFxyXG4gIFN0YXRlc0J5TmFtZVxyXG59IGZyb20gJy4uL2ludGVybmFsL2ludGVybmFscyc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3RvcmVWYWxpZGF0b3JzIHtcclxuICBwdWJsaWMgc3RhdGljIHN0YXRlTmFtZVJlZ2V4OiBSZWdFeHAgPSBuZXcgUmVnRXhwKCdeW2EtekEtWjAtOV9dKyQnKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBzdGF0ZU5hbWVFcnJvck1lc3NhZ2UobmFtZTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gYCR7bmFtZX0gaXMgbm90IGEgdmFsaWQgc3RhdGUgbmFtZS4gSXQgbmVlZHMgdG8gYmUgYSB2YWxpZCBvYmplY3QgcHJvcGVydHkgbmFtZS5gO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjaGVja0NvcnJlY3RTdGF0ZU5hbWUobmFtZTogc3RyaW5nKSB7XHJcbiAgICBpZiAoIW5hbWUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdGF0ZXMgbXVzdCByZWdpc3RlciBhICduYW1lJyBwcm9wZXJ0eWApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghdGhpcy5zdGF0ZU5hbWVSZWdleC50ZXN0KG5hbWUpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLnN0YXRlTmFtZUVycm9yTWVzc2FnZShuYW1lKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNoZWNrU3RhdGVOYW1lSXNVbmlxdWUoc3RhdGU6IFN0YXRlQ2xhc3MsIHN0YXRlc0J5TmFtZTogU3RhdGVzQnlOYW1lKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IG1ldGE6IE1ldGFEYXRhTW9kZWwgPSB0aGlzLmdldFZhbGlkU3RhdGVNZXRhKHN0YXRlKTtcclxuICAgIGNvbnN0IHN0YXRlTmFtZTogc3RyaW5nID0gbWV0YSEubmFtZSBhcyBzdHJpbmc7XHJcbiAgICBjb25zdCBleGlzdGluZ1N0YXRlID0gc3RhdGVzQnlOYW1lW3N0YXRlTmFtZV07XHJcbiAgICBpZiAoZXhpc3RpbmdTdGF0ZSAmJiBleGlzdGluZ1N0YXRlICE9PSBzdGF0ZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgYFN0YXRlIG5hbWUgJyR7c3RhdGVOYW1lfScgZnJvbSAke3N0YXRlLm5hbWV9IGFscmVhZHkgZXhpc3RzIGluICR7ZXhpc3RpbmdTdGF0ZS5uYW1lfWBcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdGF0ZU5hbWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGdldFZhbGlkU3RhdGVNZXRhKHN0YXRlOiBTdGF0ZUNsYXNzKTogTWV0YURhdGFNb2RlbCB7XHJcbiAgICBjb25zdCBtZXRhOiBNZXRhRGF0YU1vZGVsID0gZ2V0U3RvcmVNZXRhZGF0YShzdGF0ZSk7XHJcbiAgICBpZiAoIW1ldGEpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdGF0ZXMgbXVzdCBiZSBkZWNvcmF0ZWQgd2l0aCBAU3RhdGUoKSBkZWNvcmF0b3InKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWV0YTtcclxuICB9XHJcbn1cclxuIl19