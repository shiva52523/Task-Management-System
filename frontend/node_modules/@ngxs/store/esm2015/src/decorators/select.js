/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Store } from '../store';
import { propGetter, removeDollarAtTheEnd } from '../internal/internals';
import { META_KEY, NgxsConfig } from '../symbols';
/**
 * Allows the select decorator to get access to the DI store.
 * @ignore
 */
export class SelectFactory {
    /**
     * @param {?} store
     * @param {?} config
     */
    constructor(store, config) {
        SelectFactory.store = store;
        SelectFactory.config = config;
    }
}
SelectFactory.store = undefined;
SelectFactory.config = undefined;
SelectFactory.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SelectFactory.ctorParameters = () => [
    { type: Store },
    { type: NgxsConfig }
];
if (false) {
    /** @type {?} */
    SelectFactory.store;
    /** @type {?} */
    SelectFactory.config;
}
/**
 * Decorator for selecting a slice of state from the store.
 * @param {?=} selectorOrFeature
 * @param {...?} paths
 * @return {?}
 */
export function Select(selectorOrFeature, ...paths) {
    return (/**
     * @param {?} target
     * @param {?} name
     * @return {?}
     */
    function (target, name) {
        /** @type {?} */
        const selectorFnName = '__' + name + '__selector';
        if (!selectorOrFeature) {
            selectorOrFeature = removeDollarAtTheEnd(name);
        }
        /** @type {?} */
        const createSelect = (/**
         * @param {?} fn
         * @return {?}
         */
        (fn) => {
            /** @type {?} */
            const store = SelectFactory.store;
            if (!store) {
                throw new Error('SelectFactory not connected to store!');
            }
            return store.select(fn);
        });
        /** @type {?} */
        const createSelector = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const config = SelectFactory.config;
            if (typeof selectorOrFeature === 'string') {
                /** @type {?} */
                const propsArray = paths.length
                    ? [selectorOrFeature, ...paths]
                    : selectorOrFeature.split('.');
                return propGetter(propsArray, (/** @type {?} */ (config)));
            }
            else if (selectorOrFeature[META_KEY] && selectorOrFeature[META_KEY].path) {
                return propGetter(selectorOrFeature[META_KEY].path.split('.'), (/** @type {?} */ (config)));
            }
            else {
                return selectorOrFeature;
            }
        });
        if (target[selectorFnName]) {
            throw new Error('You cannot use @Select decorator and a ' + selectorFnName + ' property.');
        }
        if (delete target[name]) {
            Object.defineProperty(target, selectorFnName, {
                writable: true,
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(target, name, {
                get: (/**
                 * @return {?}
                 */
                function () {
                    return (this[selectorFnName] ||
                        (this[selectorFnName] = createSelect.apply(this, [createSelector()])));
                }),
                enumerable: true,
                configurable: true
            });
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvZGVjb3JhdG9ycy9zZWxlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNqQyxPQUFPLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDekUsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxZQUFZLENBQUM7Ozs7O0FBT2xELE1BQU0sT0FBTyxhQUFhOzs7OztJQUd4QixZQUFZLEtBQVksRUFBRSxNQUFrQjtRQUMxQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUM1QixhQUFhLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUNoQyxDQUFDOztBQUxNLG1CQUFLLEdBQXNCLFNBQVMsQ0FBQztBQUNyQyxvQkFBTSxHQUEyQixTQUFTLENBQUM7O1lBSG5ELFVBQVU7Ozs7WUFSRixLQUFLO1lBRUssVUFBVTs7OztJQVEzQixvQkFBNEM7O0lBQzVDLHFCQUFrRDs7Ozs7Ozs7QUFVcEQsTUFBTSxVQUFVLE1BQU0sQ0FBQyxpQkFBdUIsRUFBRSxHQUFHLEtBQWU7SUFDaEU7Ozs7O0lBQU8sVUFBUyxNQUFXLEVBQUUsSUFBWTs7Y0FDakMsY0FBYyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsWUFBWTtRQUVqRCxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDdEIsaUJBQWlCLEdBQUcsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEQ7O2NBRUssWUFBWTs7OztRQUFHLENBQUMsRUFBTyxFQUFFLEVBQUU7O2tCQUN6QixLQUFLLEdBQUcsYUFBYSxDQUFDLEtBQUs7WUFFakMsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDVixNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7YUFDMUQ7WUFFRCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFBOztjQUVLLGNBQWM7OztRQUFHLEdBQUcsRUFBRTs7a0JBQ3BCLE1BQU0sR0FBRyxhQUFhLENBQUMsTUFBTTtZQUNuQyxJQUFJLE9BQU8saUJBQWlCLEtBQUssUUFBUSxFQUFFOztzQkFDbkMsVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNO29CQUM3QixDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEtBQUssQ0FBQztvQkFDL0IsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7Z0JBRWhDLE9BQU8sVUFBVSxDQUFDLFVBQVUsRUFBRSxtQkFBQSxNQUFNLEVBQUMsQ0FBQyxDQUFDO2FBQ3hDO2lCQUFNLElBQUksaUJBQWlCLENBQUMsUUFBUSxDQUFDLElBQUksaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFO2dCQUMxRSxPQUFPLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLG1CQUFBLE1BQU0sRUFBQyxDQUFDLENBQUM7YUFDekU7aUJBQU07Z0JBQ0wsT0FBTyxpQkFBaUIsQ0FBQzthQUMxQjtRQUNILENBQUMsQ0FBQTtRQUVELElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQ2IseUNBQXlDLEdBQUcsY0FBYyxHQUFHLFlBQVksQ0FDMUUsQ0FBQztTQUNIO1FBRUQsSUFBSSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN2QixNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxjQUFjLEVBQUU7Z0JBQzVDLFFBQVEsRUFBRSxJQUFJO2dCQUNkLFVBQVUsRUFBRSxLQUFLO2dCQUNqQixZQUFZLEVBQUUsSUFBSTthQUNuQixDQUFDLENBQUM7WUFFSCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBQ2xDLEdBQUc7OztnQkFBRTtvQkFDSCxPQUFPLENBQ0wsSUFBSSxDQUFDLGNBQWMsQ0FBQzt3QkFDcEIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDdEUsQ0FBQztnQkFDSixDQUFDLENBQUE7Z0JBQ0QsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLFlBQVksRUFBRSxJQUFJO2FBQ25CLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQyxFQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnLi4vc3RvcmUnO1xyXG5pbXBvcnQgeyBwcm9wR2V0dGVyLCByZW1vdmVEb2xsYXJBdFRoZUVuZCB9IGZyb20gJy4uL2ludGVybmFsL2ludGVybmFscyc7XHJcbmltcG9ydCB7IE1FVEFfS0VZLCBOZ3hzQ29uZmlnIH0gZnJvbSAnLi4vc3ltYm9scyc7XHJcblxyXG4vKipcclxuICogQWxsb3dzIHRoZSBzZWxlY3QgZGVjb3JhdG9yIHRvIGdldCBhY2Nlc3MgdG8gdGhlIERJIHN0b3JlLlxyXG4gKiBAaWdub3JlXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTZWxlY3RGYWN0b3J5IHtcclxuICBzdGF0aWMgc3RvcmU6IFN0b3JlIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gIHN0YXRpYyBjb25maWc6IE5neHNDb25maWcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcbiAgY29uc3RydWN0b3Ioc3RvcmU6IFN0b3JlLCBjb25maWc6IE5neHNDb25maWcpIHtcclxuICAgIFNlbGVjdEZhY3Rvcnkuc3RvcmUgPSBzdG9yZTtcclxuICAgIFNlbGVjdEZhY3RvcnkuY29uZmlnID0gY29uZmlnO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIERlY29yYXRvciBmb3Igc2VsZWN0aW5nIGEgc2xpY2Ugb2Ygc3RhdGUgZnJvbSB0aGUgc3RvcmUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0KHNlbGVjdG9yT3JGZWF0dXJlPzogYW55LCAuLi5wYXRoczogc3RyaW5nW10pIHtcclxuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0OiBhbnksIG5hbWU6IHN0cmluZykge1xyXG4gICAgY29uc3Qgc2VsZWN0b3JGbk5hbWUgPSAnX18nICsgbmFtZSArICdfX3NlbGVjdG9yJztcclxuXHJcbiAgICBpZiAoIXNlbGVjdG9yT3JGZWF0dXJlKSB7XHJcbiAgICAgIHNlbGVjdG9yT3JGZWF0dXJlID0gcmVtb3ZlRG9sbGFyQXRUaGVFbmQobmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY3JlYXRlU2VsZWN0ID0gKGZuOiBhbnkpID0+IHtcclxuICAgICAgY29uc3Qgc3RvcmUgPSBTZWxlY3RGYWN0b3J5LnN0b3JlO1xyXG5cclxuICAgICAgaWYgKCFzdG9yZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2VsZWN0RmFjdG9yeSBub3QgY29ubmVjdGVkIHRvIHN0b3JlIScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gc3RvcmUuc2VsZWN0KGZuKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgY3JlYXRlU2VsZWN0b3IgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbmZpZyA9IFNlbGVjdEZhY3RvcnkuY29uZmlnO1xyXG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yT3JGZWF0dXJlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGNvbnN0IHByb3BzQXJyYXkgPSBwYXRocy5sZW5ndGhcclxuICAgICAgICAgID8gW3NlbGVjdG9yT3JGZWF0dXJlLCAuLi5wYXRoc11cclxuICAgICAgICAgIDogc2VsZWN0b3JPckZlYXR1cmUuc3BsaXQoJy4nKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHByb3BHZXR0ZXIocHJvcHNBcnJheSwgY29uZmlnISk7XHJcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0b3JPckZlYXR1cmVbTUVUQV9LRVldICYmIHNlbGVjdG9yT3JGZWF0dXJlW01FVEFfS0VZXS5wYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHByb3BHZXR0ZXIoc2VsZWN0b3JPckZlYXR1cmVbTUVUQV9LRVldLnBhdGguc3BsaXQoJy4nKSwgY29uZmlnISk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yT3JGZWF0dXJlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGlmICh0YXJnZXRbc2VsZWN0b3JGbk5hbWVdKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAnWW91IGNhbm5vdCB1c2UgQFNlbGVjdCBkZWNvcmF0b3IgYW5kIGEgJyArIHNlbGVjdG9yRm5OYW1lICsgJyBwcm9wZXJ0eS4nXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRlbGV0ZSB0YXJnZXRbbmFtZV0pIHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgc2VsZWN0b3JGbk5hbWUsIHtcclxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIHRoaXNbc2VsZWN0b3JGbk5hbWVdIHx8XHJcbiAgICAgICAgICAgICh0aGlzW3NlbGVjdG9yRm5OYW1lXSA9IGNyZWF0ZVNlbGVjdC5hcHBseSh0aGlzLCBbY3JlYXRlU2VsZWN0b3IoKV0pKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuIl19