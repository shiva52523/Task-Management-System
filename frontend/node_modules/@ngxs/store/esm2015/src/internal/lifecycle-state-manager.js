/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NgxsBootstrapper } from '@ngxs/store/internals';
import { filter, tap, mergeMap } from 'rxjs/operators';
import { StateContextFactory } from './state-context-factory';
import { InternalStateOperations } from './state-operations';
export class LifecycleStateManager {
    /**
     * @param {?} internalStateOperations
     * @param {?} stateContextFactory
     * @param {?} bootstrapper
     */
    constructor(internalStateOperations, stateContextFactory, bootstrapper) {
        this.internalStateOperations = internalStateOperations;
        this.stateContextFactory = stateContextFactory;
        this.bootstrapper = bootstrapper;
    }
    /**
     * @template T
     * @param {?} action
     * @param {?} results
     * @return {?}
     */
    ngxsBootstrap(action, results) {
        this.internalStateOperations
            .getRootStateOperations()
            .dispatch(action)
            .pipe(filter((/**
         * @return {?}
         */
        () => !!results)), tap((/**
         * @return {?}
         */
        () => this.invokeInit((/** @type {?} */ (results)).states))), mergeMap((/**
         * @return {?}
         */
        () => this.bootstrapper.appBootstrapped$)), filter((/**
         * @param {?} appBootstrapped
         * @return {?}
         */
        appBootstrapped => !!appBootstrapped)))
            .subscribe((/**
         * @return {?}
         */
        () => {
            this.invokeBootstrap((/** @type {?} */ (results)).states);
        }));
    }
    /**
     * Invoke the init function on the states.
     * @param {?} stateMetadatas
     * @return {?}
     */
    invokeInit(stateMetadatas) {
        this.invokeLifecycleHooks(stateMetadatas, "ngxsOnInit" /* NgxsOnInit */);
    }
    /**
     * Invoke the bootstrap function on the states.
     * @param {?} stateMetadatas
     * @return {?}
     */
    invokeBootstrap(stateMetadatas) {
        this.invokeLifecycleHooks(stateMetadatas, "ngxsAfterBootstrap" /* NgxsAfterBootstrap */);
    }
    /**
     * @private
     * @param {?} stateMetadatas
     * @param {?} hook
     * @return {?}
     */
    invokeLifecycleHooks(stateMetadatas, hook) {
        for (const metadata of stateMetadatas) {
            /** @type {?} */
            const instance = metadata.instance;
            if (instance[hook]) {
                /** @type {?} */
                const stateContext = this.stateContextFactory.createStateContext(metadata);
                (/** @type {?} */ (instance[hook]))(stateContext);
            }
        }
    }
}
LifecycleStateManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LifecycleStateManager.ctorParameters = () => [
    { type: InternalStateOperations },
    { type: StateContextFactory },
    { type: NgxsBootstrapper }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.internalStateOperations;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.stateContextFactory;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.bootstrapper;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmZWN5Y2xlLXN0YXRlLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9pbnRlcm5hbC9saWZlY3ljbGUtc3RhdGUtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUs3RCxNQUFNLE9BQU8scUJBQXFCOzs7Ozs7SUFDaEMsWUFDVSx1QkFBZ0QsRUFDaEQsbUJBQXdDLEVBQ3hDLFlBQThCO1FBRjlCLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUFDaEQsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4QyxpQkFBWSxHQUFaLFlBQVksQ0FBa0I7SUFDckMsQ0FBQzs7Ozs7OztJQUVKLGFBQWEsQ0FBSSxNQUFTLEVBQUUsT0FBc0M7UUFDaEUsSUFBSSxDQUFDLHVCQUF1QjthQUN6QixzQkFBc0IsRUFBRTthQUN4QixRQUFRLENBQUMsTUFBTSxDQUFDO2FBQ2hCLElBQUksQ0FDSCxNQUFNOzs7UUFBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFDLEVBQ3ZCLEdBQUc7OztRQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQUEsT0FBTyxFQUFDLENBQUMsTUFBTSxDQUFDLEVBQUMsRUFDM0MsUUFBUTs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBQyxFQUNsRCxNQUFNOzs7O1FBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsZUFBZSxFQUFDLENBQzdDO2FBQ0EsU0FBUzs7O1FBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxtQkFBQSxPQUFPLEVBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QyxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7OztJQUtELFVBQVUsQ0FBQyxjQUE2QjtRQUN0QyxJQUFJLENBQUMsb0JBQW9CLENBQUMsY0FBYyxnQ0FBNEIsQ0FBQztJQUN2RSxDQUFDOzs7Ozs7SUFLRCxlQUFlLENBQUMsY0FBNkI7UUFDM0MsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGNBQWMsZ0RBQW9DLENBQUM7SUFDL0UsQ0FBQzs7Ozs7OztJQUVPLG9CQUFvQixDQUFDLGNBQTZCLEVBQUUsSUFBb0I7UUFDOUUsS0FBSyxNQUFNLFFBQVEsSUFBSSxjQUFjLEVBQUU7O2tCQUMvQixRQUFRLEdBQWtCLFFBQVEsQ0FBQyxRQUFRO1lBRWpELElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFOztzQkFDWixZQUFZLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQztnQkFDMUUsbUJBQUEsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDL0I7U0FDRjtJQUNILENBQUM7OztZQTlDRixVQUFVOzs7O1lBSkYsdUJBQXVCO1lBRHZCLG1CQUFtQjtZQUpuQixnQkFBZ0I7Ozs7Ozs7SUFZckIsd0RBQXdEOzs7OztJQUN4RCxvREFBZ0Q7Ozs7O0lBQ2hELDZDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmd4c0Jvb3RzdHJhcHBlciB9IGZyb20gJ0BuZ3hzL3N0b3JlL2ludGVybmFscyc7XHJcblxyXG5pbXBvcnQgeyBmaWx0ZXIsIHRhcCwgbWVyZ2VNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBTdGF0ZUNvbnRleHRGYWN0b3J5IH0gZnJvbSAnLi9zdGF0ZS1jb250ZXh0LWZhY3RvcnknO1xyXG5pbXBvcnQgeyBJbnRlcm5hbFN0YXRlT3BlcmF0aW9ucyB9IGZyb20gJy4vc3RhdGUtb3BlcmF0aW9ucyc7XHJcbmltcG9ydCB7IE1hcHBlZFN0b3JlLCBTdGF0ZXNBbmREZWZhdWx0cyB9IGZyb20gJy4vaW50ZXJuYWxzJztcclxuaW1wb3J0IHsgTGlmZWN5Y2xlSG9va3MsIE5neHNMaWZlQ3ljbGUgfSBmcm9tICcuLi9zeW1ib2xzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIExpZmVjeWNsZVN0YXRlTWFuYWdlciB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGludGVybmFsU3RhdGVPcGVyYXRpb25zOiBJbnRlcm5hbFN0YXRlT3BlcmF0aW9ucyxcclxuICAgIHByaXZhdGUgc3RhdGVDb250ZXh0RmFjdG9yeTogU3RhdGVDb250ZXh0RmFjdG9yeSxcclxuICAgIHByaXZhdGUgYm9vdHN0cmFwcGVyOiBOZ3hzQm9vdHN0cmFwcGVyXHJcbiAgKSB7fVxyXG5cclxuICBuZ3hzQm9vdHN0cmFwPFQ+KGFjdGlvbjogVCwgcmVzdWx0czogU3RhdGVzQW5kRGVmYXVsdHMgfCB1bmRlZmluZWQpOiB2b2lkIHtcclxuICAgIHRoaXMuaW50ZXJuYWxTdGF0ZU9wZXJhdGlvbnNcclxuICAgICAgLmdldFJvb3RTdGF0ZU9wZXJhdGlvbnMoKVxyXG4gICAgICAuZGlzcGF0Y2goYWN0aW9uKVxyXG4gICAgICAucGlwZShcclxuICAgICAgICBmaWx0ZXIoKCkgPT4gISFyZXN1bHRzKSxcclxuICAgICAgICB0YXAoKCkgPT4gdGhpcy5pbnZva2VJbml0KHJlc3VsdHMhLnN0YXRlcykpLFxyXG4gICAgICAgIG1lcmdlTWFwKCgpID0+IHRoaXMuYm9vdHN0cmFwcGVyLmFwcEJvb3RzdHJhcHBlZCQpLFxyXG4gICAgICAgIGZpbHRlcihhcHBCb290c3RyYXBwZWQgPT4gISFhcHBCb290c3RyYXBwZWQpXHJcbiAgICAgIClcclxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5pbnZva2VCb290c3RyYXAocmVzdWx0cyEuc3RhdGVzKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbnZva2UgdGhlIGluaXQgZnVuY3Rpb24gb24gdGhlIHN0YXRlcy5cclxuICAgKi9cclxuICBpbnZva2VJbml0KHN0YXRlTWV0YWRhdGFzOiBNYXBwZWRTdG9yZVtdKTogdm9pZCB7XHJcbiAgICB0aGlzLmludm9rZUxpZmVjeWNsZUhvb2tzKHN0YXRlTWV0YWRhdGFzLCBMaWZlY3ljbGVIb29rcy5OZ3hzT25Jbml0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEludm9rZSB0aGUgYm9vdHN0cmFwIGZ1bmN0aW9uIG9uIHRoZSBzdGF0ZXMuXHJcbiAgICovXHJcbiAgaW52b2tlQm9vdHN0cmFwKHN0YXRlTWV0YWRhdGFzOiBNYXBwZWRTdG9yZVtdKSB7XHJcbiAgICB0aGlzLmludm9rZUxpZmVjeWNsZUhvb2tzKHN0YXRlTWV0YWRhdGFzLCBMaWZlY3ljbGVIb29rcy5OZ3hzQWZ0ZXJCb290c3RyYXApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbnZva2VMaWZlY3ljbGVIb29rcyhzdGF0ZU1ldGFkYXRhczogTWFwcGVkU3RvcmVbXSwgaG9vazogTGlmZWN5Y2xlSG9va3MpOiB2b2lkIHtcclxuICAgIGZvciAoY29uc3QgbWV0YWRhdGEgb2Ygc3RhdGVNZXRhZGF0YXMpIHtcclxuICAgICAgY29uc3QgaW5zdGFuY2U6IE5neHNMaWZlQ3ljbGUgPSBtZXRhZGF0YS5pbnN0YW5jZTtcclxuXHJcbiAgICAgIGlmIChpbnN0YW5jZVtob29rXSkge1xyXG4gICAgICAgIGNvbnN0IHN0YXRlQ29udGV4dCA9IHRoaXMuc3RhdGVDb250ZXh0RmFjdG9yeS5jcmVhdGVTdGF0ZUNvbnRleHQobWV0YWRhdGEpO1xyXG4gICAgICAgIGluc3RhbmNlW2hvb2tdIShzdGF0ZUNvbnRleHQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==