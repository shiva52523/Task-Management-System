/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, isDevMode } from '@angular/core';
import { isAngularInTestMode } from '../utils/angular';
import { NgxsConfig } from '../symbols';
export class ConfigValidator {
    /**
     * @param {?} _config
     */
    constructor(_config) {
        this._config = _config;
    }
    /**
     * @return {?}
     */
    verifyDevMode() {
        if (isAngularInTestMode()) {
            return;
        }
        /** @type {?} */
        const isNgxsDevMode = this._config.developmentMode;
        /** @type {?} */
        const isNgDevMode = isDevMode();
        /** @type {?} */
        const incorrectProduction = !isNgDevMode && isNgxsDevMode;
        /** @type {?} */
        const incorrectDevelopment = isNgDevMode && !isNgxsDevMode;
        /** @type {?} */
        const example = 'NgxsModule.forRoot(states, { developmentMode: !environment.production })';
        if (incorrectProduction) {
            console.warn('Angular is running in production mode but NGXS is still running in the development mode!\n', 'Please set developmentMode to false on the NgxsModule options when in production mode.\n', example);
        }
        else if (incorrectDevelopment) {
            console.warn('RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\n', example);
        }
    }
}
ConfigValidator.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ConfigValidator.ctorParameters = () => [
    { type: NgxsConfig }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ConfigValidator.prototype._config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsic3JjL2ludGVybmFsL2NvbmZpZy12YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFHeEMsTUFBTSxPQUFPLGVBQWU7Ozs7SUFDMUIsWUFBb0IsT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtJQUFHLENBQUM7Ozs7SUFFcEMsYUFBYTtRQUNsQixJQUFJLG1CQUFtQixFQUFFLEVBQUU7WUFDekIsT0FBTztTQUNSOztjQUVLLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWU7O2NBQzVDLFdBQVcsR0FBRyxTQUFTLEVBQUU7O2NBQ3pCLG1CQUFtQixHQUFHLENBQUMsV0FBVyxJQUFJLGFBQWE7O2NBQ25ELG9CQUFvQixHQUFHLFdBQVcsSUFBSSxDQUFDLGFBQWE7O2NBQ3BELE9BQU8sR0FBRywwRUFBMEU7UUFFMUYsSUFBSSxtQkFBbUIsRUFBRTtZQUN2QixPQUFPLENBQUMsSUFBSSxDQUNWLDRGQUE0RixFQUM1RiwwRkFBMEYsRUFDMUYsT0FBTyxDQUNSLENBQUM7U0FDSDthQUFNLElBQUksb0JBQW9CLEVBQUU7WUFDL0IsT0FBTyxDQUFDLElBQUksQ0FDViw4R0FBOEcsRUFDOUcsT0FBTyxDQUNSLENBQUM7U0FDSDtJQUNILENBQUM7OztZQTNCRixVQUFVOzs7O1lBRkYsVUFBVTs7Ozs7OztJQUlMLGtDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIGlzRGV2TW9kZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgaXNBbmd1bGFySW5UZXN0TW9kZSB9IGZyb20gJy4uL3V0aWxzL2FuZ3VsYXInO1xyXG5pbXBvcnQgeyBOZ3hzQ29uZmlnIH0gZnJvbSAnLi4vc3ltYm9scyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDb25maWdWYWxpZGF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NvbmZpZzogTmd4c0NvbmZpZykge31cclxuXHJcbiAgcHVibGljIHZlcmlmeURldk1vZGUoKTogdm9pZCB7XHJcbiAgICBpZiAoaXNBbmd1bGFySW5UZXN0TW9kZSgpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpc05neHNEZXZNb2RlID0gdGhpcy5fY29uZmlnLmRldmVsb3BtZW50TW9kZTtcclxuICAgIGNvbnN0IGlzTmdEZXZNb2RlID0gaXNEZXZNb2RlKCk7XHJcbiAgICBjb25zdCBpbmNvcnJlY3RQcm9kdWN0aW9uID0gIWlzTmdEZXZNb2RlICYmIGlzTmd4c0Rldk1vZGU7XHJcbiAgICBjb25zdCBpbmNvcnJlY3REZXZlbG9wbWVudCA9IGlzTmdEZXZNb2RlICYmICFpc05neHNEZXZNb2RlO1xyXG4gICAgY29uc3QgZXhhbXBsZSA9ICdOZ3hzTW9kdWxlLmZvclJvb3Qoc3RhdGVzLCB7IGRldmVsb3BtZW50TW9kZTogIWVudmlyb25tZW50LnByb2R1Y3Rpb24gfSknO1xyXG5cclxuICAgIGlmIChpbmNvcnJlY3RQcm9kdWN0aW9uKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAnQW5ndWxhciBpcyBydW5uaW5nIGluIHByb2R1Y3Rpb24gbW9kZSBidXQgTkdYUyBpcyBzdGlsbCBydW5uaW5nIGluIHRoZSBkZXZlbG9wbWVudCBtb2RlIVxcbicsXHJcbiAgICAgICAgJ1BsZWFzZSBzZXQgZGV2ZWxvcG1lbnRNb2RlIHRvIGZhbHNlIG9uIHRoZSBOZ3hzTW9kdWxlIG9wdGlvbnMgd2hlbiBpbiBwcm9kdWN0aW9uIG1vZGUuXFxuJyxcclxuICAgICAgICBleGFtcGxlXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2UgaWYgKGluY29ycmVjdERldmVsb3BtZW50KSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAnUkVDT01NRU5EQVRJT046IFNldCBkZXZlbG9wbWVudE1vZGUgdG8gdHJ1ZSBvbiB0aGUgTmd4c01vZHVsZSB3aGVuIEFuZ3VsYXIgaXMgcnVubmluZyBpbiBkZXZlbG9wbWVudCBtb2RlLlxcbicsXHJcbiAgICAgICAgZXhhbXBsZVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=