/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */
export { NgxsModule, Action, Store, State, Select, Actions, getSelectorMetadata, getStoreMetadata, ensureStoreMetadata, ensureSelectorMetadata, ofAction, ofActionDispatched, ofActionSuccessful, ofActionCanceled, ofActionErrored, ofActionCompleted, Selector, getActionTypeFromInstance, actionMatcher, createSelector, NoopNgxsExecutionStrategy, NGXS_PLUGINS, StateStream, setValue, getValue, InitState, UpdateState } from './index';
export { InternalActions as ɵh, OrderedSubject as ɵg } from './src/actions-stream';
export { SelectFactory as ɵf } from './src/decorators/select';
export { DispatchOutsideZoneNgxsExecutionStrategy as ɵx } from './src/execution/dispatch-outside-zone-ngxs-execution-strategy';
export { InternalNgxsExecutionStrategy as ɵu } from './src/execution/internal-ngxs-execution-strategy';
export { NGXS_EXECUTION_STRATEGY as ɵn } from './src/execution/symbols';
export { ConfigValidator as ɵv } from './src/internal/config-validator';
export { InternalDispatchedActionResults as ɵp, InternalDispatcher as ɵq } from './src/internal/dispatcher';
export { LifecycleStateManager as ɵw } from './src/internal/lifecycle-state-manager';
export { StateContextFactory as ɵr } from './src/internal/state-context-factory';
export { StateFactory as ɵo } from './src/internal/state-factory';
export { InternalStateOperations as ɵs } from './src/internal/state-operations';
export { NgxsFeatureModule as ɵb, NgxsRootModule as ɵa, ROOT_OPTIONS as ɵe, appBootstrapListenerFactory as ɵd, ngxsConfigFactory as ɵc } from './src/module';
export { PluginManager as ɵt } from './src/plugin-manager';
export { FEATURE_STATE_TOKEN as ɵk, NgxsConfig as ɵm, ROOT_STATE_TOKEN as ɵj, SELECTOR_META_KEY as ɵl } from './src/symbols';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4cy1zdG9yZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsibmd4cy1zdG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSUEsb2FBQWMsU0FBUyxDQUFDO0FBRXhCLE9BQU8sRUFBQyxlQUFlLElBQUksRUFBRSxFQUFDLGNBQWMsSUFBSSxFQUFFLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRixPQUFPLEVBQUMsYUFBYSxJQUFJLEVBQUUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBQyx3Q0FBd0MsSUFBSSxFQUFFLEVBQUMsTUFBTSwrREFBK0QsQ0FBQztBQUM3SCxPQUFPLEVBQUMsNkJBQTZCLElBQUksRUFBRSxFQUFDLE1BQU0sa0RBQWtELENBQUM7QUFDckcsT0FBTyxFQUFDLHVCQUF1QixJQUFJLEVBQUUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3RFLE9BQU8sRUFBQyxlQUFlLElBQUksRUFBRSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDdEUsT0FBTyxFQUFDLCtCQUErQixJQUFJLEVBQUUsRUFBQyxrQkFBa0IsSUFBSSxFQUFFLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUV6RyxPQUFPLEVBQUMscUJBQXFCLElBQUksRUFBRSxFQUFDLE1BQU0sd0NBQXdDLENBQUM7QUFDbkYsT0FBTyxFQUFDLG1CQUFtQixJQUFJLEVBQUUsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQy9FLE9BQU8sRUFBQyxZQUFZLElBQUksRUFBRSxFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDaEUsT0FBTyxFQUFDLHVCQUF1QixJQUFJLEVBQUUsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBQzlFLE9BQU8sRUFBQyxpQkFBaUIsSUFBSSxFQUFFLEVBQUMsY0FBYyxJQUFJLEVBQUUsRUFBQyxZQUFZLElBQUksRUFBRSxFQUFDLDJCQUEyQixJQUFJLEVBQUUsRUFBQyxpQkFBaUIsSUFBSSxFQUFFLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDdkosT0FBTyxFQUFDLGFBQWEsSUFBSSxFQUFFLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUMsbUJBQW1CLElBQUksRUFBRSxFQUFDLFVBQVUsSUFBSSxFQUFFLEVBQUMsZ0JBQWdCLElBQUksRUFBRSxFQUFDLGlCQUFpQixJQUFJLEVBQUUsRUFBQyxNQUFNLGVBQWUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2VuZXJhdGVkIGJ1bmRsZSBpbmRleC4gRG8gbm90IGVkaXQuXG4gKi9cblxuZXhwb3J0ICogZnJvbSAnLi9pbmRleCc7XG5cbmV4cG9ydCB7SW50ZXJuYWxBY3Rpb25zIGFzIMm1aCxPcmRlcmVkU3ViamVjdCBhcyDJtWd9IGZyb20gJy4vc3JjL2FjdGlvbnMtc3RyZWFtJztcbmV4cG9ydCB7U2VsZWN0RmFjdG9yeSBhcyDJtWZ9IGZyb20gJy4vc3JjL2RlY29yYXRvcnMvc2VsZWN0JztcbmV4cG9ydCB7RGlzcGF0Y2hPdXRzaWRlWm9uZU5neHNFeGVjdXRpb25TdHJhdGVneSBhcyDJtXh9IGZyb20gJy4vc3JjL2V4ZWN1dGlvbi9kaXNwYXRjaC1vdXRzaWRlLXpvbmUtbmd4cy1leGVjdXRpb24tc3RyYXRlZ3knO1xuZXhwb3J0IHtJbnRlcm5hbE5neHNFeGVjdXRpb25TdHJhdGVneSBhcyDJtXV9IGZyb20gJy4vc3JjL2V4ZWN1dGlvbi9pbnRlcm5hbC1uZ3hzLWV4ZWN1dGlvbi1zdHJhdGVneSc7XG5leHBvcnQge05HWFNfRVhFQ1VUSU9OX1NUUkFURUdZIGFzIMm1bn0gZnJvbSAnLi9zcmMvZXhlY3V0aW9uL3N5bWJvbHMnO1xuZXhwb3J0IHtDb25maWdWYWxpZGF0b3IgYXMgybV2fSBmcm9tICcuL3NyYy9pbnRlcm5hbC9jb25maWctdmFsaWRhdG9yJztcbmV4cG9ydCB7SW50ZXJuYWxEaXNwYXRjaGVkQWN0aW9uUmVzdWx0cyBhcyDJtXAsSW50ZXJuYWxEaXNwYXRjaGVyIGFzIMm1cX0gZnJvbSAnLi9zcmMvaW50ZXJuYWwvZGlzcGF0Y2hlcic7XG5leHBvcnQge1N0YXRlQ2xhc3MgYXMgybVpfSBmcm9tICcuL3NyYy9pbnRlcm5hbC9pbnRlcm5hbHMnO1xuZXhwb3J0IHtMaWZlY3ljbGVTdGF0ZU1hbmFnZXIgYXMgybV3fSBmcm9tICcuL3NyYy9pbnRlcm5hbC9saWZlY3ljbGUtc3RhdGUtbWFuYWdlcic7XG5leHBvcnQge1N0YXRlQ29udGV4dEZhY3RvcnkgYXMgybVyfSBmcm9tICcuL3NyYy9pbnRlcm5hbC9zdGF0ZS1jb250ZXh0LWZhY3RvcnknO1xuZXhwb3J0IHtTdGF0ZUZhY3RvcnkgYXMgybVvfSBmcm9tICcuL3NyYy9pbnRlcm5hbC9zdGF0ZS1mYWN0b3J5JztcbmV4cG9ydCB7SW50ZXJuYWxTdGF0ZU9wZXJhdGlvbnMgYXMgybVzfSBmcm9tICcuL3NyYy9pbnRlcm5hbC9zdGF0ZS1vcGVyYXRpb25zJztcbmV4cG9ydCB7Tmd4c0ZlYXR1cmVNb2R1bGUgYXMgybViLE5neHNSb290TW9kdWxlIGFzIMm1YSxST09UX09QVElPTlMgYXMgybVlLGFwcEJvb3RzdHJhcExpc3RlbmVyRmFjdG9yeSBhcyDJtWQsbmd4c0NvbmZpZ0ZhY3RvcnkgYXMgybVjfSBmcm9tICcuL3NyYy9tb2R1bGUnO1xuZXhwb3J0IHtQbHVnaW5NYW5hZ2VyIGFzIMm1dH0gZnJvbSAnLi9zcmMvcGx1Z2luLW1hbmFnZXInO1xuZXhwb3J0IHtGRUFUVVJFX1NUQVRFX1RPS0VOIGFzIMm1ayxOZ3hzQ29uZmlnIGFzIMm1bSxST09UX1NUQVRFX1RPS0VOIGFzIMm1aixTRUxFQ1RPUl9NRVRBX0tFWSBhcyDJtWx9IGZyb20gJy4vc3JjL3N5bWJvbHMnOyJdfQ==