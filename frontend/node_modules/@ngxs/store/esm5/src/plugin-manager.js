/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Optional, SkipSelf, Inject } from '@angular/core';
import { NGXS_PLUGINS } from './symbols';
/**
 * Plugin manager class
 * @ignore
 */
var PluginManager = /** @class */ (function () {
    function PluginManager(_parentManager, _plugins) {
        this._parentManager = _parentManager;
        this._plugins = _plugins;
        this.plugins = [];
        this.register();
    }
    /**
     * @private
     * @return {?}
     */
    PluginManager.prototype.register = /**
     * @private
     * @return {?}
     */
    function () {
        var _a;
        if (!this._plugins) {
            return;
        }
        this.plugins = this._plugins.map((/**
         * @param {?} plugin
         * @return {?}
         */
        function (plugin) {
            if (plugin.handle) {
                return plugin.handle.bind(plugin);
            }
            else {
                return plugin;
            }
        }));
        if (this._parentManager) {
            (_a = this._parentManager.plugins).push.apply(_a, tslib_1.__spread(this.plugins));
        }
    };
    PluginManager.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PluginManager.ctorParameters = function () { return [
        { type: PluginManager, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: Array, decorators: [{ type: Inject, args: [NGXS_PLUGINS,] }, { type: Optional }] }
    ]; };
    return PluginManager;
}());
export { PluginManager };
if (false) {
    /** @type {?} */
    PluginManager.prototype.plugins;
    /**
     * @type {?}
     * @private
     */
    PluginManager.prototype._parentManager;
    /**
     * @type {?}
     * @private
     */
    PluginManager.prototype._plugins;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9wbHVnaW4tbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFnQixZQUFZLEVBQWMsTUFBTSxXQUFXLENBQUM7Ozs7O0FBTW5FO0lBSUUsdUJBR1UsY0FBNkIsRUFHN0IsUUFBc0I7UUFIdEIsbUJBQWMsR0FBZCxjQUFjLENBQWU7UUFHN0IsYUFBUSxHQUFSLFFBQVEsQ0FBYztRQVJoQyxZQUFPLEdBQW1CLEVBQUUsQ0FBQztRQVUzQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbEIsQ0FBQzs7Ozs7SUFFTyxnQ0FBUTs7OztJQUFoQjs7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRzs7OztRQUFDLFVBQUEsTUFBTTtZQUNyQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7Z0JBQ2pCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDbkM7aUJBQU07Z0JBQ0wsT0FBTyxNQUFNLENBQUM7YUFDZjtRQUNILENBQUMsRUFBQyxDQUFDO1FBRUgsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3ZCLENBQUEsS0FBQSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQSxDQUFDLElBQUksNEJBQUksSUFBSSxDQUFDLE9BQU8sR0FBRTtTQUNuRDtJQUNILENBQUM7O2dCQS9CRixVQUFVOzs7O2dCQU9pQixhQUFhLHVCQUZwQyxRQUFRLFlBQ1IsUUFBUTs0Q0FFUixNQUFNLFNBQUMsWUFBWSxjQUNuQixRQUFROztJQXVCYixvQkFBQztDQUFBLEFBaENELElBZ0NDO1NBL0JZLGFBQWE7OztJQUN4QixnQ0FBNkI7Ozs7O0lBRzNCLHVDQUVxQzs7Ozs7SUFDckMsaUNBRThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIFNraXBTZWxmLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmd4c1BsdWdpbkZuLCBOR1hTX1BMVUdJTlMsIE5neHNQbHVnaW4gfSBmcm9tICcuL3N5bWJvbHMnO1xyXG5cclxuLyoqXHJcbiAqIFBsdWdpbiBtYW5hZ2VyIGNsYXNzXHJcbiAqIEBpZ25vcmVcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFBsdWdpbk1hbmFnZXIge1xyXG4gIHBsdWdpbnM6IE5neHNQbHVnaW5GbltdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgQE9wdGlvbmFsKClcclxuICAgIEBTa2lwU2VsZigpXHJcbiAgICBwcml2YXRlIF9wYXJlbnRNYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyLFxyXG4gICAgQEluamVjdChOR1hTX1BMVUdJTlMpXHJcbiAgICBAT3B0aW9uYWwoKVxyXG4gICAgcHJpdmF0ZSBfcGx1Z2luczogTmd4c1BsdWdpbltdXHJcbiAgKSB7XHJcbiAgICB0aGlzLnJlZ2lzdGVyKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlZ2lzdGVyKCkge1xyXG4gICAgaWYgKCF0aGlzLl9wbHVnaW5zKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnBsdWdpbnMgPSB0aGlzLl9wbHVnaW5zLm1hcChwbHVnaW4gPT4ge1xyXG4gICAgICBpZiAocGx1Z2luLmhhbmRsZSkge1xyXG4gICAgICAgIHJldHVybiBwbHVnaW4uaGFuZGxlLmJpbmQocGx1Z2luKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gcGx1Z2luO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodGhpcy5fcGFyZW50TWFuYWdlcikge1xyXG4gICAgICB0aGlzLl9wYXJlbnRNYW5hZ2VyLnBsdWdpbnMucHVzaCguLi50aGlzLnBsdWdpbnMpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=