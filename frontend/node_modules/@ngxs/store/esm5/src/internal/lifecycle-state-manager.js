/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NgxsBootstrapper } from '@ngxs/store/internals';
import { filter, tap, mergeMap } from 'rxjs/operators';
import { StateContextFactory } from './state-context-factory';
import { InternalStateOperations } from './state-operations';
var LifecycleStateManager = /** @class */ (function () {
    function LifecycleStateManager(internalStateOperations, stateContextFactory, bootstrapper) {
        this.internalStateOperations = internalStateOperations;
        this.stateContextFactory = stateContextFactory;
        this.bootstrapper = bootstrapper;
    }
    /**
     * @template T
     * @param {?} action
     * @param {?} results
     * @return {?}
     */
    LifecycleStateManager.prototype.ngxsBootstrap = /**
     * @template T
     * @param {?} action
     * @param {?} results
     * @return {?}
     */
    function (action, results) {
        var _this = this;
        this.internalStateOperations
            .getRootStateOperations()
            .dispatch(action)
            .pipe(filter((/**
         * @return {?}
         */
        function () { return !!results; })), tap((/**
         * @return {?}
         */
        function () { return _this.invokeInit((/** @type {?} */ (results)).states); })), mergeMap((/**
         * @return {?}
         */
        function () { return _this.bootstrapper.appBootstrapped$; })), filter((/**
         * @param {?} appBootstrapped
         * @return {?}
         */
        function (appBootstrapped) { return !!appBootstrapped; })))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.invokeBootstrap((/** @type {?} */ (results)).states);
        }));
    };
    /**
     * Invoke the init function on the states.
     */
    /**
     * Invoke the init function on the states.
     * @param {?} stateMetadatas
     * @return {?}
     */
    LifecycleStateManager.prototype.invokeInit = /**
     * Invoke the init function on the states.
     * @param {?} stateMetadatas
     * @return {?}
     */
    function (stateMetadatas) {
        this.invokeLifecycleHooks(stateMetadatas, "ngxsOnInit" /* NgxsOnInit */);
    };
    /**
     * Invoke the bootstrap function on the states.
     */
    /**
     * Invoke the bootstrap function on the states.
     * @param {?} stateMetadatas
     * @return {?}
     */
    LifecycleStateManager.prototype.invokeBootstrap = /**
     * Invoke the bootstrap function on the states.
     * @param {?} stateMetadatas
     * @return {?}
     */
    function (stateMetadatas) {
        this.invokeLifecycleHooks(stateMetadatas, "ngxsAfterBootstrap" /* NgxsAfterBootstrap */);
    };
    /**
     * @private
     * @param {?} stateMetadatas
     * @param {?} hook
     * @return {?}
     */
    LifecycleStateManager.prototype.invokeLifecycleHooks = /**
     * @private
     * @param {?} stateMetadatas
     * @param {?} hook
     * @return {?}
     */
    function (stateMetadatas, hook) {
        var e_1, _a;
        try {
            for (var stateMetadatas_1 = tslib_1.__values(stateMetadatas), stateMetadatas_1_1 = stateMetadatas_1.next(); !stateMetadatas_1_1.done; stateMetadatas_1_1 = stateMetadatas_1.next()) {
                var metadata = stateMetadatas_1_1.value;
                /** @type {?} */
                var instance = metadata.instance;
                if (instance[hook]) {
                    /** @type {?} */
                    var stateContext = this.stateContextFactory.createStateContext(metadata);
                    (/** @type {?} */ (instance[hook]))(stateContext);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (stateMetadatas_1_1 && !stateMetadatas_1_1.done && (_a = stateMetadatas_1.return)) _a.call(stateMetadatas_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    LifecycleStateManager.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LifecycleStateManager.ctorParameters = function () { return [
        { type: InternalStateOperations },
        { type: StateContextFactory },
        { type: NgxsBootstrapper }
    ]; };
    return LifecycleStateManager;
}());
export { LifecycleStateManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.internalStateOperations;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.stateContextFactory;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.bootstrapper;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmZWN5Y2xlLXN0YXRlLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9pbnRlcm5hbC9saWZlY3ljbGUtc3RhdGUtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFekQsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJN0Q7SUFFRSwrQkFDVSx1QkFBZ0QsRUFDaEQsbUJBQXdDLEVBQ3hDLFlBQThCO1FBRjlCLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUFDaEQsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4QyxpQkFBWSxHQUFaLFlBQVksQ0FBa0I7SUFDckMsQ0FBQzs7Ozs7OztJQUVKLDZDQUFhOzs7Ozs7SUFBYixVQUFpQixNQUFTLEVBQUUsT0FBc0M7UUFBbEUsaUJBYUM7UUFaQyxJQUFJLENBQUMsdUJBQXVCO2FBQ3pCLHNCQUFzQixFQUFFO2FBQ3hCLFFBQVEsQ0FBQyxNQUFNLENBQUM7YUFDaEIsSUFBSSxDQUNILE1BQU07OztRQUFDLGNBQU0sT0FBQSxDQUFDLENBQUMsT0FBTyxFQUFULENBQVMsRUFBQyxFQUN2QixHQUFHOzs7UUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBQSxPQUFPLEVBQUMsQ0FBQyxNQUFNLENBQUMsRUFBaEMsQ0FBZ0MsRUFBQyxFQUMzQyxRQUFROzs7UUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBbEMsQ0FBa0MsRUFBQyxFQUNsRCxNQUFNOzs7O1FBQUMsVUFBQSxlQUFlLElBQUksT0FBQSxDQUFDLENBQUMsZUFBZSxFQUFqQixDQUFpQixFQUFDLENBQzdDO2FBQ0EsU0FBUzs7O1FBQUM7WUFDVCxLQUFJLENBQUMsZUFBZSxDQUFDLG1CQUFBLE9BQU8sRUFBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hDLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSCwwQ0FBVTs7Ozs7SUFBVixVQUFXLGNBQTZCO1FBQ3RDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxjQUFjLGdDQUE0QixDQUFDO0lBQ3ZFLENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0gsK0NBQWU7Ozs7O0lBQWYsVUFBZ0IsY0FBNkI7UUFDM0MsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGNBQWMsZ0RBQW9DLENBQUM7SUFDL0UsQ0FBQzs7Ozs7OztJQUVPLG9EQUFvQjs7Ozs7O0lBQTVCLFVBQTZCLGNBQTZCLEVBQUUsSUFBb0I7OztZQUM5RSxLQUF1QixJQUFBLG1CQUFBLGlCQUFBLGNBQWMsQ0FBQSw4Q0FBQSwwRUFBRTtnQkFBbEMsSUFBTSxRQUFRLDJCQUFBOztvQkFDWCxRQUFRLEdBQWtCLFFBQVEsQ0FBQyxRQUFRO2dCQUVqRCxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTs7d0JBQ1osWUFBWSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUM7b0JBQzFFLG1CQUFBLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO2lCQUMvQjthQUNGOzs7Ozs7Ozs7SUFDSCxDQUFDOztnQkE5Q0YsVUFBVTs7OztnQkFKRix1QkFBdUI7Z0JBRHZCLG1CQUFtQjtnQkFKbkIsZ0JBQWdCOztJQXdEekIsNEJBQUM7Q0FBQSxBQS9DRCxJQStDQztTQTlDWSxxQkFBcUI7Ozs7OztJQUU5Qix3REFBd0Q7Ozs7O0lBQ3hELG9EQUFnRDs7Ozs7SUFDaEQsNkNBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ3hzQm9vdHN0cmFwcGVyIH0gZnJvbSAnQG5neHMvc3RvcmUvaW50ZXJuYWxzJztcclxuXHJcbmltcG9ydCB7IGZpbHRlciwgdGFwLCBtZXJnZU1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IFN0YXRlQ29udGV4dEZhY3RvcnkgfSBmcm9tICcuL3N0YXRlLWNvbnRleHQtZmFjdG9yeSc7XHJcbmltcG9ydCB7IEludGVybmFsU3RhdGVPcGVyYXRpb25zIH0gZnJvbSAnLi9zdGF0ZS1vcGVyYXRpb25zJztcclxuaW1wb3J0IHsgTWFwcGVkU3RvcmUsIFN0YXRlc0FuZERlZmF1bHRzIH0gZnJvbSAnLi9pbnRlcm5hbHMnO1xyXG5pbXBvcnQgeyBMaWZlY3ljbGVIb29rcywgTmd4c0xpZmVDeWNsZSB9IGZyb20gJy4uL3N5bWJvbHMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTGlmZWN5Y2xlU3RhdGVNYW5hZ2VyIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaW50ZXJuYWxTdGF0ZU9wZXJhdGlvbnM6IEludGVybmFsU3RhdGVPcGVyYXRpb25zLFxyXG4gICAgcHJpdmF0ZSBzdGF0ZUNvbnRleHRGYWN0b3J5OiBTdGF0ZUNvbnRleHRGYWN0b3J5LFxyXG4gICAgcHJpdmF0ZSBib290c3RyYXBwZXI6IE5neHNCb290c3RyYXBwZXJcclxuICApIHt9XHJcblxyXG4gIG5neHNCb290c3RyYXA8VD4oYWN0aW9uOiBULCByZXN1bHRzOiBTdGF0ZXNBbmREZWZhdWx0cyB8IHVuZGVmaW5lZCk6IHZvaWQge1xyXG4gICAgdGhpcy5pbnRlcm5hbFN0YXRlT3BlcmF0aW9uc1xyXG4gICAgICAuZ2V0Um9vdFN0YXRlT3BlcmF0aW9ucygpXHJcbiAgICAgIC5kaXNwYXRjaChhY3Rpb24pXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIGZpbHRlcigoKSA9PiAhIXJlc3VsdHMpLFxyXG4gICAgICAgIHRhcCgoKSA9PiB0aGlzLmludm9rZUluaXQocmVzdWx0cyEuc3RhdGVzKSksXHJcbiAgICAgICAgbWVyZ2VNYXAoKCkgPT4gdGhpcy5ib290c3RyYXBwZXIuYXBwQm9vdHN0cmFwcGVkJCksXHJcbiAgICAgICAgZmlsdGVyKGFwcEJvb3RzdHJhcHBlZCA9PiAhIWFwcEJvb3RzdHJhcHBlZClcclxuICAgICAgKVxyXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICB0aGlzLmludm9rZUJvb3RzdHJhcChyZXN1bHRzIS5zdGF0ZXMpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEludm9rZSB0aGUgaW5pdCBmdW5jdGlvbiBvbiB0aGUgc3RhdGVzLlxyXG4gICAqL1xyXG4gIGludm9rZUluaXQoc3RhdGVNZXRhZGF0YXM6IE1hcHBlZFN0b3JlW10pOiB2b2lkIHtcclxuICAgIHRoaXMuaW52b2tlTGlmZWN5Y2xlSG9va3Moc3RhdGVNZXRhZGF0YXMsIExpZmVjeWNsZUhvb2tzLk5neHNPbkluaXQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW52b2tlIHRoZSBib290c3RyYXAgZnVuY3Rpb24gb24gdGhlIHN0YXRlcy5cclxuICAgKi9cclxuICBpbnZva2VCb290c3RyYXAoc3RhdGVNZXRhZGF0YXM6IE1hcHBlZFN0b3JlW10pIHtcclxuICAgIHRoaXMuaW52b2tlTGlmZWN5Y2xlSG9va3Moc3RhdGVNZXRhZGF0YXMsIExpZmVjeWNsZUhvb2tzLk5neHNBZnRlckJvb3RzdHJhcCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGludm9rZUxpZmVjeWNsZUhvb2tzKHN0YXRlTWV0YWRhdGFzOiBNYXBwZWRTdG9yZVtdLCBob29rOiBMaWZlY3ljbGVIb29rcyk6IHZvaWQge1xyXG4gICAgZm9yIChjb25zdCBtZXRhZGF0YSBvZiBzdGF0ZU1ldGFkYXRhcykge1xyXG4gICAgICBjb25zdCBpbnN0YW5jZTogTmd4c0xpZmVDeWNsZSA9IG1ldGFkYXRhLmluc3RhbmNlO1xyXG5cclxuICAgICAgaWYgKGluc3RhbmNlW2hvb2tdKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGVDb250ZXh0ID0gdGhpcy5zdGF0ZUNvbnRleHRGYWN0b3J5LmNyZWF0ZVN0YXRlQ29udGV4dChtZXRhZGF0YSk7XHJcbiAgICAgICAgaW5zdGFuY2VbaG9va10hKHN0YXRlQ29udGV4dCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19