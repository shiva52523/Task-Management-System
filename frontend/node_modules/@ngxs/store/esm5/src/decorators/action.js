/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ensureStoreMetadata } from '../internal/internals';
/**
 * Decorates a method with a action information.
 * @param {?} actions
 * @param {?=} options
 * @return {?}
 */
export function Action(actions, options) {
    return (/**
     * @param {?} target
     * @param {?} name
     * @param {?} _descriptor
     * @return {?}
     */
    function (target, name, _descriptor) {
        var e_1, _a;
        /** @type {?} */
        var meta = ensureStoreMetadata(target.constructor);
        if (!Array.isArray(actions)) {
            actions = [actions];
        }
        try {
            for (var actions_1 = tslib_1.__values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {
                var action = actions_1_1.value;
                /** @type {?} */
                var type = action.type;
                if (!meta.actions[type]) {
                    meta.actions[type] = [];
                }
                meta.actions[type].push({
                    fn: name,
                    options: options || {},
                    type: type
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvZGVjb3JhdG9ycy9hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7OztBQU01RCxNQUFNLFVBQVUsTUFBTSxDQUNwQixPQUF3RSxFQUN4RSxPQUF1QjtJQUV2Qjs7Ozs7O0lBQU8sVUFBUyxNQUFXLEVBQUUsSUFBWSxFQUFFLFdBQXlDOzs7WUFDNUUsSUFBSSxHQUFHLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFFcEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0IsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDckI7O1lBRUQsS0FBcUIsSUFBQSxZQUFBLGlCQUFBLE9BQU8sQ0FBQSxnQ0FBQSxxREFBRTtnQkFBekIsSUFBTSxNQUFNLG9CQUFBOztvQkFDVCxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUk7Z0JBRXhCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztpQkFDekI7Z0JBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQ3RCLEVBQUUsRUFBRSxJQUFJO29CQUNSLE9BQU8sRUFBRSxPQUFPLElBQUksRUFBRTtvQkFDdEIsSUFBSSxNQUFBO2lCQUNMLENBQUMsQ0FBQzthQUNKOzs7Ozs7Ozs7SUFDSCxDQUFDLEVBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW5zdXJlU3RvcmVNZXRhZGF0YSB9IGZyb20gJy4uL2ludGVybmFsL2ludGVybmFscyc7XHJcbmltcG9ydCB7IEFjdGlvbk9wdGlvbnMsIEFjdGlvbkRlZiB9IGZyb20gJy4uL3N5bWJvbHMnO1xyXG5cclxuLyoqXHJcbiAqIERlY29yYXRlcyBhIG1ldGhvZCB3aXRoIGEgYWN0aW9uIGluZm9ybWF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEFjdGlvbihcclxuICBhY3Rpb25zOiBBY3Rpb25EZWYgfCBBY3Rpb25EZWZbXSB8IHsgdHlwZTogc3RyaW5nIH0gfCB7IHR5cGU6IHN0cmluZyB9W10sXHJcbiAgb3B0aW9ucz86IEFjdGlvbk9wdGlvbnNcclxuKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldDogYW55LCBuYW1lOiBzdHJpbmcsIF9kZXNjcmlwdG9yOiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxhbnk+KSB7XHJcbiAgICBjb25zdCBtZXRhID0gZW5zdXJlU3RvcmVNZXRhZGF0YSh0YXJnZXQuY29uc3RydWN0b3IpO1xyXG5cclxuICAgIGlmICghQXJyYXkuaXNBcnJheShhY3Rpb25zKSkge1xyXG4gICAgICBhY3Rpb25zID0gW2FjdGlvbnNdO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIGFjdGlvbnMpIHtcclxuICAgICAgY29uc3QgdHlwZSA9IGFjdGlvbi50eXBlO1xyXG5cclxuICAgICAgaWYgKCFtZXRhLmFjdGlvbnNbdHlwZV0pIHtcclxuICAgICAgICBtZXRhLmFjdGlvbnNbdHlwZV0gPSBbXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbWV0YS5hY3Rpb25zW3R5cGVdLnB1c2goe1xyXG4gICAgICAgIGZuOiBuYW1lLFxyXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMgfHwge30sXHJcbiAgICAgICAgdHlwZVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcbiJdfQ==