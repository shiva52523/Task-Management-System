/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Store } from '../store';
import { propGetter, removeDollarAtTheEnd } from '../internal/internals';
import { META_KEY, NgxsConfig } from '../symbols';
/**
 * Allows the select decorator to get access to the DI store.
 * @ignore
 */
var SelectFactory = /** @class */ (function () {
    function SelectFactory(store, config) {
        SelectFactory.store = store;
        SelectFactory.config = config;
    }
    SelectFactory.store = undefined;
    SelectFactory.config = undefined;
    SelectFactory.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SelectFactory.ctorParameters = function () { return [
        { type: Store },
        { type: NgxsConfig }
    ]; };
    return SelectFactory;
}());
export { SelectFactory };
if (false) {
    /** @type {?} */
    SelectFactory.store;
    /** @type {?} */
    SelectFactory.config;
}
/**
 * Decorator for selecting a slice of state from the store.
 * @param {?=} selectorOrFeature
 * @param {...?} paths
 * @return {?}
 */
export function Select(selectorOrFeature) {
    var paths = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        paths[_i - 1] = arguments[_i];
    }
    return (/**
     * @param {?} target
     * @param {?} name
     * @return {?}
     */
    function (target, name) {
        /** @type {?} */
        var selectorFnName = '__' + name + '__selector';
        if (!selectorOrFeature) {
            selectorOrFeature = removeDollarAtTheEnd(name);
        }
        /** @type {?} */
        var createSelect = (/**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            /** @type {?} */
            var store = SelectFactory.store;
            if (!store) {
                throw new Error('SelectFactory not connected to store!');
            }
            return store.select(fn);
        });
        /** @type {?} */
        var createSelector = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var config = SelectFactory.config;
            if (typeof selectorOrFeature === 'string') {
                /** @type {?} */
                var propsArray = paths.length
                    ? tslib_1.__spread([selectorOrFeature], paths) : selectorOrFeature.split('.');
                return propGetter(propsArray, (/** @type {?} */ (config)));
            }
            else if (selectorOrFeature[META_KEY] && selectorOrFeature[META_KEY].path) {
                return propGetter(selectorOrFeature[META_KEY].path.split('.'), (/** @type {?} */ (config)));
            }
            else {
                return selectorOrFeature;
            }
        });
        if (target[selectorFnName]) {
            throw new Error('You cannot use @Select decorator and a ' + selectorFnName + ' property.');
        }
        if (delete target[name]) {
            Object.defineProperty(target, selectorFnName, {
                writable: true,
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(target, name, {
                get: (/**
                 * @return {?}
                 */
                function () {
                    return (this[selectorFnName] ||
                        (this[selectorFnName] = createSelect.apply(this, [createSelector()])));
                }),
                enumerable: true,
                configurable: true
            });
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvZGVjb3JhdG9ycy9zZWxlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDakMsT0FBTyxFQUFFLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFDOzs7OztBQU1sRDtJQUlFLHVCQUFZLEtBQVksRUFBRSxNQUFrQjtRQUMxQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUM1QixhQUFhLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUNoQyxDQUFDO0lBTE0sbUJBQUssR0FBc0IsU0FBUyxDQUFDO0lBQ3JDLG9CQUFNLEdBQTJCLFNBQVMsQ0FBQzs7Z0JBSG5ELFVBQVU7Ozs7Z0JBUkYsS0FBSztnQkFFSyxVQUFVOztJQWM3QixvQkFBQztDQUFBLEFBUkQsSUFRQztTQVBZLGFBQWE7OztJQUN4QixvQkFBNEM7O0lBQzVDLHFCQUFrRDs7Ozs7Ozs7QUFVcEQsTUFBTSxVQUFVLE1BQU0sQ0FBQyxpQkFBdUI7SUFBRSxlQUFrQjtTQUFsQixVQUFrQixFQUFsQixxQkFBa0IsRUFBbEIsSUFBa0I7UUFBbEIsOEJBQWtCOztJQUNoRTs7Ozs7SUFBTyxVQUFTLE1BQVcsRUFBRSxJQUFZOztZQUNqQyxjQUFjLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxZQUFZO1FBRWpELElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUN0QixpQkFBaUIsR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoRDs7WUFFSyxZQUFZOzs7O1FBQUcsVUFBQyxFQUFPOztnQkFDckIsS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLO1lBRWpDLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO2FBQzFEO1lBRUQsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FBQTs7WUFFSyxjQUFjOzs7UUFBRzs7Z0JBQ2YsTUFBTSxHQUFHLGFBQWEsQ0FBQyxNQUFNO1lBQ25DLElBQUksT0FBTyxpQkFBaUIsS0FBSyxRQUFRLEVBQUU7O29CQUNuQyxVQUFVLEdBQUcsS0FBSyxDQUFDLE1BQU07b0JBQzdCLENBQUMsbUJBQUUsaUJBQWlCLEdBQUssS0FBSyxFQUM5QixDQUFDLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztnQkFFaEMsT0FBTyxVQUFVLENBQUMsVUFBVSxFQUFFLG1CQUFBLE1BQU0sRUFBQyxDQUFDLENBQUM7YUFDeEM7aUJBQU0sSUFBSSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUU7Z0JBQzFFLE9BQU8sVUFBVSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsbUJBQUEsTUFBTSxFQUFDLENBQUMsQ0FBQzthQUN6RTtpQkFBTTtnQkFDTCxPQUFPLGlCQUFpQixDQUFDO2FBQzFCO1FBQ0gsQ0FBQyxDQUFBO1FBRUQsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FDYix5Q0FBeUMsR0FBRyxjQUFjLEdBQUcsWUFBWSxDQUMxRSxDQUFDO1NBQ0g7UUFFRCxJQUFJLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRTtnQkFDNUMsUUFBUSxFQUFFLElBQUk7Z0JBQ2QsVUFBVSxFQUFFLEtBQUs7Z0JBQ2pCLFlBQVksRUFBRSxJQUFJO2FBQ25CLENBQUMsQ0FBQztZQUVILE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFDbEMsR0FBRzs7O2dCQUFFO29CQUNILE9BQU8sQ0FDTCxJQUFJLENBQUMsY0FBYyxDQUFDO3dCQUNwQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUN0RSxDQUFDO2dCQUNKLENBQUMsQ0FBQTtnQkFDRCxVQUFVLEVBQUUsSUFBSTtnQkFDaEIsWUFBWSxFQUFFLElBQUk7YUFDbkIsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDLEVBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICcuLi9zdG9yZSc7XHJcbmltcG9ydCB7IHByb3BHZXR0ZXIsIHJlbW92ZURvbGxhckF0VGhlRW5kIH0gZnJvbSAnLi4vaW50ZXJuYWwvaW50ZXJuYWxzJztcclxuaW1wb3J0IHsgTUVUQV9LRVksIE5neHNDb25maWcgfSBmcm9tICcuLi9zeW1ib2xzJztcclxuXHJcbi8qKlxyXG4gKiBBbGxvd3MgdGhlIHNlbGVjdCBkZWNvcmF0b3IgdG8gZ2V0IGFjY2VzcyB0byB0aGUgREkgc3RvcmUuXHJcbiAqIEBpZ25vcmVcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFNlbGVjdEZhY3Rvcnkge1xyXG4gIHN0YXRpYyBzdG9yZTogU3RvcmUgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcbiAgc3RhdGljIGNvbmZpZzogTmd4c0NvbmZpZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuICBjb25zdHJ1Y3RvcihzdG9yZTogU3RvcmUsIGNvbmZpZzogTmd4c0NvbmZpZykge1xyXG4gICAgU2VsZWN0RmFjdG9yeS5zdG9yZSA9IHN0b3JlO1xyXG4gICAgU2VsZWN0RmFjdG9yeS5jb25maWcgPSBjb25maWc7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogRGVjb3JhdG9yIGZvciBzZWxlY3RpbmcgYSBzbGljZSBvZiBzdGF0ZSBmcm9tIHRoZSBzdG9yZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Qoc2VsZWN0b3JPckZlYXR1cmU/OiBhbnksIC4uLnBhdGhzOiBzdHJpbmdbXSkge1xyXG4gIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IGFueSwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzZWxlY3RvckZuTmFtZSA9ICdfXycgKyBuYW1lICsgJ19fc2VsZWN0b3InO1xyXG5cclxuICAgIGlmICghc2VsZWN0b3JPckZlYXR1cmUpIHtcclxuICAgICAgc2VsZWN0b3JPckZlYXR1cmUgPSByZW1vdmVEb2xsYXJBdFRoZUVuZChuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjcmVhdGVTZWxlY3QgPSAoZm46IGFueSkgPT4ge1xyXG4gICAgICBjb25zdCBzdG9yZSA9IFNlbGVjdEZhY3Rvcnkuc3RvcmU7XHJcblxyXG4gICAgICBpZiAoIXN0b3JlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWxlY3RGYWN0b3J5IG5vdCBjb25uZWN0ZWQgdG8gc3RvcmUhJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBzdG9yZS5zZWxlY3QoZm4pO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBjcmVhdGVTZWxlY3RvciA9ICgpID0+IHtcclxuICAgICAgY29uc3QgY29uZmlnID0gU2VsZWN0RmFjdG9yeS5jb25maWc7XHJcbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3JPckZlYXR1cmUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgY29uc3QgcHJvcHNBcnJheSA9IHBhdGhzLmxlbmd0aFxyXG4gICAgICAgICAgPyBbc2VsZWN0b3JPckZlYXR1cmUsIC4uLnBhdGhzXVxyXG4gICAgICAgICAgOiBzZWxlY3Rvck9yRmVhdHVyZS5zcGxpdCgnLicpO1xyXG5cclxuICAgICAgICByZXR1cm4gcHJvcEdldHRlcihwcm9wc0FycmF5LCBjb25maWchKTtcclxuICAgICAgfSBlbHNlIGlmIChzZWxlY3Rvck9yRmVhdHVyZVtNRVRBX0tFWV0gJiYgc2VsZWN0b3JPckZlYXR1cmVbTUVUQV9LRVldLnBhdGgpIHtcclxuICAgICAgICByZXR1cm4gcHJvcEdldHRlcihzZWxlY3Rvck9yRmVhdHVyZVtNRVRBX0tFWV0ucGF0aC5zcGxpdCgnLicpLCBjb25maWchKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gc2VsZWN0b3JPckZlYXR1cmU7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHRhcmdldFtzZWxlY3RvckZuTmFtZV0pIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICdZb3UgY2Fubm90IHVzZSBAU2VsZWN0IGRlY29yYXRvciBhbmQgYSAnICsgc2VsZWN0b3JGbk5hbWUgKyAnIHByb3BlcnR5LidcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGVsZXRlIHRhcmdldFtuYW1lXSkge1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBzZWxlY3RvckZuTmFtZSwge1xyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgdGhpc1tzZWxlY3RvckZuTmFtZV0gfHxcclxuICAgICAgICAgICAgKHRoaXNbc2VsZWN0b3JGbk5hbWVdID0gY3JlYXRlU2VsZWN0LmFwcGx5KHRoaXMsIFtjcmVhdGVTZWxlY3RvcigpXSkpXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG4iXX0=