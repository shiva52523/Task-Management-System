/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { map, filter } from 'rxjs/operators';
import { getActionTypeFromInstance } from '../utils/utils';
/**
 * @record
 * @template T, E
 */
export function ActionCompletion() { }
if (false) {
    /** @type {?} */
    ActionCompletion.prototype.action;
    /** @type {?} */
    ActionCompletion.prototype.result;
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will grab actions that have just been dispatched as well as actions that have completed
 * @param {...?} allowedTypes
 * @return {?}
 */
export function ofAction() {
    var allowedTypes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        allowedTypes[_i] = arguments[_i];
    }
    return ofActionOperator(allowedTypes);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been dispatched
 * @param {...?} allowedTypes
 * @return {?}
 */
export function ofActionDispatched() {
    var allowedTypes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        allowedTypes[_i] = arguments[_i];
    }
    return ofActionOperator(allowedTypes, ["DISPATCHED" /* Dispatched */]);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been successfully completed
 * @param {...?} allowedTypes
 * @return {?}
 */
export function ofActionSuccessful() {
    var allowedTypes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        allowedTypes[_i] = arguments[_i];
    }
    return ofActionOperator(allowedTypes, ["SUCCESSFUL" /* Successful */]);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been canceled
 * @param {...?} allowedTypes
 * @return {?}
 */
export function ofActionCanceled() {
    var allowedTypes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        allowedTypes[_i] = arguments[_i];
    }
    return ofActionOperator(allowedTypes, ["CANCELED" /* Canceled */]);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been completed
 * @param {...?} allowedTypes
 * @return {?}
 */
export function ofActionCompleted() {
    var allowedTypes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        allowedTypes[_i] = arguments[_i];
    }
    /** @type {?} */
    var allowedStatuses = [
        "SUCCESSFUL" /* Successful */,
        "CANCELED" /* Canceled */,
        "ERRORED" /* Errored */
    ];
    return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just thrown an error
 * @param {...?} allowedTypes
 * @return {?}
 */
export function ofActionErrored() {
    var allowedTypes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        allowedTypes[_i] = arguments[_i];
    }
    return ofActionOperator(allowedTypes, ["ERRORED" /* Errored */]);
}
/**
 * @template T
 * @param {?} allowedTypes
 * @param {?=} statuses
 * @param {?=} mapOperator
 * @return {?}
 */
function ofActionOperator(allowedTypes, statuses, mapOperator) {
    if (mapOperator === void 0) { mapOperator = mapAction; }
    /** @type {?} */
    var allowedMap = createAllowedActionTypesMap(allowedTypes);
    /** @type {?} */
    var allowedStatusMap = statuses && createAllowedStatusesMap(statuses);
    return (/**
     * @param {?} o
     * @return {?}
     */
    function (o) {
        return o.pipe(filterStatus(allowedMap, allowedStatusMap), mapOperator());
    });
}
/**
 * @param {?} allowedTypes
 * @param {?=} allowedStatuses
 * @return {?}
 */
function filterStatus(allowedTypes, allowedStatuses) {
    return filter((/**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        /** @type {?} */
        var actionType = (/** @type {?} */ (getActionTypeFromInstance(ctx.action)));
        /** @type {?} */
        var typeMatch = allowedTypes[actionType];
        /** @type {?} */
        var statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;
        return typeMatch && statusMatch;
    }));
}
/**
 * @return {?}
 */
function mapActionResult() {
    return map((/**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var action = _a.action, status = _a.status, error = _a.error;
        return (/** @type {?} */ ({
            action: action,
            result: {
                successful: "SUCCESSFUL" /* Successful */ === status,
                canceled: "CANCELED" /* Canceled */ === status,
                error: error
            }
        }));
    }));
}
/**
 * @template T
 * @return {?}
 */
function mapAction() {
    return map((/**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) { return (/** @type {?} */ (ctx.action)); }));
}
/**
 * @param {?} types
 * @return {?}
 */
function createAllowedActionTypesMap(types) {
    return types.reduce((/**
     * @param {?} filterMap
     * @param {?} klass
     * @return {?}
     */
    function (filterMap, klass) {
        filterMap[(/** @type {?} */ (getActionTypeFromInstance(klass)))] = true;
        return filterMap;
    }), (/** @type {?} */ ({})));
}
/**
 * @param {?} statuses
 * @return {?}
 */
function createAllowedStatusesMap(statuses) {
    return statuses.reduce((/**
     * @param {?} filterMap
     * @param {?} status
     * @return {?}
     */
    function (filterMap, status) {
        filterMap[status] = true;
        return filterMap;
    }), (/** @type {?} */ ({})));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2YtYWN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvb3BlcmF0b3JzL29mLWFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7QUFHM0Qsc0NBT0M7OztJQU5DLGtDQUFVOztJQUNWLGtDQUlFOzs7Ozs7Ozs7QUFXSixNQUFNLFVBQVUsUUFBUTtJQUFDLHNCQUFzQjtTQUF0QixVQUFzQixFQUF0QixxQkFBc0IsRUFBdEIsSUFBc0I7UUFBdEIsaUNBQXNCOztJQUM3QyxPQUFPLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3hDLENBQUM7Ozs7Ozs7O0FBT0QsTUFBTSxVQUFVLGtCQUFrQjtJQUFDLHNCQUFzQjtTQUF0QixVQUFzQixFQUF0QixxQkFBc0IsRUFBdEIsSUFBc0I7UUFBdEIsaUNBQXNCOztJQUN2RCxPQUFPLGdCQUFnQixDQUFDLFlBQVksRUFBRSwrQkFBeUIsQ0FBQyxDQUFDO0FBQ25FLENBQUM7Ozs7Ozs7O0FBT0QsTUFBTSxVQUFVLGtCQUFrQjtJQUFDLHNCQUFzQjtTQUF0QixVQUFzQixFQUF0QixxQkFBc0IsRUFBdEIsSUFBc0I7UUFBdEIsaUNBQXNCOztJQUN2RCxPQUFPLGdCQUFnQixDQUFDLFlBQVksRUFBRSwrQkFBeUIsQ0FBQyxDQUFDO0FBQ25FLENBQUM7Ozs7Ozs7O0FBT0QsTUFBTSxVQUFVLGdCQUFnQjtJQUFDLHNCQUFzQjtTQUF0QixVQUFzQixFQUF0QixxQkFBc0IsRUFBdEIsSUFBc0I7UUFBdEIsaUNBQXNCOztJQUNyRCxPQUFPLGdCQUFnQixDQUFDLFlBQVksRUFBRSwyQkFBdUIsQ0FBQyxDQUFDO0FBQ2pFLENBQUM7Ozs7Ozs7O0FBT0QsTUFBTSxVQUFVLGlCQUFp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c2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IGdldEFjdGlvblR5cGVGcm9tSW5zdGFuY2UgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IEFjdGlvbkNvbnRleHQsIEFjdGlvblN0YXR1cyB9IGZyb20gJy4uL2FjdGlvbnMtc3RyZWFtJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uQ29tcGxldGlvbjxUID0gYW55LCBFID0gRXJyb3I+IHtcclxuICBhY3Rpb246IFQ7XHJcbiAgcmVzdWx0OiB7XHJcbiAgICBzdWNjZXNzZnVsOiBib29sZWFuO1xyXG4gICAgY2FuY2VsZWQ6IGJvb2xlYW47XHJcbiAgICBlcnJvcj86IEU7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9mQWN0aW9uPFQ+KGFsbG93ZWRUeXBlOiBhbnkpOiBPcGVyYXRvckZ1bmN0aW9uPEFjdGlvbkNvbnRleHQsIFQ+O1xyXG5leHBvcnQgZnVuY3Rpb24gb2ZBY3Rpb248VD4oLi4uYWxsb3dlZFR5cGVzOiBhbnlbXSk6IE9wZXJhdG9yRnVuY3Rpb248QWN0aW9uQ29udGV4dCwgVD47XHJcblxyXG4vKipcclxuICogUnhKUyBvcGVyYXRvciBmb3Igc2VsZWN0aW5nIG91dCBzcGVjaWZpYyBhY3Rpb25zLlxyXG4gKlxyXG4gKiBUaGlzIHdpbGwgZ3JhYiBhY3Rpb25zIHRoYXQgaGF2ZSBqdXN0IGJlZW4gZGlzcGF0Y2hlZCBhcyB3ZWxsIGFzIGFjdGlvbnMgdGhhdCBoYXZlIGNvbXBsZXRlZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG9mQWN0aW9uKC4uLmFsbG93ZWRUeXBlczogYW55W10pIHtcclxuICByZXR1cm4gb2ZBY3Rpb25PcGVyYXRvcihhbGxvd2VkVHlwZXMpO1xyXG59XHJcblxyXG4vKipcclxuICogUnhKUyBvcGVyYXRvciBmb3Igc2VsZWN0aW5nIG91dCBzcGVjaWZpYyBhY3Rpb25zLlxyXG4gKlxyXG4gKiBUaGlzIHdpbGwgT05MWSBncmFiIGFjdGlvbnMgdGhhdCBoYXZlIGp1c3QgYmVlbiBkaXNwYXRjaGVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gb2ZBY3Rpb25EaXNwYXRjaGVkKC4uLmFsbG93ZWRUeXBlczogYW55W10pIHtcclxuICByZXR1cm4gb2ZBY3Rpb25PcGVyYXRvcihhbGxvd2VkVHlwZXMsIFtBY3Rpb25TdGF0dXMuRGlzcGF0Y2hlZF0pO1xyXG59XHJcblxyXG4vKipcclxuICogUnhKUyBvcGVyYXRvciBmb3Igc2VsZWN0aW5nIG91dCBzcGVjaWZpYyBhY3Rpb25zLlxyXG4gKlxyXG4gKiBUaGlzIHdpbGwgT05MWSBncmFiIGFjdGlvbnMgdGhhdCBoYXZlIGp1c3QgYmVlbiBzdWNjZXNzZnVsbHkgY29tcGxldGVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gb2ZBY3Rpb25TdWNjZXNzZnVsKC4uLmFsbG93ZWRUeXBlczogYW55W10pIHtcclxuICByZXR1cm4gb2ZBY3Rpb25PcGVyYXRvcihhbGxvd2VkVHlwZXMsIFtBY3Rpb25TdGF0dXMuU3VjY2Vzc2Z1bF0pO1xyXG59XHJcblxyXG4vKipcclxuICogUnhKUyBvcGVyYXRvciBmb3Igc2VsZWN0aW5nIG91dCBzcGVjaWZpYyBhY3Rpb25zLlxyXG4gKlxyXG4gKiBUaGlzIHdpbGwgT05MWSBncmFiIGFjdGlvbnMgdGhhdCBoYXZlIGp1c3QgYmVlbiBjYW5jZWxlZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG9mQWN0aW9uQ2FuY2VsZWQoLi4uYWxsb3dlZFR5cGVzOiBhbnlbXSkge1xyXG4gIHJldHVybiBvZkFjdGlvbk9wZXJhdG9yKGFsbG93ZWRUeXBlcywgW0FjdGlvblN0YXR1cy5DYW5jZWxlZF0pO1xyXG59XHJcblxyXG4vKipcclxuICogUnhKUyBvcGVyYXRvciBmb3Igc2VsZWN0aW5nIG91dCBzcGVjaWZpYyBhY3Rpb25zLlxyXG4gKlxyXG4gKiBUaGlzIHdpbGwgT05MWSBncmFiIGFjdGlvbnMgdGhhdCBoYXZlIGp1c3QgYmVlbiBjb21wbGV0ZWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBvZkFjdGlvbkNvbXBsZXRlZCguLi5hbGxvd2VkVHlwZXM6IGFueVtdKSB7XHJcbiAgY29uc3QgYWxsb3dlZFN0YXR1c2VzID0gW1xyXG4gICAgQWN0aW9uU3RhdHVzLlN1Y2Nlc3NmdWwsXHJcbiAgICBBY3Rpb25TdGF0dXMuQ2FuY2VsZWQsXHJcbiAgICBBY3Rpb25TdGF0dXMuRXJyb3JlZFxyXG4gIF07XHJcbiAgcmV0dXJuIG9mQWN0aW9uT3BlcmF0b3IoYWxsb3dlZFR5cGVzLCBhbGxvd2VkU3RhdHVzZXMsIG1hcEFjdGlvblJlc3VsdCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSeEpTIG9wZXJhdG9yIGZvciBzZWxlY3Rpbmcgb3V0IHNwZWNpZmljIGFjdGlvbnMuXHJcbiAqXHJcbiAqIFRoaXMgd2lsbCBPTkxZIGdyYWIgYWN0aW9ucyB0aGF0IGhhdmUganVzdCB0aHJvd24gYW4gZXJyb3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBvZkFjdGlvbkVycm9yZWQoLi4uYWxsb3dlZFR5cGVzOiBhbnlbXSkge1xyXG4gIHJldHVybiBvZkFjdGlvbk9wZXJhdG9yKGFsbG93ZWRUeXBlcywgW0FjdGlvblN0YXR1cy5FcnJvcmVkXSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9mQWN0aW9uT3BlcmF0b3I8VCA9IGFueT4oXHJcbiAgYWxsb3dlZFR5cGVzOiBhbnlbXSxcclxuICBzdGF0dXNlcz86IEFjdGlvblN0YXR1c1tdLFxyXG4gIG1hcE9wZXJhdG9yOiAoKSA9PiBPcGVyYXRvckZ1bmN0aW9uPEFjdGlvbkNvbnRleHQsIFQ+ID0gbWFwQWN0aW9uXHJcbikge1xyXG4gIGNvbnN0IGFsbG93ZWRNYXAgPSBjcmVhdGVBbGxvd2VkQWN0aW9uVHlwZXNNYXAoYWxsb3dlZFR5cGVzKTtcclxuICBjb25zdCBhbGxvd2VkU3RhdHVzTWFwID0gc3RhdHVzZXMgJiYgY3JlYXRlQWxsb3dlZFN0YXR1c2VzTWFwKHN0YXR1c2VzKTtcclxuICByZXR1cm4gZnVuY3Rpb24obzogT2JzZXJ2YWJsZTxBY3Rpb25Db250ZXh0Pikge1xyXG4gICAgcmV0dXJuIG8ucGlwZShcclxuICAgICAgZmlsdGVyU3RhdHVzKGFsbG93ZWRNYXAsIGFsbG93ZWRTdGF0dXNNYXApLFxyXG4gICAgICBtYXBPcGVyYXRvcigpXHJcbiAgICApO1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbHRlclN0YXR1cyhhbGxvd2VkVHlwZXM6IEZpbHRlck1hcCwgYWxsb3dlZFN0YXR1c2VzPzogRmlsdGVyTWFwKSB7XHJcbiAgcmV0dXJuIGZpbHRlcigoY3R4OiBBY3Rpb25Db250ZXh0KSA9PiB7XHJcbiAgICBjb25zdCBhY3Rpb25UeXBlID0gZ2V0QWN0aW9uVHlwZUZyb21JbnN0YW5jZShjdHguYWN0aW9uKSE7XHJcbiAgICBjb25zdCB0eXBlTWF0Y2ggPSBhbGxvd2VkVHlwZXNbYWN0aW9uVHlwZV07XHJcbiAgICBjb25zdCBzdGF0dXNNYXRjaCA9IGFsbG93ZWRTdGF0dXNlcyA/IGFsbG93ZWRTdGF0dXNlc1tjdHguc3RhdHVzXSA6IHRydWU7XHJcbiAgICByZXR1cm4gdHlwZU1hdGNoICYmIHN0YXR1c01hdGNoO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXBBY3Rpb25SZXN1bHQoKTogT3BlcmF0b3JGdW5jdGlvbjxBY3Rpb25Db250ZXh0LCBBY3Rpb25Db21wbGV0aW9uPiB7XHJcbiAgcmV0dXJuIG1hcCgoeyBhY3Rpb24sIHN0YXR1cywgZXJyb3IgfTogQWN0aW9uQ29udGV4dCkgPT4ge1xyXG4gICAgcmV0dXJuIDxBY3Rpb25Db21wbGV0aW9uPntcclxuICAgICAgYWN0aW9uLFxyXG4gICAgICByZXN1bHQ6IHtcclxuICAgICAgICBzdWNjZXNzZnVsOiBBY3Rpb25TdGF0dXMuU3VjY2Vzc2Z1bCA9PT0gc3RhdHVzLFxyXG4gICAgICAgIGNhbmNlbGVkOiBBY3Rpb25TdGF0dXMuQ2FuY2VsZWQgPT09IHN0YXR1cyxcclxuICAgICAgICBlcnJvclxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXBBY3Rpb248VCA9IGFueT4oKTogT3BlcmF0b3JGdW5jdGlvbjxBY3Rpb25Db250ZXh0LCBUPiB7XHJcbiAgcmV0dXJuIG1hcCgoY3R4OiBBY3Rpb25Db250ZXh0KSA9PiA8VD5jdHguYWN0aW9uKTtcclxufVxyXG5cclxudHlwZSBGaWx0ZXJNYXAgPSB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfTtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUFsbG93ZWRBY3Rpb25UeXBlc01hcCh0eXBlczogYW55W10pOiBGaWx0ZXJNYXAge1xyXG4gIHJldHVybiB0eXBlcy5yZWR1Y2UoXHJcbiAgICAoZmlsdGVyTWFwOiBGaWx0ZXJNYXAsIGtsYXNzOiBhbnkpID0+IHtcclxuICAgICAgZmlsdGVyTWFwW2dldEFjdGlvblR5cGVGcm9tSW5zdGFuY2Uoa2xhc3MpIV0gPSB0cnVlO1xyXG4gICAgICByZXR1cm4gZmlsdGVyTWFwO1xyXG4gICAgfSxcclxuICAgIDxGaWx0ZXJNYXA+e31cclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVBbGxvd2VkU3RhdHVzZXNNYXAoc3RhdHVzZXM6IEFjdGlvblN0YXR1c1tdKTogRmlsdGVyTWFwIHtcclxuICByZXR1cm4gc3RhdHVzZXMucmVkdWNlKFxyXG4gICAgKGZpbHRlck1hcDogRmlsdGVyTWFwLCBzdGF0dXM6IEFjdGlvblN0YXR1cykgPT4ge1xyXG4gICAgICBmaWx0ZXJNYXBbc3RhdHVzXSA9IHRydWU7XHJcbiAgICAgIHJldHVybiBmaWx0ZXJNYXA7XHJcbiAgICB9LFxyXG4gICAgPEZpbHRlck1hcD57fVxyXG4gICk7XHJcbn1cclxuIl19