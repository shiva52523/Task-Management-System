{"version":3,"file":"ngxs-store.js.map","sources":["ng://@ngxs/store/src/execution/dispatch-outside-zone-ngxs-execution-strategy.ts","ng://@ngxs/store/src/symbols.ts","ng://@ngxs/store/src/execution/symbols.ts","ng://@ngxs/store/src/internal/internals.ts","ng://@ngxs/store/src/utils/utils.ts","ng://@ngxs/store/src/operators/of-action.ts","ng://@ngxs/store/src/execution/internal-ngxs-execution-strategy.ts","ng://@ngxs/store/src/operators/leave-ngxs.ts","ng://@ngxs/store/src/actions-stream.ts","ng://@ngxs/store/src/utils/compose.ts","ng://@ngxs/store/src/internal/state-stream.ts","ng://@ngxs/store/src/plugin-manager.ts","ng://@ngxs/store/src/internal/dispatcher.ts","ng://@ngxs/store/src/utils/memoize.ts","ng://@ngxs/store/src/utils/angular.ts","ng://@ngxs/store/src/internal/config-validator.ts","ng://@ngxs/store/src/utils/freeze.ts","ng://@ngxs/store/src/internal/state-operations.ts","ng://@ngxs/store/src/internal/state-operators.ts","ng://@ngxs/store/src/internal/state-context-factory.ts","ng://@ngxs/store/src/utils/store-validators.ts","ng://@ngxs/store/src/internal/state-factory.ts","ng://@ngxs/store/src/internal/lifecycle-state-manager.ts","ng://@ngxs/store/src/utils/selector-utils.ts","ng://@ngxs/store/src/store.ts","ng://@ngxs/store/src/decorators/select.ts","ng://@ngxs/store/src/actions/actions.ts","ng://@ngxs/store/src/module.ts","ng://@ngxs/store/src/decorators/action.ts","ng://@ngxs/store/src/decorators/state.ts","ng://@ngxs/store/src/decorators/selector.ts","ng://@ngxs/store/src/execution/noop-ngxs-execution-strategy.ts"],"sourcesContent":["import {\r\n  NgZone,\r\n  PLATFORM_ID,\r\n  Injectable,\r\n  ÉµNoopNgZone as NoopNgZone,\r\n  Inject\r\n} from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\n\r\n@Injectable()\r\nexport class DispatchOutsideZoneNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(private _ngZone: NgZone, @Inject(PLATFORM_ID) private _platformId: Object) {\r\n    this.verifyZoneIsNotNooped(this._ngZone);\r\n  }\r\n\r\n  enter<T>(func: () => T): T {\r\n    if (isPlatformServer(this._platformId)) {\r\n      return this.runInsideAngular(func);\r\n    }\r\n    return this.runOutsideAngular(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this.runInsideAngular(func);\r\n  }\r\n\r\n  private runInsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return func();\r\n    }\r\n    return this._ngZone.run(func);\r\n  }\r\n\r\n  private runOutsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return this._ngZone.runOutsideAngular(func);\r\n    }\r\n    return func();\r\n  }\r\n\r\n  private verifyZoneIsNotNooped(ngZone: NgZone): void {\r\n    /* - Removed because unsafe for Angular 5 - investigate\r\n    if (ngZone instanceof NoopNgZone) {\r\n      console.warn(\r\n        'Your application was bootstrapped with nooped zone and your execution strategy requires an ngZone'\r\n      );\r\n    }\r\n    */\r\n  }\r\n}\r\n","import { Injectable, InjectionToken, Type } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ObjectKeyMap } from './internal/internals';\r\nimport { NgxsExecutionStrategy } from './execution/symbols';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\n\r\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\r\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\r\nexport const META_KEY = 'NGXS_META';\r\nexport const META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\r\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\r\n\r\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\r\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\r\n\r\n/**\r\n * The NGXS config settings.\r\n */\r\n@Injectable()\r\nexport class NgxsConfig {\r\n  /**\r\n   * Run in development mode. This will add additional debugging features:\r\n   * - Object.freeze on the state and actions to guarantee immutability\r\n   * (default: false)\r\n   */\r\n  developmentMode: boolean;\r\n  compatibility: {\r\n    /**\r\n     * Support a strict Content Security Policy.\r\n     * This will cirumvent some optimisations that violate a strict CSP through the use of `new Function(...)`.\r\n     * (default: false)\r\n     */\r\n    strictContentSecurityPolicy: boolean;\r\n  };\r\n  /**\r\n   * Determines the execution context to perform async operations inside. An implementation can be\r\n   * provided to override the default behaviour where the async operations are run\r\n   * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\r\n   * These observable behaviours are from:\r\n   *   `@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\r\n   * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\r\n   * application doesn't rely on zone.js running change detection then you can switch to the\r\n   * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\r\n   * (default: null)\r\n   */\r\n  executionStrategy: Type<NgxsExecutionStrategy>;\r\n  /**\r\n   * Defining the default state before module initialization\r\n   * This is convenient if we need to create a define our own set of states.\r\n   * (default: {})\r\n   */\r\n  defaultsState: ObjectKeyMap<any> = {};\r\n\r\n  constructor() {\r\n    this.compatibility = {\r\n      strictContentSecurityPolicy: false\r\n    };\r\n    this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\r\n  }\r\n}\r\n\r\nexport interface ActionDef {\r\n  type: string;\r\n\r\n  new (...args: any[]): any;\r\n}\r\n\r\nexport type StateOperator<T> = (existing: Readonly<T>) => T;\r\n\r\n/**\r\n * State context provided to the actions in the state.\r\n */\r\nexport interface StateContext<T> {\r\n  /**\r\n   * Get the current state.\r\n   */\r\n  getState(): T;\r\n\r\n  /**\r\n   * Reset the state to a new value.\r\n   */\r\n  setState(val: T | StateOperator<T>): T;\r\n\r\n  /**\r\n   * Patch the existing state with the provided value.\r\n   */\r\n  patchState(val: Partial<T>): T;\r\n\r\n  /**\r\n   * Dispatch a new action and return the dispatched observable.\r\n   */\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\r\n\r\n/**\r\n * Plugin interface\r\n */\r\nexport interface NgxsPlugin {\r\n  /**\r\n   * Handle the state/action before its submitted to the state handlers.\r\n   */\r\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\r\n}\r\n\r\n/**\r\n * Options that can be provided to the store.\r\n */\r\nexport interface StoreOptions<T> {\r\n  /**\r\n   * Name of the state. Required.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * Default values for the state. If not provided, uses empty object.\r\n   */\r\n  defaults?: T;\r\n\r\n  /**\r\n   * Sub states for the given state.\r\n   */\r\n  children?: any[];\r\n}\r\n\r\n/**\r\n * Actions that can be provided in a action decorator.\r\n */\r\nexport interface ActionOptions {\r\n  /**\r\n   * Cancel the previous uncompleted observable(s).\r\n   */\r\n  cancelUncompleted?: boolean;\r\n}\r\n\r\nexport const enum LifecycleHooks {\r\n  NgxsOnInit = 'ngxsOnInit',\r\n  NgxsAfterBootstrap = 'ngxsAfterBootstrap'\r\n}\r\n\r\n/**\r\n * On init interface\r\n */\r\nexport interface NgxsOnInit {\r\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\r\n}\r\n\r\n/**\r\n * After bootstrap interface\r\n */\r\nexport interface NgxsAfterBootstrap {\r\n  ngxsAfterBootstrap(ctx?: StateContext<any>): void;\r\n}\r\n\r\nexport type NgxsLifeCycle = Partial<NgxsOnInit> & Partial<NgxsAfterBootstrap>;\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/*\r\n * Internal execution strategy injection token\r\n */\r\nexport const NGXS_EXECUTION_STRATEGY = new InjectionToken<NgxsExecutionStrategy>(\r\n  'NGXS_EXECUTION_STRATEGY'\r\n);\r\n\r\n/*\r\n * Execution strategy interface\r\n */\r\nexport interface NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T;\r\n  leave<T>(func: () => T): T;\r\n}\r\n","import {\r\n  ActionOptions,\r\n  META_KEY,\r\n  META_OPTIONS_KEY,\r\n  NgxsConfig,\r\n  SELECTOR_META_KEY,\r\n  StoreOptions\r\n} from '../symbols';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ObjectKeyMap<T> {\r\n  [key: string]: T;\r\n}\r\n\r\n// inspired from https://stackoverflow.com/a/43674389\r\nexport interface StateClass<T = any, U = any> {\r\n  [META_KEY]?: MetaDataModel;\r\n  [META_OPTIONS_KEY]?: StoreOptions<U>;\r\n\r\n  new (...args: any[]): T;\r\n}\r\n\r\nexport type StateKeyGraph = ObjectKeyMap<string[]>;\r\nexport type StatesByName = ObjectKeyMap<StateClass>;\r\n\r\nexport interface ActionHandlerMetaData {\r\n  fn: string | symbol;\r\n  options: ActionOptions;\r\n  type: string;\r\n}\r\n\r\nexport interface StateOperations<T> {\r\n  getState(): T;\r\n\r\n  setState(val: T): T;\r\n\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport interface MetaDataModel {\r\n  name: string | null;\r\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  selectFromAppState: SelectFromState | null;\r\n  children?: StateClass[];\r\n  instance: any;\r\n}\r\n\r\nexport type SelectFromState = (state: any) => any;\r\n\r\nexport interface SelectorMetaDataModel {\r\n  selectFromAppState: SelectFromState | null;\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n}\r\n\r\nexport interface MappedStore {\r\n  name: string;\r\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  instance: any;\r\n  depth: string;\r\n}\r\n\r\nexport interface StatesAndDefaults {\r\n  defaults: any;\r\n  states: MappedStore[];\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the class and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureStoreMetadata(target: StateClass): MetaDataModel {\r\n  if (!target.hasOwnProperty(META_KEY)) {\r\n    const defaultMetadata: MetaDataModel = {\r\n      name: null,\r\n      actions: {},\r\n      defaults: {},\r\n      path: null,\r\n      selectFromAppState: null,\r\n      children: [],\r\n      instance: null\r\n    };\r\n\r\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\r\n  }\r\n  return getStoreMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the state class if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getStoreMetadata(target: StateClass): MetaDataModel {\r\n  return target[META_KEY]!;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the selector and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\r\n    const defaultMetadata: SelectorMetaDataModel = {\r\n      selectFromAppState: null,\r\n      originalFn: null,\r\n      containerClass: null,\r\n      selectorName: null\r\n    };\r\n\r\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\r\n  }\r\n\r\n  return getSelectorMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the selector if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return target[SELECTOR_META_KEY];\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\r\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\r\n *\r\n * @ignore\r\n */\r\nfunction compliantPropGetter(paths: string[]): (x: any) => any {\r\n  const copyOfPaths = [...paths];\r\n  return obj => copyOfPaths.reduce((acc: any, part: string) => acc && acc[part], obj);\r\n}\r\n\r\n/**\r\n * The generated function is faster than:\r\n * - pluck (Observable operator)\r\n * - memoize\r\n *\r\n * @ignore\r\n */\r\nfunction fastPropGetter(paths: string[]): (x: any) => any {\r\n  const segments = paths;\r\n  let seg = 'store.' + segments[0];\r\n  let i = 0;\r\n  const l = segments.length;\r\n\r\n  let expr = seg;\r\n  while (++i < l) {\r\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\r\n  }\r\n\r\n  const fn = new Function('store', 'return ' + expr + ';');\r\n\r\n  return <(x: any) => any>fn;\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport function propGetter(paths: string[], config: NgxsConfig) {\r\n  if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\r\n    return compliantPropGetter(paths);\r\n  } else {\r\n    return fastPropGetter(paths);\r\n  }\r\n}\r\n\r\n/**\r\n * Given an array of states, it will return a object graph. Example:\r\n *    const states = [\r\n *      Cart,\r\n *      CartSaved,\r\n *      CartSavedItems\r\n *    ]\r\n *\r\n * would return:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function buildGraph(stateClasses: StateClass[]): StateKeyGraph {\r\n  const findName = (stateClass: StateClass) => {\r\n    const meta = stateClasses.find(g => g === stateClass);\r\n    if (!meta) {\r\n      throw new Error(\r\n        `Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`\r\n      );\r\n    }\r\n\r\n    return meta[META_KEY]!.name!;\r\n  };\r\n\r\n  return stateClasses.reduce<StateKeyGraph>(\r\n    (result: StateKeyGraph, stateClass: StateClass) => {\r\n      const { name, children } = stateClass[META_KEY]!;\r\n      result[name!] = (children || []).map(findName);\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a states array, returns object graph\r\n * returning the name and state metadata. Example:\r\n *\r\n *  const graph = {\r\n *    cart: { metadata }\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function nameToState(states: StateClass[]): ObjectKeyMap<StateClass> {\r\n  return states.reduce<ObjectKeyMap<StateClass>>(\r\n    (result: ObjectKeyMap<StateClass>, stateClass: StateClass) => {\r\n      const meta = stateClass[META_KEY]!;\r\n      result[meta.name!] = stateClass;\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a object relationship graph will return the full path\r\n * for the child items. Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const r = {\r\n *    cart: 'cart',\r\n *    saved: 'cart.saved',\r\n *    items: 'cart.saved.items'\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function findFullParentPath(\r\n  obj: StateKeyGraph,\r\n  newObj: ObjectKeyMap<string> = {}\r\n): ObjectKeyMap<string> {\r\n  const visit = (child: StateKeyGraph, keyToFind: string): string | null => {\r\n    for (const key in child) {\r\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\r\n        const parent = visit(child, key);\r\n        return parent !== null ? `${parent}.${key}` : key;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      const parent = visit(obj, key);\r\n      newObj[key] = parent ? `${parent}.${key}` : key;\r\n    }\r\n  }\r\n\r\n  return newObj;\r\n}\r\n\r\n/**\r\n * Given a object graph, it will return the items topologically sorted Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const results = [\r\n *    'items',\r\n *    'saved',\r\n *    'cart'\r\n *  ];\r\n *\r\n * @ignore\r\n */\r\nexport function topologicalSort(graph: StateKeyGraph): string[] {\r\n  const sorted: string[] = [];\r\n  const visited: ObjectKeyMap<boolean> = {};\r\n\r\n  const visit = (name: string, ancestors: string[] = []) => {\r\n    if (!Array.isArray(ancestors)) {\r\n      ancestors = [];\r\n    }\r\n\r\n    ancestors.push(name);\r\n    visited[name] = true;\r\n\r\n    graph[name].forEach((dep: string) => {\r\n      if (ancestors.indexOf(dep) >= 0) {\r\n        throw new Error(\r\n          `Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`\r\n        );\r\n      }\r\n\r\n      if (visited[dep]) {\r\n        return;\r\n      }\r\n\r\n      visit(dep, ancestors.slice(0));\r\n    });\r\n\r\n    if (sorted.indexOf(name) < 0) {\r\n      sorted.push(name);\r\n    }\r\n  };\r\n\r\n  Object.keys(graph).forEach(k => visit(k));\r\n\r\n  return sorted.reverse();\r\n}\r\n\r\n/**\r\n * Returns if the parameter is a object or not.\r\n *\r\n * @ignore\r\n */\r\nexport function isObject(obj: any) {\r\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\r\n}\r\n\r\nconst DOLLAR_CHAR_CODE = 36;\r\n\r\n/**\r\n * If `foo$` => make it just `foo`\r\n *\r\n * @ignore\r\n */\r\nexport function removeDollarAtTheEnd(name: string): string {\r\n  const lastCharIndex = name.length - 1;\r\n  const dollarAtTheEnd = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\r\n  return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\r\n}\r\n","/**\r\n * Returns the type from an action instance/class.\r\n * @ignore\r\n */\r\nexport function getActionTypeFromInstance(action: any): string | undefined {\r\n  if (action.constructor && action.constructor.type) {\r\n    return action.constructor.type;\r\n  }\r\n\r\n  return action.type;\r\n}\r\n\r\nexport function getActionTypeFromClass<T = any>(actionClass: any): string {\r\n  return actionClass.type;\r\n}\r\n\r\n/**\r\n * Matches a action\r\n * @ignore\r\n */\r\nexport function actionMatcher(action1: any) {\r\n  const type1 = getActionTypeFromInstance(action1);\r\n\r\n  return function(action2: any) {\r\n    return type1 === getActionTypeFromInstance(action2);\r\n  };\r\n}\r\n\r\n/**\r\n * Set a deeply nested value. Example:\r\n *\r\n *   setValue({ foo: { bar: { eat: false } } },\r\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\r\n *\r\n * While it traverses it also creates new objects from top down.\r\n *\r\n * @ignore\r\n */\r\nexport const setValue = (obj: any, prop: string, val: any) => {\r\n  obj = { ...obj };\r\n\r\n  const split = prop.split('.');\r\n  const lastIndex = split.length - 1;\r\n\r\n  split.reduce((acc, part, index) => {\r\n    if (index === lastIndex) {\r\n      acc[part] = val;\r\n    } else {\r\n      acc[part] = Array.isArray(acc[part]) ? [...acc[part]] : { ...acc[part] };\r\n    }\r\n\r\n    return acc && acc[part];\r\n  }, obj);\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport const getValue = (obj: any, prop: string): any =>\r\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\r\n","import { OperatorFunction, Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\nimport { ActionContext, ActionStatus } from '../actions-stream';\r\n\r\nexport interface ActionCompletion<T = any, E = Error> {\r\n  action: T;\r\n  result: {\r\n    successful: boolean;\r\n    canceled: boolean;\r\n    error?: E;\r\n  };\r\n}\r\n\r\nexport function ofAction<T>(allowedType: any): OperatorFunction<ActionContext, T>;\r\nexport function ofAction<T>(...allowedTypes: any[]): OperatorFunction<ActionContext, T>;\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will grab actions that have just been dispatched as well as actions that have completed\r\n */\r\nexport function ofAction(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been dispatched\r\n */\r\nexport function ofActionDispatched(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Dispatched]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been successfully completed\r\n */\r\nexport function ofActionSuccessful(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Successful]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been canceled\r\n */\r\nexport function ofActionCanceled(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Canceled]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been completed\r\n */\r\nexport function ofActionCompleted(...allowedTypes: any[]) {\r\n  const allowedStatuses = [\r\n    ActionStatus.Successful,\r\n    ActionStatus.Canceled,\r\n    ActionStatus.Errored\r\n  ];\r\n  return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just thrown an error\r\n */\r\nexport function ofActionErrored(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Errored]);\r\n}\r\n\r\nfunction ofActionOperator<T = any>(\r\n  allowedTypes: any[],\r\n  statuses?: ActionStatus[],\r\n  mapOperator: () => OperatorFunction<ActionContext, T> = mapAction\r\n) {\r\n  const allowedMap = createAllowedActionTypesMap(allowedTypes);\r\n  const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\r\n  return function(o: Observable<ActionContext>) {\r\n    return o.pipe(\r\n      filterStatus(allowedMap, allowedStatusMap),\r\n      mapOperator()\r\n    );\r\n  };\r\n}\r\n\r\nfunction filterStatus(allowedTypes: FilterMap, allowedStatuses?: FilterMap) {\r\n  return filter((ctx: ActionContext) => {\r\n    const actionType = getActionTypeFromInstance(ctx.action)!;\r\n    const typeMatch = allowedTypes[actionType];\r\n    const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\r\n    return typeMatch && statusMatch;\r\n  });\r\n}\r\n\r\nfunction mapActionResult(): OperatorFunction<ActionContext, ActionCompletion> {\r\n  return map(({ action, status, error }: ActionContext) => {\r\n    return <ActionCompletion>{\r\n      action,\r\n      result: {\r\n        successful: ActionStatus.Successful === status,\r\n        canceled: ActionStatus.Canceled === status,\r\n        error\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction mapAction<T = any>(): OperatorFunction<ActionContext, T> {\r\n  return map((ctx: ActionContext) => <T>ctx.action);\r\n}\r\n\r\ntype FilterMap = { [key: string]: boolean };\r\n\r\nfunction createAllowedActionTypesMap(types: any[]): FilterMap {\r\n  return types.reduce(\r\n    (filterMap: FilterMap, klass: any) => {\r\n      filterMap[getActionTypeFromInstance(klass)!] = true;\r\n      return filterMap;\r\n    },\r\n    <FilterMap>{}\r\n  );\r\n}\r\n\r\nfunction createAllowedStatusesMap(statuses: ActionStatus[]): FilterMap {\r\n  return statuses.reduce(\r\n    (filterMap: FilterMap, status: ActionStatus) => {\r\n      filterMap[status] = true;\r\n      return filterMap;\r\n    },\r\n    <FilterMap>{}\r\n  );\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy, NGXS_EXECUTION_STRATEGY } from './symbols';\r\n\r\n@Injectable()\r\nexport class InternalNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(\r\n    @Inject(NGXS_EXECUTION_STRATEGY) private _executionStrategy: NgxsExecutionStrategy\r\n  ) {}\r\n\r\n  enter<T>(func: () => T): T {\r\n    return this._executionStrategy.enter(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this._executionStrategy.leave(func);\r\n  }\r\n}\r\n","import { MonoTypeOperatorFunction, Observable, Observer } from 'rxjs';\r\nimport { NgxsExecutionStrategy } from '../execution/symbols';\r\n\r\n/**\r\n * Returns operator that will run\r\n * `subscribe` outside of the ngxs execution context\r\n */\r\nexport function leaveNgxs<T>(\r\n  ngxsExecutionStrategy: NgxsExecutionStrategy\r\n): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => {\r\n    return new Observable((sink: Observer<T>) => {\r\n      return source.subscribe({\r\n        next(value) {\r\n          ngxsExecutionStrategy.leave(() => sink.next(value));\r\n        },\r\n        error(error) {\r\n          ngxsExecutionStrategy.leave(() => sink.error(error));\r\n        },\r\n        complete() {\r\n          ngxsExecutionStrategy.leave(() => sink.complete());\r\n        }\r\n      });\r\n    });\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\n\r\n/**\r\n * Status of a dispatched action\r\n */\r\nexport const enum ActionStatus {\r\n  Dispatched = 'DISPATCHED',\r\n  Successful = 'SUCCESSFUL',\r\n  Canceled = 'CANCELED',\r\n  Errored = 'ERRORED'\r\n}\r\n\r\nexport interface ActionContext<T = any> {\r\n  status: ActionStatus;\r\n  action: T;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n     subject.subscribe(value => {\r\n       if (value === 'start') subject.next('end');\r\n     });\r\n     subject.subscribe(value => { });\r\n     subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n */\r\nexport class OrderedSubject<T> extends Subject<T> {\r\n  private _itemQueue: T[] = [];\r\n  private _busyPushingNext = false;\r\n\r\n  next(value?: T): void {\r\n    if (this._busyPushingNext) {\r\n      this._itemQueue.unshift(value!);\r\n      return;\r\n    }\r\n    this._busyPushingNext = true;\r\n    super.next(value);\r\n    while (this._itemQueue.length > 0) {\r\n      const nextValue = this._itemQueue.pop();\r\n      super.next(nextValue);\r\n    }\r\n    this._busyPushingNext = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\n@Injectable()\r\nexport class InternalActions extends OrderedSubject<ActionContext> {}\r\n\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\n@Injectable()\r\nexport class Actions extends Observable<any> {\r\n  constructor(\r\n    actions$: InternalActions,\r\n    internalExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {\r\n    super(observer => {\r\n      actions$\r\n        .pipe(leaveNgxs(internalExecutionStrategy))\r\n        .subscribe(\r\n          res => observer.next(res),\r\n          err => observer.error(err),\r\n          () => observer.complete()\r\n        );\r\n    });\r\n  }\r\n}\r\n","export type StateFn = (...args: any[]) => any;\r\n\r\n/**\r\n * Composes a array of functions from left to right. Example:\r\n *\r\n *      compose([fn, final])(state, action);\r\n *\r\n * then the funcs have a signature like:\r\n *\r\n *      function fn (state, action, next) {\r\n *          console.log('here', state, action, next);\r\n *          return next(state, action);\r\n *      }\r\n *\r\n *      function final (state, action) {\r\n *          console.log('here', state, action);\r\n *          return state;\r\n *      }\r\n *\r\n * the last function should not call `next`.\r\n *\r\n * @ignore\r\n */\r\nexport const compose = (funcs: StateFn[]) => (...args: any[]) => {\r\n  const curr = funcs.shift()!;\r\n  return curr(...args, (...nextArgs: any[]) => compose(funcs)(...nextArgs));\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { ObjectKeyMap } from '../internal/internals';\r\n\r\n/**\r\n * BehaviorSubject of the entire state.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateStream extends BehaviorSubject<ObjectKeyMap<any>> {\r\n  constructor() {\r\n    super({});\r\n  }\r\n}\r\n","import { Injectable, Optional, SkipSelf, Inject } from '@angular/core';\r\nimport { NgxsPluginFn, NGXS_PLUGINS, NgxsPlugin } from './symbols';\r\n\r\n/**\r\n * Plugin manager class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class PluginManager {\r\n  plugins: NgxsPluginFn[] = [];\r\n\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentManager: PluginManager,\r\n    @Inject(NGXS_PLUGINS)\r\n    @Optional()\r\n    private _plugins: NgxsPlugin[]\r\n  ) {\r\n    this.register();\r\n  }\r\n\r\n  private register() {\r\n    if (!this._plugins) {\r\n      return;\r\n    }\r\n\r\n    this.plugins = this._plugins.map(plugin => {\r\n      if (plugin.handle) {\r\n        return plugin.handle.bind(plugin);\r\n      } else {\r\n        return plugin;\r\n      }\r\n    });\r\n\r\n    if (this._parentManager) {\r\n      this._parentManager.plugins.push(...this.plugins);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, ErrorHandler } from '@angular/core';\r\nimport { Observable, of, forkJoin, empty, Subject, throwError } from 'rxjs';\r\nimport { shareReplay, filter, exhaustMap, take } from 'rxjs/operators';\r\n\r\nimport { compose } from '../utils/compose';\r\nimport { InternalActions, ActionStatus, ActionContext } from '../actions-stream';\r\nimport { StateStream } from './state-stream';\r\nimport { PluginManager } from '../plugin-manager';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from '../operators/leave-ngxs';\r\n\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\n@Injectable()\r\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\r\n\r\n@Injectable()\r\nexport class InternalDispatcher {\r\n  constructor(\r\n    private _errorHandler: ErrorHandler,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _pluginManager: PluginManager,\r\n    private _stateStream: StateStream,\r\n    private _ngxsExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(actionOrActions: any | any[]): Observable<any> {\r\n    const result = this._ngxsExecutionStrategy.enter(() =>\r\n      this.dispatchByEvents(actionOrActions)\r\n    );\r\n\r\n    result.subscribe({\r\n      error: error =>\r\n        this._ngxsExecutionStrategy.leave(() => this._errorHandler.handleError(error))\r\n    });\r\n\r\n    return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\r\n  }\r\n\r\n  private dispatchByEvents(actionOrActions: any | any[]): Observable<any> {\r\n    if (Array.isArray(actionOrActions)) {\r\n      return forkJoin(actionOrActions.map(a => this.dispatchSingle(a)));\r\n    } else {\r\n      return this.dispatchSingle(actionOrActions);\r\n    }\r\n  }\r\n\r\n  private dispatchSingle(action: any): Observable<any> {\r\n    const prevState = this._stateStream.getValue();\r\n    const plugins = this._pluginManager.plugins;\r\n\r\n    return (compose([\r\n      ...plugins,\r\n      (nextState: any, nextAction: any) => {\r\n        if (nextState !== prevState) {\r\n          this._stateStream.next(nextState);\r\n        }\r\n        const actionResult$ = this.getActionResultStream(nextAction);\r\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\r\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\r\n        return this.createDispatchObservable(actionResult$);\r\n      }\r\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\r\n  }\r\n\r\n  private getActionResultStream(action: any): Observable<ActionContext> {\r\n    return this._actionResults.pipe(\r\n      filter(\r\n        (ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched\r\n      ),\r\n      take(1),\r\n      shareReplay()\r\n    );\r\n  }\r\n\r\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\r\n    return actionResult$\r\n      .pipe(\r\n        exhaustMap((ctx: ActionContext) => {\r\n          switch (ctx.status) {\r\n            case ActionStatus.Successful:\r\n              return of(this._stateStream.getValue());\r\n            case ActionStatus.Errored:\r\n              return throwError(ctx.error);\r\n            default:\r\n              return empty();\r\n          }\r\n        })\r\n      )\r\n      .pipe(shareReplay());\r\n  }\r\n}\r\n","function defaultEqualityCheck(a: any, b: any) {\r\n  return a === b;\r\n}\r\n\r\nfunction areArgumentsShallowlyEqual(\r\n  equalityCheck: (a: any, b: any) => boolean,\r\n  prev: IArguments | null,\r\n  next: IArguments | null\r\n) {\r\n  if (prev === null || next === null || prev.length !== next.length) {\r\n    return false;\r\n  }\r\n\r\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\r\n  const length = prev.length;\r\n  for (let i = 0; i < length; i++) {\r\n    if (!equalityCheck(prev[i], next[i])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Memoize a function on its last inputs only.\r\n * Oringinally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\r\n *\r\n * @ignore\r\n */\r\nexport function memoize<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  equalityCheck = defaultEqualityCheck\r\n): T {\r\n  let lastArgs: IArguments | null = null;\r\n  let lastResult: any = null;\r\n  // we reference arguments instead of spreading them for performance reasons\r\n  function memoized() {\r\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\r\n      // apply arguments instead of spreading for performance.\r\n      lastResult = (<Function>func).apply(null, arguments);\r\n    }\r\n\r\n    lastArgs = arguments;\r\n    return lastResult;\r\n  }\r\n  (<any>memoized).reset = function() {\r\n    // The hidden (for now) ability to reset the memoization\r\n    lastArgs = null;\r\n    lastResult = null;\r\n  };\r\n  return memoized as T;\r\n}\r\n","import { getPlatform, COMPILER_OPTIONS, CompilerOptions, PlatformRef } from '@angular/core';\r\nimport { memoize } from './memoize';\r\n\r\nfunction _isAngularInTestMode() {\r\n  const platformRef: PlatformRef | null = getPlatform();\r\n  if (!platformRef) return false;\r\n  const compilerOptions = platformRef.injector.get(COMPILER_OPTIONS, null);\r\n  if (!compilerOptions) return false;\r\n  const isInTestMode = compilerOptions.some((item: CompilerOptions) => {\r\n    const providers = (item && item.providers) || [];\r\n    return providers.some((provider: any) => {\r\n      return (\r\n        (provider && provider.provide && provider.provide.name === 'MockNgModuleResolver') ||\r\n        false\r\n      );\r\n    });\r\n  });\r\n  return isInTestMode;\r\n}\r\n\r\nexport const isAngularInTestMode = memoize(_isAngularInTestMode);\r\n","import { Injectable, isDevMode } from '@angular/core';\r\n\r\nimport { isAngularInTestMode } from '../utils/angular';\r\nimport { NgxsConfig } from '../symbols';\r\n\r\n@Injectable()\r\nexport class ConfigValidator {\r\n  constructor(private _config: NgxsConfig) {}\r\n\r\n  public verifyDevMode(): void {\r\n    if (isAngularInTestMode()) {\r\n      return;\r\n    }\r\n\r\n    const isNgxsDevMode = this._config.developmentMode;\r\n    const isNgDevMode = isDevMode();\r\n    const incorrectProduction = !isNgDevMode && isNgxsDevMode;\r\n    const incorrectDevelopment = isNgDevMode && !isNgxsDevMode;\r\n    const example = 'NgxsModule.forRoot(states, { developmentMode: !environment.production })';\r\n\r\n    if (incorrectProduction) {\r\n      console.warn(\r\n        'Angular is running in production mode but NGXS is still running in the development mode!\\n',\r\n        'Please set developmentMode to false on the NgxsModule options when in production mode.\\n',\r\n        example\r\n      );\r\n    } else if (incorrectDevelopment) {\r\n      console.warn(\r\n        'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\\n',\r\n        example\r\n      );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Object freeze code\r\n * https://github.com/jsdf/deep-freeze\r\n */\r\nexport const deepFreeze = (o: any) => {\r\n  Object.freeze(o);\r\n\r\n  const oIsFunction = typeof o === 'function';\r\n  const hasOwnProp = Object.prototype.hasOwnProperty;\r\n\r\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\r\n    if (\r\n      hasOwnProp.call(o, prop) &&\r\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\r\n      o[prop] !== null &&\r\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\r\n      !Object.isFrozen(o[prop])\r\n    ) {\r\n      deepFreeze(o[prop]);\r\n    }\r\n  });\r\n\r\n  return o;\r\n};\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ConfigValidator } from './config-validator';\r\nimport { StateOperations, StatesAndDefaults } from '../internal/internals';\r\nimport { InternalDispatcher } from '../internal/dispatcher';\r\nimport { StateStream } from './state-stream';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { deepFreeze } from '../utils/freeze';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class InternalStateOperations {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _dispatcher: InternalDispatcher,\r\n    private _config: NgxsConfig,\r\n    configValidator: ConfigValidator\r\n  ) {\r\n    configValidator.verifyDevMode();\r\n  }\r\n\r\n  /**\r\n   * Returns the root state operators.\r\n   */\r\n  getRootStateOperations(): StateOperations<any> {\r\n    const rootStateOperations = {\r\n      getState: () => this._stateStream.getValue(),\r\n      setState: (newState: any) => this._stateStream.next(newState),\r\n      dispatch: (actions: any[]) => this._dispatcher.dispatch(actions)\r\n    };\r\n\r\n    if (this._config.developmentMode) {\r\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\r\n    }\r\n\r\n    return rootStateOperations;\r\n  }\r\n\r\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\r\n    return {\r\n      getState: () => root.getState(),\r\n      setState: value => {\r\n        const frozenValue = deepFreeze(value);\r\n        return root.setState(frozenValue);\r\n      },\r\n      dispatch: actions => {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n\r\n  setStateToTheCurrentWithNew(results: StatesAndDefaults): void {\r\n    const stateOperations: StateOperations<any> = this.getRootStateOperations();\r\n\r\n    // Get our current stream\r\n    const currentState = stateOperations.getState();\r\n    // Set the state to the current + new\r\n    stateOperations.setState({ ...currentState, ...results.defaults });\r\n  }\r\n}\r\n","import { StateOperator } from '../symbols';\r\n\r\nexport function simplePatch<T>(val: Partial<T>): StateOperator<T> {\r\n  return (existingState: Readonly<T>) => {\r\n    const isArray = Array.isArray(val);\r\n    const isPrimitive = typeof val !== 'object';\r\n    if (isArray) {\r\n      throw new Error('Patching arrays is not supported.');\r\n    }\r\n    if (isPrimitive) {\r\n      throw new Error('Patching primitives is not supported.');\r\n    }\r\n    const newState = { ...(<any>existingState) };\r\n    for (const k in val) {\r\n      newState[k] = val[k];\r\n    }\r\n    return <T>newState;\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { StateContext, StateOperator } from '../symbols';\r\nimport { MappedStore } from '../internal/internals';\r\nimport { setValue, getValue } from '../utils/utils';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { simplePatch } from './state-operators';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateContextFactory {\r\n  constructor(private _internalStateOperations: InternalStateOperations) {}\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  createStateContext<T>(metadata: MappedStore): StateContext<T> {\r\n    const root = this._internalStateOperations.getRootStateOperations();\r\n\r\n    function getState(currentAppState: any): T {\r\n      return getValue(currentAppState, metadata.depth);\r\n    }\r\n\r\n    function setStateValue(currentAppState: any, newValue: T): any {\r\n      const newAppState = setValue(currentAppState, metadata.depth, newValue);\r\n      root.setState(newAppState);\r\n      return newAppState;\r\n      // In doing this refactoring I noticed that there is a 'bug' where the\r\n      // application state is returned instead of this state slice.\r\n      // This has worked this way since the beginning see:\r\n      // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\r\n      // This needs to be fixed, but is a 'breaking' change.\r\n      // I will do this fix in a subsequent PR and we can decide how to handle it.\r\n    }\r\n\r\n    function setStateFromOperator(currentAppState: any, stateOperator: StateOperator<T>) {\r\n      const local = getState(currentAppState);\r\n      const newValue = stateOperator(local);\r\n      return setStateValue(currentAppState, newValue);\r\n    }\r\n\r\n    function isStateOperator(value: T | StateOperator<T>): value is StateOperator<T> {\r\n      return typeof value === 'function';\r\n    }\r\n\r\n    return {\r\n      getState(): T {\r\n        const currentAppState = root.getState();\r\n        return getState(currentAppState);\r\n      },\r\n      patchState(val: Partial<T>): T {\r\n        const currentAppState = root.getState();\r\n        const patchOperator = simplePatch<T>(val);\r\n        return setStateFromOperator(currentAppState, patchOperator);\r\n      },\r\n      setState(val: T | StateOperator<T>): T {\r\n        const currentAppState = root.getState();\r\n        return isStateOperator(val)\r\n          ? setStateFromOperator(currentAppState, val)\r\n          : setStateValue(currentAppState, val);\r\n      },\r\n      dispatch(actions: any | any[]): Observable<void> {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n","import {\r\n  getStoreMetadata,\r\n  MetaDataModel,\r\n  StateClass,\r\n  StatesByName\r\n} from '../internal/internals';\r\n\r\nexport abstract class StoreValidators {\r\n  public static stateNameRegex: RegExp = new RegExp('^[a-zA-Z0-9_]+$');\r\n\r\n  public static stateNameErrorMessage(name: string) {\r\n    return `${name} is not a valid state name. It needs to be a valid object property name.`;\r\n  }\r\n\r\n  public static checkCorrectStateName(name: string) {\r\n    if (!name) {\r\n      throw new Error(`States must register a 'name' property`);\r\n    }\r\n\r\n    if (!this.stateNameRegex.test(name)) {\r\n      throw new Error(this.stateNameErrorMessage(name));\r\n    }\r\n  }\r\n\r\n  public static checkStateNameIsUnique(state: StateClass, statesByName: StatesByName): string {\r\n    const meta: MetaDataModel = this.getValidStateMeta(state);\r\n    const stateName: string = meta!.name as string;\r\n    const existingState = statesByName[stateName];\r\n    if (existingState && existingState !== state) {\r\n      throw new Error(\r\n        `State name '${stateName}' from ${state.name} already exists in ${existingState.name}`\r\n      );\r\n    }\r\n    return stateName;\r\n  }\r\n\r\n  public static getValidStateMeta(state: StateClass): MetaDataModel {\r\n    const meta: MetaDataModel = getStoreMetadata(state);\r\n    if (!meta) {\r\n      throw new Error('States must be decorated with @State() decorator');\r\n    }\r\n\r\n    return meta;\r\n  }\r\n}\r\n","import { Injectable, Injector, Optional, SkipSelf } from '@angular/core';\r\nimport { forkJoin, from, Observable, of, throwError } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  defaultIfEmpty,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  shareReplay,\r\n  takeUntil\r\n} from 'rxjs/operators';\r\n\r\nimport { META_KEY, NgxsConfig } from '../symbols';\r\nimport {\r\n  buildGraph,\r\n  findFullParentPath,\r\n  isObject,\r\n  MappedStore,\r\n  MetaDataModel,\r\n  nameToState,\r\n  ObjectKeyMap,\r\n  propGetter,\r\n  StateClass,\r\n  StateKeyGraph,\r\n  StatesAndDefaults,\r\n  StatesByName,\r\n  topologicalSort\r\n} from './internals';\r\nimport { getActionTypeFromInstance, getValue, setValue } from '../utils/utils';\r\nimport { ofActionDispatched } from '../operators/of-action';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\n\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateFactory {\r\n  private _connected = false;\r\n  private _states: MappedStore[] = [];\r\n  private _statesByName: StatesByName = {};\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    private _config: NgxsConfig,\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentFactory: StateFactory,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _stateContextFactory: StateContextFactory,\r\n    private _internalStateOperations: InternalStateOperations\r\n  ) {}\r\n\r\n  public get states(): MappedStore[] {\r\n    return this._parentFactory ? this._parentFactory.states : this._states;\r\n  }\r\n\r\n  public get statesByName(): StatesByName {\r\n    return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\r\n  }\r\n\r\n  private get stateTreeRef(): ObjectKeyMap<any> {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  private static cloneDefaults(defaults: any): any {\r\n    let value = {};\r\n\r\n    if (Array.isArray(defaults)) {\r\n      value = [...defaults];\r\n    } else if (isObject(defaults)) {\r\n      value = { ...defaults };\r\n    } else if (defaults === undefined) {\r\n      value = {};\r\n    } else {\r\n      value = defaults;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  private static checkStatesAreValid(stateClasses: StateClass[]): void {\r\n    stateClasses.forEach(StoreValidators.getValidStateMeta);\r\n  }\r\n\r\n  /**\r\n   * Add a new state to the global defs.\r\n   */\r\n  add(stateClasses: StateClass[]): MappedStore[] {\r\n    StateFactory.checkStatesAreValid(stateClasses);\r\n    const { newStates } = this.addToStatesMap(stateClasses);\r\n    if (!newStates.length) return [];\r\n\r\n    const stateGraph: StateKeyGraph = buildGraph(newStates);\r\n    const sortedStates: string[] = topologicalSort(stateGraph);\r\n    const depths: ObjectKeyMap<string> = findFullParentPath(stateGraph);\r\n    const nameGraph: ObjectKeyMap<StateClass> = nameToState(newStates);\r\n    const bootstrappedStores: MappedStore[] = [];\r\n\r\n    for (const name of sortedStates) {\r\n      const stateClass: StateClass = nameGraph[name];\r\n      const depth: string = depths[name];\r\n      const meta: MetaDataModel = stateClass[META_KEY]!;\r\n\r\n      this.addRuntimeInfoToMeta(meta, depth);\r\n\r\n      const stateMap: MappedStore = {\r\n        name,\r\n        depth,\r\n        actions: meta.actions,\r\n        instance: this._injector.get(stateClass),\r\n        defaults: StateFactory.cloneDefaults(meta.defaults)\r\n      };\r\n\r\n      // ensure our store hasn't already been added\r\n      // but don't throw since it could be lazy\r\n      // loaded from different paths\r\n      if (!this.hasBeenMountedAndBootstrapped(name, depth)) {\r\n        bootstrappedStores.push(stateMap);\r\n      }\r\n\r\n      this.states.push(stateMap);\r\n    }\r\n\r\n    return bootstrappedStores;\r\n  }\r\n\r\n  /**\r\n   * Add a set of states to the store and return the defaults\r\n   */\r\n  addAndReturnDefaults(stateClasses: StateClass[]): StatesAndDefaults {\r\n    const classes: StateClass[] = stateClasses || [];\r\n\r\n    const states: MappedStore[] = this.add(classes);\r\n    const defaults = states.reduce(\r\n      (result: any, meta: MappedStore) => setValue(result, meta.depth, meta.defaults),\r\n      {}\r\n    );\r\n    return { defaults, states };\r\n  }\r\n\r\n  /**\r\n   * Bind the actions to the handlers\r\n   */\r\n  connectActionHandlers() {\r\n    if (this._connected) return;\r\n    this._actions\r\n      .pipe(\r\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\r\n        mergeMap(({ action }) =>\r\n          this.invokeActions(this._actions, action!).pipe(\r\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\r\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\r\n            catchError(error =>\r\n              of(<ActionContext>{ action, status: ActionStatus.Errored, error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n      .subscribe(ctx => this._actionResults.next(ctx));\r\n    this._connected = true;\r\n  }\r\n\r\n  /**\r\n   * Invoke actions on the states.\r\n   */\r\n  invokeActions(actions$: InternalActions, action: any) {\r\n    const results = [];\r\n\r\n    for (const metadata of this.states) {\r\n      const type = getActionTypeFromInstance(action)!;\r\n      const actionMetas = metadata.actions[type];\r\n\r\n      if (actionMetas) {\r\n        for (const actionMeta of actionMetas) {\r\n          const stateContext = this._stateContextFactory.createStateContext(metadata);\r\n          try {\r\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\r\n\r\n            if (result instanceof Promise) {\r\n              result = from(result);\r\n            }\r\n\r\n            if (result instanceof Observable) {\r\n              result = result.pipe(\r\n                actionMeta.options.cancelUncompleted\r\n                  ? // todo: ofActionDispatched should be used with action class\r\n                    takeUntil(actions$.pipe(ofActionDispatched(action as any)))\r\n                  : map(r => r)\r\n              ); // map acts like a noop\r\n            } else {\r\n              result = of({}).pipe(shareReplay());\r\n            }\r\n\r\n            results.push(result);\r\n          } catch (e) {\r\n            results.push(throwError(e));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!results.length) {\r\n      results.push(of({}));\r\n    }\r\n\r\n    return forkJoin(results);\r\n  }\r\n\r\n  private addToStatesMap(stateClasses: StateClass[]): { newStates: StateClass[] } {\r\n    const newStates: StateClass[] = [];\r\n    const statesMap: StatesByName = this.statesByName;\r\n\r\n    for (const stateClass of stateClasses) {\r\n      const stateName: string = StoreValidators.checkStateNameIsUnique(stateClass, statesMap);\r\n      const unmountedState: boolean = !statesMap[stateName];\r\n      if (unmountedState) {\r\n        newStates.push(stateClass);\r\n        statesMap[stateName] = stateClass;\r\n      }\r\n    }\r\n\r\n    return { newStates };\r\n  }\r\n\r\n  private addRuntimeInfoToMeta(meta: MetaDataModel, depth: string): void {\r\n    meta.path = depth;\r\n    meta.selectFromAppState = propGetter(depth.split('.'), this._config);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * the method checks if the state has already been added to the tree\r\n   * and completed the life cycle\r\n   * @param name\r\n   * @param path\r\n   */\r\n  private hasBeenMountedAndBootstrapped(name: string, path: string): boolean {\r\n    const valueIsBootstrapped: boolean = getValue(this.stateTreeRef, path) !== undefined;\r\n    return this.statesByName[name] && valueIsBootstrapped;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NgxsBootstrapper } from '@ngxs/store/internals';\r\n\r\nimport { filter, tap, mergeMap } from 'rxjs/operators';\r\n\r\nimport { StateContextFactory } from './state-context-factory';\r\nimport { InternalStateOperations } from './state-operations';\r\nimport { MappedStore, StatesAndDefaults } from './internals';\r\nimport { LifecycleHooks, NgxsLifeCycle } from '../symbols';\r\n\r\n@Injectable()\r\nexport class LifecycleStateManager {\r\n  constructor(\r\n    private internalStateOperations: InternalStateOperations,\r\n    private stateContextFactory: StateContextFactory,\r\n    private bootstrapper: NgxsBootstrapper\r\n  ) {}\r\n\r\n  ngxsBootstrap<T>(action: T, results: StatesAndDefaults | undefined): void {\r\n    this.internalStateOperations\r\n      .getRootStateOperations()\r\n      .dispatch(action)\r\n      .pipe(\r\n        filter(() => !!results),\r\n        tap(() => this.invokeInit(results!.states)),\r\n        mergeMap(() => this.bootstrapper.appBootstrapped$),\r\n        filter(appBootstrapped => !!appBootstrapped)\r\n      )\r\n      .subscribe(() => {\r\n        this.invokeBootstrap(results!.states);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Invoke the init function on the states.\r\n   */\r\n  invokeInit(stateMetadatas: MappedStore[]): void {\r\n    this.invokeLifecycleHooks(stateMetadatas, LifecycleHooks.NgxsOnInit);\r\n  }\r\n\r\n  /**\r\n   * Invoke the bootstrap function on the states.\r\n   */\r\n  invokeBootstrap(stateMetadatas: MappedStore[]) {\r\n    this.invokeLifecycleHooks(stateMetadatas, LifecycleHooks.NgxsAfterBootstrap);\r\n  }\r\n\r\n  private invokeLifecycleHooks(stateMetadatas: MappedStore[], hook: LifecycleHooks): void {\r\n    for (const metadata of stateMetadatas) {\r\n      const instance: NgxsLifeCycle = metadata.instance;\r\n\r\n      if (instance[hook]) {\r\n        const stateContext = this.stateContextFactory.createStateContext(metadata);\r\n        instance[hook]!(stateContext);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {\r\n  SelectFromState,\r\n  ensureSelectorMetadata,\r\n  getSelectorMetadata,\r\n  getStoreMetadata\r\n} from '../internal/internals';\r\nimport { memoize } from '../utils/memoize';\r\n\r\n/**\r\n * Function for creating a selector\r\n * @param selectors The selectors to use to create the arguments of this function\r\n * @param originalFn The original function being made into a selector\r\n * @param creationMetadata\r\n */\r\nexport function createSelector<T extends (...args: any[]) => any>(\r\n  selectors: any[] | undefined,\r\n  originalFn: T,\r\n  creationMetadata?: { containerClass: any; selectorName: string }\r\n) {\r\n  const wrappedFn = function wrappedSelectorFn(...args: any[]) {\r\n    const returnValue = originalFn(...args);\r\n    if (returnValue instanceof Function) {\r\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\r\n      return innerMemoizedFn;\r\n    }\r\n    return returnValue;\r\n  } as T;\r\n  const memoizedFn = memoize(wrappedFn);\r\n  const containerClass = creationMetadata && creationMetadata.containerClass;\r\n\r\n  const fn = (state: any) => {\r\n    const results = [];\r\n\r\n    const selectorsToApply = [];\r\n\r\n    if (containerClass) {\r\n      // If we are on a state class, add it as the first selector parameter\r\n      const metadata = getStoreMetadata(containerClass);\r\n      if (metadata) {\r\n        selectorsToApply.push(containerClass);\r\n      }\r\n    }\r\n\r\n    if (selectors) {\r\n      selectorsToApply.push(...selectors);\r\n    }\r\n\r\n    // Determine arguments from the app state using the selectors\r\n    results.push(...selectorsToApply.map(a => getSelectorFn(a)(state)));\r\n\r\n    // if the lambda tries to access a something on the\r\n    // state that doesn't exist, it will throw a TypeError.\r\n    // since this is quite usual behaviour, we simply return undefined if so.\r\n    try {\r\n      return memoizedFn(...results);\r\n    } catch (ex) {\r\n      if (ex instanceof TypeError) {\r\n        return undefined;\r\n      }\r\n      throw ex;\r\n    }\r\n  };\r\n\r\n  const selectorMetaData = ensureSelectorMetadata(memoizedFn);\r\n  selectorMetaData.originalFn = originalFn;\r\n  selectorMetaData.selectFromAppState = fn;\r\n  if (creationMetadata) {\r\n    selectorMetaData.containerClass = creationMetadata.containerClass;\r\n    selectorMetaData.selectorName = creationMetadata.selectorName;\r\n  }\r\n  return memoizedFn;\r\n}\r\n\r\n/**\r\n * This function gets the selector function to be used to get the selected slice from the app state\r\n * @ignore\r\n */\r\nexport function getSelectorFn(selector: any): SelectFromState {\r\n  const metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\r\n  return (metadata && metadata.selectFromAppState) || selector;\r\n}\r\n","// tslint:disable:unified-signatures\r\nimport { Injectable, Type } from '@angular/core';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\r\n\r\nimport { getSelectorFn } from './utils/selector-utils';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { NgxsConfig } from './symbols';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\n\r\n@Injectable()\r\nexport class Store {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _internalStateOperations: InternalStateOperations,\r\n    private _config: NgxsConfig,\r\n    private _internalExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {\r\n    this._stateStream.next(this._config.defaultsState);\r\n  }\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(event: any | any[]): Observable<any> {\r\n    return this._internalStateOperations.getRootStateOperations().dispatch(event);\r\n  }\r\n\r\n  /**\r\n   * Selects a slice of data from the store.\r\n   */\r\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  select<T = any>(selector: string | Type<any>): Observable<T>;\r\n  select(selector: any): Observable<any> {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return this._stateStream.pipe(\r\n      map(selectorFn),\r\n      catchError(err => {\r\n        // if error is TypeError we swallow it to prevent usual errors with property access\r\n        if (err instanceof TypeError) {\r\n          return of(undefined);\r\n        }\r\n\r\n        // rethrow other errors\r\n        throw err;\r\n      }),\r\n      distinctUntilChanged(),\r\n      leaveNgxs(this._internalExecutionStrategy)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Select one slice of data from the store.\r\n   */\r\n\r\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  selectOnce<T = any>(selector: string | Type<any>): Observable<T>;\r\n  selectOnce(selector: any): Observable<any> {\r\n    return this.select(selector).pipe(take(1));\r\n  }\r\n\r\n  /**\r\n   * Select a snapshot from the state.\r\n   */\r\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\r\n  selectSnapshot<T = any>(selector: string | Type<any>): T;\r\n  selectSnapshot(selector: any): any {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return selectorFn(this._stateStream.getValue());\r\n  }\r\n\r\n  /**\r\n   * Allow the user to subscribe to the root of the state\r\n   */\r\n  subscribe(fn?: (value: any) => void): Subscription {\r\n    return this._stateStream.pipe(leaveNgxs(this._internalExecutionStrategy)).subscribe(fn);\r\n  }\r\n\r\n  /**\r\n   * Return the raw value of the state.\r\n   */\r\n  snapshot(): any {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  /**\r\n   * Reset the state to a specific point in time. This method is useful\r\n   * for plugin's who need to modify the state directly or unit testing.\r\n   */\r\n  reset(state: any) {\r\n    return this._internalStateOperations.getRootStateOperations().setState(state);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Store } from '../store';\r\nimport { propGetter, removeDollarAtTheEnd } from '../internal/internals';\r\nimport { META_KEY, NgxsConfig } from '../symbols';\r\n\r\n/**\r\n * Allows the select decorator to get access to the DI store.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class SelectFactory {\r\n  static store: Store | undefined = undefined;\r\n  static config: NgxsConfig | undefined = undefined;\r\n  constructor(store: Store, config: NgxsConfig) {\r\n    SelectFactory.store = store;\r\n    SelectFactory.config = config;\r\n  }\r\n}\r\n\r\n/**\r\n * Decorator for selecting a slice of state from the store.\r\n */\r\nexport function Select(selectorOrFeature?: any, ...paths: string[]) {\r\n  return function(target: any, name: string) {\r\n    const selectorFnName = '__' + name + '__selector';\r\n\r\n    if (!selectorOrFeature) {\r\n      selectorOrFeature = removeDollarAtTheEnd(name);\r\n    }\r\n\r\n    const createSelect = (fn: any) => {\r\n      const store = SelectFactory.store;\r\n\r\n      if (!store) {\r\n        throw new Error('SelectFactory not connected to store!');\r\n      }\r\n\r\n      return store.select(fn);\r\n    };\r\n\r\n    const createSelector = () => {\r\n      const config = SelectFactory.config;\r\n      if (typeof selectorOrFeature === 'string') {\r\n        const propsArray = paths.length\r\n          ? [selectorOrFeature, ...paths]\r\n          : selectorOrFeature.split('.');\r\n\r\n        return propGetter(propsArray, config!);\r\n      } else if (selectorOrFeature[META_KEY] && selectorOrFeature[META_KEY].path) {\r\n        return propGetter(selectorOrFeature[META_KEY].path.split('.'), config!);\r\n      } else {\r\n        return selectorOrFeature;\r\n      }\r\n    };\r\n\r\n    if (target[selectorFnName]) {\r\n      throw new Error(\r\n        'You cannot use @Select decorator and a ' + selectorFnName + ' property.'\r\n      );\r\n    }\r\n\r\n    if (delete target[name]) {\r\n      Object.defineProperty(target, selectorFnName, {\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      Object.defineProperty(target, name, {\r\n        get: function() {\r\n          return (\r\n            this[selectorFnName] ||\r\n            (this[selectorFnName] = createSelect.apply(this, [createSelector()]))\r\n          );\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    }\r\n  };\r\n}\r\n","/**\r\n * Init action\r\n */\r\nexport class InitState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@INIT';\r\n  }\r\n}\r\n\r\n/**\r\n * Update action\r\n */\r\nexport class UpdateState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@UPDATE_STATE';\r\n  }\r\n}\r\n","import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  Optional,\r\n  Inject,\r\n  InjectionToken,\r\n  APP_BOOTSTRAP_LISTENER\r\n} from '@angular/core';\r\n\r\nimport { NgxsBootstrapper } from '@ngxs/store/internals';\r\n\r\nimport { ROOT_STATE_TOKEN, FEATURE_STATE_TOKEN, NgxsConfig } from './symbols';\r\nimport { NGXS_EXECUTION_STRATEGY } from './execution/symbols';\r\nimport { StateFactory } from './internal/state-factory';\r\nimport { StateContextFactory } from './internal/state-context-factory';\r\nimport { Actions, InternalActions } from './actions-stream';\r\nimport { ConfigValidator } from './internal/config-validator';\r\nimport { LifecycleStateManager } from './internal/lifecycle-state-manager';\r\nimport { InternalDispatcher, InternalDispatchedActionResults } from './internal/dispatcher';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { Store } from './store';\r\nimport { SelectFactory } from './decorators/select';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { PluginManager } from './plugin-manager';\r\nimport { InitState, UpdateState } from './actions/actions';\r\nimport { StateClass } from './internal/internals';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\n\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsRootModule {\r\n  constructor(\r\n    factory: StateFactory,\r\n    internalStateOperations: InternalStateOperations,\r\n    store: Store,\r\n    select: SelectFactory,\r\n    @Optional()\r\n    @Inject(ROOT_STATE_TOKEN)\r\n    states: StateClass[] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // add stores to the state graph and return their defaults\r\n    const results = factory.addAndReturnDefaults(states);\r\n\r\n    internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n    // connect our actions stream\r\n    factory.connectActionHandlers();\r\n\r\n    // dispatch the init action and invoke init and bootstrap functions after\r\n    lifecycleStateManager.ngxsBootstrap(new InitState(), results);\r\n  }\r\n}\r\n\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\n@NgModule({})\r\nexport class NgxsFeatureModule {\r\n  constructor(\r\n    store: Store,\r\n    internalStateOperations: InternalStateOperations,\r\n    factory: StateFactory,\r\n    @Optional()\r\n    @Inject(FEATURE_STATE_TOKEN)\r\n    states: any[][],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n    const flattenedStates = ([] as any[]).concat(...states);\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results = factory.addAndReturnDefaults(flattenedStates);\r\n\r\n    if (results.states.length) {\r\n      internalStateOperations.setStateToTheCurrentWithNew(results);\r\n      // dispatch the update action and invoke init and bootstrap functions after\r\n      lifecycleStateManager.ngxsBootstrap(new UpdateState(), results);\r\n    }\r\n  }\r\n}\r\n\r\nexport type ModuleOptions = Partial<NgxsConfig>;\r\n\r\nexport function ngxsConfigFactory(options: ModuleOptions): NgxsConfig {\r\n  const config = Object.assign(new NgxsConfig(), options);\r\n  return config;\r\n}\r\n\r\nexport function appBootstrapListenerFactory(bootstrapper: NgxsBootstrapper) {\r\n  return () => bootstrapper.bootstrap();\r\n}\r\n\r\nexport const ROOT_OPTIONS = new InjectionToken<ModuleOptions>('ROOT_OPTIONS');\r\n\r\n/**\r\n * Ngxs Module\r\n */\r\n@NgModule({})\r\nexport class NgxsModule {\r\n  /**\r\n   * Root module factory\r\n   */\r\n  static forRoot(states: StateClass[] = [], options: ModuleOptions = {}): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsRootModule,\r\n      providers: [\r\n        StateFactory,\r\n        StateContextFactory,\r\n        Actions,\r\n        InternalActions,\r\n        NgxsBootstrapper,\r\n        ConfigValidator,\r\n        LifecycleStateManager,\r\n        InternalDispatcher,\r\n        InternalDispatchedActionResults,\r\n        InternalStateOperations,\r\n        InternalNgxsExecutionStrategy,\r\n        Store,\r\n        StateStream,\r\n        SelectFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: NGXS_EXECUTION_STRATEGY,\r\n          useClass: options.executionStrategy || DispatchOutsideZoneNgxsExecutionStrategy\r\n        },\r\n        {\r\n          provide: ROOT_STATE_TOKEN,\r\n          useValue: states\r\n        },\r\n        {\r\n          provide: ROOT_OPTIONS,\r\n          useValue: options\r\n        },\r\n        {\r\n          provide: NgxsConfig,\r\n          useFactory: ngxsConfigFactory,\r\n          deps: [ROOT_OPTIONS]\r\n        },\r\n        {\r\n          provide: APP_BOOTSTRAP_LISTENER,\r\n          useFactory: appBootstrapListenerFactory,\r\n          multi: true,\r\n          deps: [NgxsBootstrapper]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Feature module factory\r\n   */\r\n  static forFeature(states: StateClass[] = []): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsFeatureModule,\r\n      providers: [\r\n        StateFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: FEATURE_STATE_TOKEN,\r\n          multi: true,\r\n          useValue: states\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { ensureStoreMetadata } from '../internal/internals';\r\nimport { ActionOptions, ActionDef } from '../symbols';\r\n\r\n/**\r\n * Decorates a method with a action information.\r\n */\r\nexport function Action(\r\n  actions: ActionDef | ActionDef[] | { type: string } | { type: string }[],\r\n  options?: ActionOptions\r\n) {\r\n  return function(target: any, name: string, _descriptor: TypedPropertyDescriptor<any>) {\r\n    const meta = ensureStoreMetadata(target.constructor);\r\n\r\n    if (!Array.isArray(actions)) {\r\n      actions = [actions];\r\n    }\r\n\r\n    for (const action of actions) {\r\n      const type = action.type;\r\n\r\n      if (!meta.actions[type]) {\r\n        meta.actions[type] = [];\r\n      }\r\n\r\n      meta.actions[type].push({\r\n        fn: name,\r\n        options: options || {},\r\n        type\r\n      });\r\n    }\r\n  };\r\n}\r\n","import { ensureStoreMetadata, MetaDataModel, StateClass } from '../internal/internals';\r\nimport { META_KEY, META_OPTIONS_KEY, StoreOptions } from '../symbols';\r\nimport { StoreValidators } from '../utils/store-validators';\r\n\r\ninterface MutateMetaOptions<T> {\r\n  meta: MetaDataModel;\r\n  inheritedStateClass: StateClass;\r\n  optionsWithInheritance: StoreOptions<T>;\r\n}\r\n\r\n/**\r\n * Decorates a class with ngxs state information.\r\n */\r\nexport function State<T>(options: StoreOptions<T>) {\r\n  function getStateOptions(inheritedStateClass: StateClass): StoreOptions<T> {\r\n    const inheritanceOptions: Partial<StoreOptions<T>> =\r\n      inheritedStateClass[META_OPTIONS_KEY] || {};\r\n    return { ...inheritanceOptions, ...options } as StoreOptions<T>;\r\n  }\r\n\r\n  function mutateMetaData(params: MutateMetaOptions<T>): void {\r\n    const { meta, inheritedStateClass, optionsWithInheritance } = params;\r\n    const { children, defaults, name } = optionsWithInheritance;\r\n    StoreValidators.checkCorrectStateName(name);\r\n\r\n    if (inheritedStateClass.hasOwnProperty(META_KEY)) {\r\n      const inheritedMeta: Partial<MetaDataModel> = inheritedStateClass[META_KEY] || {};\r\n      meta.actions = { ...meta.actions, ...inheritedMeta.actions };\r\n    }\r\n\r\n    meta.children = children;\r\n    meta.defaults = defaults;\r\n    meta.name = name;\r\n  }\r\n\r\n  return (target: StateClass): void => {\r\n    const meta: MetaDataModel = ensureStoreMetadata(target);\r\n    const inheritedStateClass: StateClass = Object.getPrototypeOf(target);\r\n    const optionsWithInheritance: StoreOptions<T> = getStateOptions(inheritedStateClass);\r\n    mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });\r\n    target[META_OPTIONS_KEY] = optionsWithInheritance;\r\n  };\r\n}\r\n","import { createSelector } from '../utils/selector-utils';\r\n\r\n/**\r\n * Decorator for memoizing a state selector.\r\n */\r\nexport function Selector(selectors?: any[]) {\r\n  return (target: any, methodName: string, descriptor: PropertyDescriptor) => {\r\n    if (descriptor.value !== null) {\r\n      const originalFn = descriptor.value;\r\n\r\n      const memoizedFn = createSelector(\r\n        selectors,\r\n        originalFn.bind(target),\r\n        { containerClass: target, selectorName: methodName }\r\n      );\r\n\r\n      return {\r\n        configurable: true,\r\n        get() {\r\n          return memoizedFn;\r\n        }\r\n      };\r\n    } else {\r\n      throw new Error('Selectors only work on methods');\r\n    }\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\n\r\n@Injectable()\r\nexport class NoopNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n}\r\n"],"names":["tslib_1.__extends","tslib_1.__values"],"mappings":"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"}
