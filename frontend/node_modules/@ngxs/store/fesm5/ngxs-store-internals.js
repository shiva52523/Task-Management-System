import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxsBootstrapper = /** @class */ (function () {
    function NgxsBootstrapper() {
        /**
         * Use `ReplaySubject`, thus we can get cached value even if the stream is completed
         */
        this.bootstrap$ = new ReplaySubject(1);
    }
    Object.defineProperty(NgxsBootstrapper.prototype, "appBootstrapped$", {
        get: /**
         * @return {?}
         */
        function () {
            return this.bootstrap$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This event will be emitted after attaching `ComponentRef` of the root component
     * to the tree of views, that's a signal that application has been fully rendered
     */
    /**
     * This event will be emitted after attaching `ComponentRef` of the root component
     * to the tree of views, that's a signal that application has been fully rendered
     * @return {?}
     */
    NgxsBootstrapper.prototype.bootstrap = /**
     * This event will be emitted after attaching `ComponentRef` of the root component
     * to the tree of views, that's a signal that application has been fully rendered
     * @return {?}
     */
    function () {
        this.bootstrap$.next(true);
        this.bootstrap$.complete();
    };
    NgxsBootstrapper.decorators = [
        { type: Injectable }
    ];
    return NgxsBootstrapper;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxsBootstrapper };

//# sourceMappingURL=ngxs-store-internals.js.map