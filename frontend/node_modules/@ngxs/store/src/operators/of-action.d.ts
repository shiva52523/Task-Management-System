import { OperatorFunction, Observable } from 'rxjs';
import { ActionContext } from '../actions-stream';
export interface ActionCompletion<T = any, E = Error> {
    action: T;
    result: {
        successful: boolean;
        canceled: boolean;
        error?: E;
    };
}
export declare function ofAction<T>(allowedType: any): OperatorFunction<ActionContext, T>;
export declare function ofAction<T>(...allowedTypes: any[]): OperatorFunction<ActionContext, T>;
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been dispatched
 */
export declare function ofActionDispatched(...allowedTypes: any[]): (o: Observable<ActionContext<any>>) => Observable<any>;
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been successfully completed
 */
export declare function ofActionSuccessful(...allowedTypes: any[]): (o: Observable<ActionContext<any>>) => Observable<any>;
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been canceled
 */
export declare function ofActionCanceled(...allowedTypes: any[]): (o: Observable<ActionContext<any>>) => Observable<any>;
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been completed
 */
export declare function ofActionCompleted(...allowedTypes: any[]): (o: Observable<ActionContext<any>>) => Observable<ActionCompletion<any, Error>>;
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just thrown an error
 */
export declare function ofActionErrored(...allowedTypes: any[]): (o: Observable<ActionContext<any>>) => Observable<any>;
