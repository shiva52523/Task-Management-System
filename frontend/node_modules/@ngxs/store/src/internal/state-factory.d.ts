import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { NgxsConfig } from '../symbols';
import { MappedStore, StateClass, StatesAndDefaults, StatesByName } from './internals';
import { InternalActions } from '../actions-stream';
import { InternalDispatchedActionResults } from '../internal/dispatcher';
import { StateContextFactory } from '../internal/state-context-factory';
import { InternalStateOperations } from '../internal/state-operations';
/**
 * State factory class
 * @ignore
 */
export declare class StateFactory {
    private _injector;
    private _config;
    private _parentFactory;
    private _actions;
    private _actionResults;
    private _stateContextFactory;
    private _internalStateOperations;
    private _connected;
    private _states;
    private _statesByName;
    constructor(_injector: Injector, _config: NgxsConfig, _parentFactory: StateFactory, _actions: InternalActions, _actionResults: InternalDispatchedActionResults, _stateContextFactory: StateContextFactory, _internalStateOperations: InternalStateOperations);
    readonly states: MappedStore[];
    readonly statesByName: StatesByName;
    private readonly stateTreeRef;
    private static cloneDefaults;
    private static checkStatesAreValid;
    /**
     * Add a new state to the global defs.
     */
    add(stateClasses: StateClass[]): MappedStore[];
    /**
     * Add a set of states to the store and return the defaults
     */
    addAndReturnDefaults(stateClasses: StateClass[]): StatesAndDefaults;
    /**
     * Bind the actions to the handlers
     */
    connectActionHandlers(): void;
    /**
     * Invoke actions on the states.
     */
    invokeActions(actions$: InternalActions, action: any): Observable<any[]>;
    private addToStatesMap;
    private addRuntimeInfoToMeta;
    /**
     * @description
     * the method checks if the state has already been added to the tree
     * and completed the life cycle
     * @param name
     * @param path
     */
    private hasBeenMountedAndBootstrapped;
}
