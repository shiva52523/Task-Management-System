/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, Injector } from '@angular/core';
import { getActionTypeFromInstance, Store } from '@ngxs/store';
import { tap } from 'rxjs/operators';
import { NGXS_DEVTOOLS_OPTIONS } from './symbols';
/**
 * Adds support for the Redux Devtools extension:
 * http://extension.remotedev.io/
 */
export class NgxsReduxDevtoolsPlugin {
    /**
     * @param {?} _options
     * @param {?} _injector
     */
    constructor(_options, _injector) {
        this._options = _options;
        this._injector = _injector;
        this.devtoolsExtension = null;
        this.windowObj = typeof window !== 'undefined' ? window : {};
        /** @type {?} */
        const globalDevtools = this.windowObj['__REDUX_DEVTOOLS_EXTENSION__'] || this.windowObj['devToolsExtension'];
        if (globalDevtools) {
            this.devtoolsExtension = (/** @type {?} */ (globalDevtools.connect(_options)));
            this.devtoolsExtension.subscribe((/**
             * @param {?} a
             * @return {?}
             */
            a => this.dispatched(a)));
        }
    }
    /**
     * Middleware handle function
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    handle(state, action, next) {
        /** @type {?} */
        const isDisabled = this._options && this._options.disabled;
        if (!this.devtoolsExtension || isDisabled) {
            return next(state, action);
        }
        return next(state, action).pipe(tap((/**
         * @param {?} newState
         * @return {?}
         */
        newState => {
            // if init action, send initial state to dev tools
            /** @type {?} */
            const isInitAction = getActionTypeFromInstance(action) === '@@INIT';
            if (isInitAction) {
                (/** @type {?} */ (this.devtoolsExtension)).init(state);
            }
            else {
                /** @type {?} */
                const type = getActionTypeFromInstance(action);
                (/** @type {?} */ (this.devtoolsExtension)).send(Object.assign({}, action, { type }), newState);
            }
        })));
    }
    /**
     * Handle the action from the dev tools subscription
     * @param {?} action
     * @return {?}
     */
    dispatched(action) {
        // Lazy get the store for circular depedency issues
        /** @type {?} */
        const store = this._injector.get(Store);
        if (action.type === 'DISPATCH') {
            if (action.payload.type === 'JUMP_TO_ACTION' ||
                action.payload.type === 'JUMP_TO_STATE') {
                /** @type {?} */
                const prevState = JSON.parse(action.state);
                store.reset(prevState);
            }
            else if (action.payload.type === 'TOGGLE_ACTION') {
                console.warn('Skip is not supported at this time.');
            }
            else if (action.payload.type === 'IMPORT_STATE') {
                const { actionsById, computedStates, currentStateIndex } = action.payload.nextLiftedState;
                (/** @type {?} */ (this.devtoolsExtension)).init(computedStates[0].state);
                Object.keys(actionsById)
                    .filter((/**
                 * @param {?} actionId
                 * @return {?}
                 */
                actionId => actionId !== '0'))
                    .forEach((/**
                 * @param {?} actionId
                 * @return {?}
                 */
                actionId => (/** @type {?} */ (this.devtoolsExtension)).send(actionsById[actionId], computedStates[actionId].state)));
                store.reset(computedStates[currentStateIndex].state);
            }
        }
        else if (action.type === 'ACTION') {
            /** @type {?} */
            const actionPayload = JSON.parse(action.payload);
            store.dispatch(actionPayload);
        }
    }
}
NgxsReduxDevtoolsPlugin.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxsReduxDevtoolsPlugin.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGXS_DEVTOOLS_OPTIONS,] }] },
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype.devtoolsExtension;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype.windowObj;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype._options;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype._injector;
}
//# sourceMappingURL=data:application/json;base64,