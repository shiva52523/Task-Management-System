{"version":3,"file":"ngxs-logger-plugin.js.map","sources":["ng://@ngxs/logger-plugin/src/symbols.ts","ng://@ngxs/logger-plugin/src/internals.ts","ng://@ngxs/logger-plugin/src/logger.plugin.ts","ng://@ngxs/logger-plugin/src/logger.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface NgxsLoggerPluginOptions {\r\n  /** Auto expand logged actions  */\r\n  collapsed?: boolean;\r\n\r\n  /** Provide alternate console.log implementation */\r\n  logger?: any;\r\n\r\n  /** Disable the logger. Useful for prod mode. */\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const NGXS_LOGGER_PLUGIN_OPTIONS = new InjectionToken('NGXS_LOGGER_PLUGIN_OPTIONS');\r\n","export const repeat = (str: string, times: number) => new Array(times + 1).join(str);\r\nexport const pad = (num: number, maxLength: number) =>\r\n  repeat('0', maxLength - num.toString().length) + num;\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { tap, finalize, catchError } from 'rxjs/operators';\r\n\r\nimport { NgxsPlugin, getActionTypeFromInstance, NgxsNextPluginFn } from '@ngxs/store';\r\n\r\nimport { NGXS_LOGGER_PLUGIN_OPTIONS, NgxsLoggerPluginOptions } from './symbols';\r\nimport { pad } from './internals';\r\n\r\n@Injectable()\r\nexport class NgxsLoggerPlugin implements NgxsPlugin {\r\n  constructor(@Inject(NGXS_LOGGER_PLUGIN_OPTIONS) private _options: NgxsLoggerPluginOptions) {}\r\n\r\n  handle(state: any, event: any, next: NgxsNextPluginFn) {\r\n    if (this._options.disabled) {\r\n      return next(state, event);\r\n    }\r\n\r\n    const options = this._options || <any>{};\r\n    const logger = options.logger || console;\r\n    const actionName = getActionTypeFromInstance(event);\r\n    const time = new Date();\r\n\r\n    // tslint:disable-next-line\r\n    const formattedTime = ` @ ${pad(time.getHours(), 2)}:${pad(time.getMinutes(), 2)}:${pad(\r\n      time.getSeconds(),\r\n      2\r\n    )}.${pad(time.getMilliseconds(), 3)}`;\r\n\r\n    const message = `action ${actionName}${formattedTime}`;\r\n    const startMessage = options.collapsed ? logger.groupCollapsed : logger.group;\r\n\r\n    try {\r\n      startMessage.call(logger, message);\r\n    } catch (e) {\r\n      console.log(message);\r\n    }\r\n\r\n    if (typeof event.payload !== 'undefined') {\r\n      this.log('payload', 'color: #9E9E9E; font-weight: bold', event.payload);\r\n    }\r\n\r\n    this.log('prev state', 'color: #9E9E9E; font-weight: bold', state);\r\n\r\n    return next(state, event).pipe(\r\n      tap(nextState => {\r\n        this.log('next state', 'color: #4CAF50; font-weight: bold', nextState);\r\n      }),\r\n      catchError(error => {\r\n        this.log('error', 'color: #FD8182; font-weight: bold', error);\r\n\r\n        throw error;\r\n      }),\r\n      finalize(() => {\r\n        try {\r\n          logger.groupEnd();\r\n        } catch (e) {\r\n          logger.log('ââ log end ââ');\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  log(title: string, color: string, payload: any) {\r\n    const options = this._options || <any>{};\r\n    const logger = options.logger || console;\r\n\r\n    if (this.isIE()) {\r\n      logger.log(title, payload);\r\n    } else {\r\n      logger.log('%c ' + title, color, payload);\r\n    }\r\n  }\r\n\r\n  isIE(): boolean {\r\n    const ua =\r\n      typeof window !== 'undefined' && window.navigator.userAgent\r\n        ? window.navigator.userAgent\r\n        : '';\r\n    let ms_ie = false;\r\n\r\n    const old_ie = ua.indexOf('MSIE ');\r\n    const new_ie = ua.indexOf('Trident/');\r\n\r\n    if (old_ie > -1 || new_ie > -1) {\r\n      ms_ie = true;\r\n    }\r\n\r\n    return ms_ie;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\r\nimport { NGXS_PLUGINS } from '@ngxs/store';\r\nimport { NgxsLoggerPluginOptions, NGXS_LOGGER_PLUGIN_OPTIONS } from './symbols';\r\nimport { NgxsLoggerPlugin } from './logger.plugin';\r\n\r\nexport const USER_OPTIONS = new InjectionToken('LOGGER_USER_OPTIONS');\r\n\r\nexport function loggerOptionsFactory(options: NgxsLoggerPluginOptions) {\r\n  const defaultLoggerOptions: NgxsLoggerPluginOptions = {\r\n    logger: console,\r\n    collapsed: false,\r\n    disabled: false\r\n  };\r\n\r\n  return {\r\n    ...defaultLoggerOptions,\r\n    ...options\r\n  };\r\n}\r\n\r\n@NgModule()\r\nexport class NgxsLoggerPluginModule {\r\n  static forRoot(options?: NgxsLoggerPluginOptions): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsLoggerPluginModule,\r\n      providers: [\r\n        {\r\n          provide: NGXS_PLUGINS,\r\n          useClass: NgxsLoggerPlugin,\r\n          multi: true\r\n        },\r\n        {\r\n          provide: USER_OPTIONS,\r\n          useValue: options\r\n        },\r\n        {\r\n          provide: NGXS_LOGGER_PLUGIN_OPTIONS,\r\n          useFactory: loggerOptionsFactory,\r\n          deps: [USER_OPTIONS]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}
