/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { tap, finalize, catchError } from 'rxjs/operators';
import { getActionTypeFromInstance } from '@ngxs/store';
import { NGXS_LOGGER_PLUGIN_OPTIONS } from './symbols';
import { pad } from './internals';
export class NgxsLoggerPlugin {
    /**
     * @param {?} _options
     */
    constructor(_options) {
        this._options = _options;
    }
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    handle(state, event, next) {
        if (this._options.disabled) {
            return next(state, event);
        }
        /** @type {?} */
        const options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        const logger = options.logger || console;
        /** @type {?} */
        const actionName = getActionTypeFromInstance(event);
        /** @type {?} */
        const time = new Date();
        // tslint:disable-next-line
        /** @type {?} */
        const formattedTime = ` @ ${pad(time.getHours(), 2)}:${pad(time.getMinutes(), 2)}:${pad(time.getSeconds(), 2)}.${pad(time.getMilliseconds(), 3)}`;
        /** @type {?} */
        const message = `action ${actionName}${formattedTime}`;
        /** @type {?} */
        const startMessage = options.collapsed ? logger.groupCollapsed : logger.group;
        try {
            startMessage.call(logger, message);
        }
        catch (e) {
            console.log(message);
        }
        if (typeof event.payload !== 'undefined') {
            this.log('payload', 'color: #9E9E9E; font-weight: bold', event.payload);
        }
        this.log('prev state', 'color: #9E9E9E; font-weight: bold', state);
        return next(state, event).pipe(tap((/**
         * @param {?} nextState
         * @return {?}
         */
        nextState => {
            this.log('next state', 'color: #4CAF50; font-weight: bold', nextState);
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.log('error', 'color: #FD8182; font-weight: bold', error);
            throw error;
        })), finalize((/**
         * @return {?}
         */
        () => {
            try {
                logger.groupEnd();
            }
            catch (e) {
                logger.log('—— log end ——');
            }
        })));
    }
    /**
     * @param {?} title
     * @param {?} color
     * @param {?} payload
     * @return {?}
     */
    log(title, color, payload) {
        /** @type {?} */
        const options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        const logger = options.logger || console;
        if (this.isIE()) {
            logger.log(title, payload);
        }
        else {
            logger.log('%c ' + title, color, payload);
        }
    }
    /**
     * @return {?}
     */
    isIE() {
        /** @type {?} */
        const ua = typeof window !== 'undefined' && window.navigator.userAgent
            ? window.navigator.userAgent
            : '';
        /** @type {?} */
        let ms_ie = false;
        /** @type {?} */
        const old_ie = ua.indexOf('MSIE ');
        /** @type {?} */
        const new_ie = ua.indexOf('Trident/');
        if (old_ie > -1 || new_ie > -1) {
            ms_ie = true;
        }
        return ms_ie;
    }
}
NgxsLoggerPlugin.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxsLoggerPlugin.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGXS_LOGGER_PLUGIN_OPTIONS,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsLoggerPlugin.prototype._options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL2xvZ2dlci1wbHVnaW4vIiwic291cmNlcyI6WyJzcmMvbG9nZ2VyLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0QsT0FBTyxFQUFjLHlCQUF5QixFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUV0RixPQUFPLEVBQUUsMEJBQTBCLEVBQTJCLE1BQU0sV0FBVyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHbEMsTUFBTSxPQUFPLGdCQUFnQjs7OztJQUMzQixZQUF3RCxRQUFpQztRQUFqQyxhQUFRLEdBQVIsUUFBUSxDQUF5QjtJQUFHLENBQUM7Ozs7Ozs7SUFFN0YsTUFBTSxDQUFDLEtBQVUsRUFBRSxLQUFVLEVBQUUsSUFBc0I7UUFDbkQsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRTtZQUMxQixPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0I7O2NBRUssT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksbUJBQUssRUFBRSxFQUFBOztjQUNsQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPOztjQUNsQyxVQUFVLEdBQUcseUJBQXlCLENBQUMsS0FBSyxDQUFDOztjQUM3QyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7OztjQUdqQixhQUFhLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxD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bXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgdGFwLCBmaW5hbGl6ZSwgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IE5neHNQbHVnaW4sIGdldEFjdGlvblR5cGVGcm9tSW5zdGFuY2UsIE5neHNOZXh0UGx1Z2luRm4gfSBmcm9tICdAbmd4cy9zdG9yZSc7XHJcblxyXG5pbXBvcnQgeyBOR1hTX0xPR0dFUl9QTFVHSU5fT1BUSU9OUywgTmd4c0xvZ2dlclBsdWdpbk9wdGlvbnMgfSBmcm9tICcuL3N5bWJvbHMnO1xyXG5pbXBvcnQgeyBwYWQgfSBmcm9tICcuL2ludGVybmFscyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOZ3hzTG9nZ2VyUGx1Z2luIGltcGxlbWVudHMgTmd4c1BsdWdpbiB7XHJcbiAgY29uc3RydWN0b3IoQEluamVjdChOR1hTX0xPR0dFUl9QTFVHSU5fT1BUSU9OUykgcHJpdmF0ZSBfb3B0aW9uczogTmd4c0xvZ2dlclBsdWdpbk9wdGlvbnMpIHt9XHJcblxyXG4gIGhhbmRsZShzdGF0ZTogYW55LCBldmVudDogYW55LCBuZXh0OiBOZ3hzTmV4dFBsdWdpbkZuKSB7XHJcbiAgICBpZiAodGhpcy5fb3B0aW9ucy5kaXNhYmxlZCkge1xyXG4gICAgICByZXR1cm4gbmV4dChzdGF0ZSwgZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zIHx8IDxhbnk+e307XHJcbiAgICBjb25zdCBsb2dnZXIgPSBvcHRpb25zLmxvZ2dlciB8fCBjb25zb2xlO1xyXG4gICAgY29uc3QgYWN0aW9uTmFtZSA9IGdldEFjdGlvblR5cGVGcm9tSW5zdGFuY2UoZXZlbnQpO1xyXG4gICAgY29uc3QgdGltZSA9IG5ldyBEYXRlKCk7XHJcblxyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICBjb25zdCBmb3JtYXR0ZWRUaW1lID0gYCBAICR7cGFkKHRpbWUuZ2V0SG91cnMoKSwgMil9OiR7cGFkKHRpbWUuZ2V0TWludXRlcygpLCAyKX06JHtwYWQoXHJcbiAgICAgIHRpbWUuZ2V0U2Vjb25kcygpLFxyXG4gICAgICAyXHJcbiAgICApfS4ke3BhZCh0aW1lLmdldE1pbGxpc2Vjb25kcygpLCAzKX1gO1xyXG5cclxuICAgIGNvbnN0IG1lc3NhZ2UgPSBgYWN0aW9uICR7YWN0aW9uTmFtZX0ke2Zvcm1hdHRlZFRpbWV9YDtcclxuICAgIGNvbnN0IHN0YXJ0TWVzc2FnZSA9IG9wdGlvbnMuY29sbGFwc2VkID8gbG9nZ2VyLmdyb3VwQ29sbGFwc2VkIDogbG9nZ2VyLmdyb3VwO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHN0YXJ0TWVzc2FnZS5jYWxsKGxvZ2dlciwgbWVzc2FnZSk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgZXZlbnQucGF5bG9hZCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgdGhpcy5sb2coJ3BheWxvYWQnLCAnY29sb3I6ICM5RTlFOUU7IGZvbnQtd2VpZ2h0OiBib2xkJywgZXZlbnQucGF5bG9hZCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5sb2coJ3ByZXYgc3RhdGUnLCAnY29sb3I6ICM5RTlFOUU7IGZvbnQtd2VpZ2h0OiBib2xkJywgc3RhdGUpO1xyXG5cclxuICAgIHJldHVybiBuZXh0KHN0YXRlLCBldmVudCkucGlwZShcclxuICAgICAgdGFwKG5leHRTdGF0ZSA9PiB7XHJcbiAgICAgICAgdGhpcy5sb2coJ25leHQgc3RhdGUnLCAnY29sb3I6ICM0Q0FGNTA7IGZvbnQtd2VpZ2h0OiBib2xkJywgbmV4dFN0YXRlKTtcclxuICAgICAgfSksXHJcbiAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT4ge1xyXG4gICAgICAgIHRoaXMubG9nKCdlcnJvcicsICdjb2xvcjogI0ZEODE4MjsgZm9udC13ZWlnaHQ6IGJvbGQnLCBlcnJvcik7XHJcblxyXG4gICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICB9KSxcclxuICAgICAgZmluYWxpemUoKCkgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBsb2dnZXIuZ3JvdXBFbmQoKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICBsb2dnZXIubG9nKCfigJTigJQgbG9nIGVuZCDigJTigJQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgbG9nKHRpdGxlOiBzdHJpbmcsIGNvbG9yOiBzdHJpbmcsIHBheWxvYWQ6IGFueSkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnMgfHwgPGFueT57fTtcclxuICAgIGNvbnN0IGxvZ2dlciA9IG9wdGlvbnMubG9nZ2VyIHx8IGNvbnNvbGU7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNJRSgpKSB7XHJcbiAgICAgIGxvZ2dlci5sb2codGl0bGUsIHBheWxvYWQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbG9nZ2VyLmxvZygnJWMgJyArIHRpdGxlLCBjb2xvciwgcGF5bG9hZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc0lFKCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgdWEgPVxyXG4gICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudFxyXG4gICAgICAgID8gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnRcclxuICAgICAgICA6ICcnO1xyXG4gICAgbGV0IG1zX2llID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3Qgb2xkX2llID0gdWEuaW5kZXhPZignTVNJRSAnKTtcclxuICAgIGNvbnN0IG5ld19pZSA9IHVhLmluZGV4T2YoJ1RyaWRlbnQvJyk7XHJcblxyXG4gICAgaWYgKG9sZF9pZSA+IC0xIHx8IG5ld19pZSA+IC0xKSB7XHJcbiAgICAgIG1zX2llID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbXNfaWU7XHJcbiAgfVxyXG59XHJcbiJdfQ==