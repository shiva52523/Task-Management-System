(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operators'), require('@ngxs/store')) :
    typeof define === 'function' && define.amd ? define('@ngxs/logger-plugin', ['exports', '@angular/core', 'rxjs/operators', '@ngxs/store'], factory) :
    (factory((global.ngxs = global.ngxs || {}, global.ngxs['logger-plugin'] = {}),global.ng.core,global.rxjs.operators,global['ngxs-store']));
}(this, (function (exports,core,operators,store) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NGXS_LOGGER_PLUGIN_OPTIONS = new core.InjectionToken('NGXS_LOGGER_PLUGIN_OPTIONS');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var repeat = ( /**
     * @param {?} str
     * @param {?} times
     * @return {?}
     */function (str, times) { return new Array(times + 1).join(str); });
    /** @type {?} */
    var pad = ( /**
     * @param {?} num
     * @param {?} maxLength
     * @return {?}
     */function (num, maxLength) {
        return repeat('0', maxLength - num.toString().length) + num;
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxsLoggerPlugin = /** @class */ (function () {
        function NgxsLoggerPlugin(_options) {
            this._options = _options;
        }
        /**
         * @param {?} state
         * @param {?} event
         * @param {?} next
         * @return {?}
         */
        NgxsLoggerPlugin.prototype.handle = /**
         * @param {?} state
         * @param {?} event
         * @param {?} next
         * @return {?}
         */
            function (state, event, next) {
                var _this = this;
                if (this._options.disabled) {
                    return next(state, event);
                }
                /** @type {?} */
                var options = this._options || ( /** @type {?} */({}));
                /** @type {?} */
                var logger = options.logger || console;
                /** @type {?} */
                var actionName = store.getActionTypeFromInstance(event);
                /** @type {?} */
                var time = new Date();
                // tslint:disable-next-line
                /** @type {?} */
                var formattedTime = " @ " + pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
                /** @type {?} */
                var message = "action " + actionName + formattedTime;
                /** @type {?} */
                var startMessage = options.collapsed ? logger.groupCollapsed : logger.group;
                try {
                    startMessage.call(logger, message);
                }
                catch (e) {
                    console.log(message);
                }
                if (typeof event.payload !== 'undefined') {
                    this.log('payload', 'color: #9E9E9E; font-weight: bold', event.payload);
                }
                this.log('prev state', 'color: #9E9E9E; font-weight: bold', state);
                return next(state, event).pipe(operators.tap(( /**
                 * @param {?} nextState
                 * @return {?}
                 */function (nextState) {
                    _this.log('next state', 'color: #4CAF50; font-weight: bold', nextState);
                })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.log('error', 'color: #FD8182; font-weight: bold', error);
                    throw error;
                })), operators.finalize(( /**
                 * @return {?}
                 */function () {
                    try {
                        logger.groupEnd();
                    }
                    catch (e) {
                        logger.log('—— log end ——');
                    }
                })));
            };
        /**
         * @param {?} title
         * @param {?} color
         * @param {?} payload
         * @return {?}
         */
        NgxsLoggerPlugin.prototype.log = /**
         * @param {?} title
         * @param {?} color
         * @param {?} payload
         * @return {?}
         */
            function (title, color, payload) {
                /** @type {?} */
                var options = this._options || ( /** @type {?} */({}));
                /** @type {?} */
                var logger = options.logger || console;
                if (this.isIE()) {
                    logger.log(title, payload);
                }
                else {
                    logger.log('%c ' + title, color, payload);
                }
            };
        /**
         * @return {?}
         */
        NgxsLoggerPlugin.prototype.isIE = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var ua = typeof window !== 'undefined' && window.navigator.userAgent
                    ? window.navigator.userAgent
                    : '';
                /** @type {?} */
                var ms_ie = false;
                /** @type {?} */
                var old_ie = ua.indexOf('MSIE ');
                /** @type {?} */
                var new_ie = ua.indexOf('Trident/');
                if (old_ie > -1 || new_ie > -1) {
                    ms_ie = true;
                }
                return ms_ie;
            };
        NgxsLoggerPlugin.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        NgxsLoggerPlugin.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [NGXS_LOGGER_PLUGIN_OPTIONS,] }] }
            ];
        };
        return NgxsLoggerPlugin;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var USER_OPTIONS = new core.InjectionToken('LOGGER_USER_OPTIONS');
    /**
     * @param {?} options
     * @return {?}
     */
    function loggerOptionsFactory(options) {
        /** @type {?} */
        var defaultLoggerOptions = {
            logger: console,
            collapsed: false,
            disabled: false
        };
        return __assign({}, defaultLoggerOptions, options);
    }
    var NgxsLoggerPluginModule = /** @class */ (function () {
        function NgxsLoggerPluginModule() {
        }
        /**
         * @param {?=} options
         * @return {?}
         */
        NgxsLoggerPluginModule.forRoot = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                return {
                    ngModule: NgxsLoggerPluginModule,
                    providers: [
                        {
                            provide: store.NGXS_PLUGINS,
                            useClass: NgxsLoggerPlugin,
                            multi: true
                        },
                        {
                            provide: USER_OPTIONS,
                            useValue: options
                        },
                        {
                            provide: NGXS_LOGGER_PLUGIN_OPTIONS,
                            useFactory: loggerOptionsFactory,
                            deps: [USER_OPTIONS]
                        }
                    ]
                };
            };
        NgxsLoggerPluginModule.decorators = [
            { type: core.NgModule }
        ];
        return NgxsLoggerPluginModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxsLoggerPluginModule = NgxsLoggerPluginModule;
    exports.NgxsLoggerPlugin = NgxsLoggerPlugin;
    exports.NGXS_LOGGER_PLUGIN_OPTIONS = NGXS_LOGGER_PLUGIN_OPTIONS;
    exports.ɵa = USER_OPTIONS;
    exports.ɵb = loggerOptionsFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngxs-logger-plugin.umd.js.map