/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { tap, finalize, catchError } from 'rxjs/operators';
import { getActionTypeFromInstance } from '@ngxs/store';
import { NGXS_LOGGER_PLUGIN_OPTIONS } from './symbols';
import { pad } from './internals';
var NgxsLoggerPlugin = /** @class */ (function () {
    function NgxsLoggerPlugin(_options) {
        this._options = _options;
    }
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    NgxsLoggerPlugin.prototype.handle = /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    function (state, event, next) {
        var _this = this;
        if (this._options.disabled) {
            return next(state, event);
        }
        /** @type {?} */
        var options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        var logger = options.logger || console;
        /** @type {?} */
        var actionName = getActionTypeFromInstance(event);
        /** @type {?} */
        var time = new Date();
        // tslint:disable-next-line
        /** @type {?} */
        var formattedTime = " @ " + pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
        /** @type {?} */
        var message = "action " + actionName + formattedTime;
        /** @type {?} */
        var startMessage = options.collapsed ? logger.groupCollapsed : logger.group;
        try {
            startMessage.call(logger, message);
        }
        catch (e) {
            console.log(message);
        }
        if (typeof event.payload !== 'undefined') {
            this.log('payload', 'color: #9E9E9E; font-weight: bold', event.payload);
        }
        this.log('prev state', 'color: #9E9E9E; font-weight: bold', state);
        return next(state, event).pipe(tap((/**
         * @param {?} nextState
         * @return {?}
         */
        function (nextState) {
            _this.log('next state', 'color: #4CAF50; font-weight: bold', nextState);
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.log('error', 'color: #FD8182; font-weight: bold', error);
            throw error;
        })), finalize((/**
         * @return {?}
         */
        function () {
            try {
                logger.groupEnd();
            }
            catch (e) {
                logger.log('—— log end ——');
            }
        })));
    };
    /**
     * @param {?} title
     * @param {?} color
     * @param {?} payload
     * @return {?}
     */
    NgxsLoggerPlugin.prototype.log = /**
     * @param {?} title
     * @param {?} color
     * @param {?} payload
     * @return {?}
     */
    function (title, color, payload) {
        /** @type {?} */
        var options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        var logger = options.logger || console;
        if (this.isIE()) {
            logger.log(title, payload);
        }
        else {
            logger.log('%c ' + title, color, payload);
        }
    };
    /**
     * @return {?}
     */
    NgxsLoggerPlugin.prototype.isIE = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ua = typeof window !== 'undefined' && window.navigator.userAgent
            ? window.navigator.userAgent
            : '';
        /** @type {?} */
        var ms_ie = false;
        /** @type {?} */
        var old_ie = ua.indexOf('MSIE ');
        /** @type {?} */
        var new_ie = ua.indexOf('Trident/');
        if (old_ie > -1 || new_ie > -1) {
            ms_ie = true;
        }
        return ms_ie;
    };
    NgxsLoggerPlugin.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgxsLoggerPlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGXS_LOGGER_PLUGIN_OPTIONS,] }] }
    ]; };
    return NgxsLoggerPlugin;
}());
export { NgxsLoggerPlugin };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsLoggerPlugin.prototype._options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL2xvZ2dlci1wbHVnaW4vIiwic291cmNlcyI6WyJzcmMvbG9nZ2VyLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0QsT0FBTyxFQUFjLHlCQUF5QixFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUV0RixPQUFPLEVBQUUsMEJBQTBCLEVBQTJCLE1BQU0sV0FBVyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFbEM7SUFFRSwwQkFBd0QsUUFBaUM7UUFBakMsYUFBUSxHQUFSLFFBQVEsQ0FBeUI7SUFBRyxDQUFDOzs7Ozs7O0lBRTdGLGlDQUFNOzs7Ozs7SUFBTixVQUFPLEtBQVUsRUFBRSxLQUFVLEVBQUUsSUFBc0I7UUFBckQsaUJBZ0RDO1FBL0NDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzNCOztZQUVLLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLG1CQUFLLEVBQUUsRUFBQTs7WUFDbEMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTzs7WUFDbEMsVUFBVSxHQUFHLHlCQUF5QixDQUFDLEtBQUssQ0FBQzs7WUFDN0MsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFOzs7WUFHakIsYUFBYSxHQUFHLFFBQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFJLEdB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O0lBQ2Ysb0NBQTZFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHRhcCwgZmluYWxpemUsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBOZ3hzUGx1Z2luLCBnZXRBY3Rpb25UeXBlRnJvbUluc3RhbmNlLCBOZ3hzTmV4dFBsdWdpbkZuIH0gZnJvbSAnQG5neHMvc3RvcmUnO1xyXG5cclxuaW1wb3J0IHsgTkdYU19MT0dHRVJfUExVR0lOX09QVElPTlMsIE5neHNMb2dnZXJQbHVnaW5PcHRpb25zIH0gZnJvbSAnLi9zeW1ib2xzJztcclxuaW1wb3J0IHsgcGFkIH0gZnJvbSAnLi9pbnRlcm5hbHMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmd4c0xvZ2dlclBsdWdpbiBpbXBsZW1lbnRzIE5neHNQbHVnaW4ge1xyXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoTkdYU19MT0dHRVJfUExVR0lOX09QVElPTlMpIHByaXZhdGUgX29wdGlvbnM6IE5neHNMb2dnZXJQbHVnaW5PcHRpb25zKSB7fVxyXG5cclxuICBoYW5kbGUoc3RhdGU6IGFueSwgZXZlbnQ6IGFueSwgbmV4dDogTmd4c05leHRQbHVnaW5Gbikge1xyXG4gICAgaWYgKHRoaXMuX29wdGlvbnMuZGlzYWJsZWQpIHtcclxuICAgICAgcmV0dXJuIG5leHQoc3RhdGUsIGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fb3B0aW9ucyB8fCA8YW55Pnt9O1xyXG4gICAgY29uc3QgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXIgfHwgY29uc29sZTtcclxuICAgIGNvbnN0IGFjdGlvbk5hbWUgPSBnZXRBY3Rpb25UeXBlRnJvbUluc3RhbmNlKGV2ZW50KTtcclxuICAgIGNvbnN0IHRpbWUgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gICAgY29uc3QgZm9ybWF0dGVkVGltZSA9IGAgQCAke3BhZCh0aW1lLmdldEhvdXJzKCksIDIpfToke3BhZCh0aW1lLmdldE1pbnV0ZXMoKSwgMil9OiR7cGFkKFxyXG4gICAgICB0aW1lLmdldFNlY29uZHMoKSxcclxuICAgICAgMlxyXG4gICAgKX0uJHtwYWQodGltZS5nZXRNaWxsaXNlY29uZHMoKSwgMyl9YDtcclxuXHJcbiAgICBjb25zdCBtZXNzYWdlID0gYGFjdGlvbiAke2FjdGlvbk5hbWV9JHtmb3JtYXR0ZWRUaW1lfWA7XHJcbiAgICBjb25zdCBzdGFydE1lc3NhZ2UgPSBvcHRpb25zLmNvbGxhcHNlZCA/IGxvZ2dlci5ncm91cENvbGxhcHNlZCA6IGxvZ2dlci5ncm91cDtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBzdGFydE1lc3NhZ2UuY2FsbChsb2dnZXIsIG1lc3NhZ2UpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGV2ZW50LnBheWxvYWQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRoaXMubG9nKCdwYXlsb2FkJywgJ2NvbG9yOiAjOUU5RTlFOyBmb250LXdlaWdodDogYm9sZCcsIGV2ZW50LnBheWxvYWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubG9nKCdwcmV2IHN0YXRlJywgJ2NvbG9yOiAjOUU5RTlFOyBmb250LXdlaWdodDogYm9sZCcsIHN0YXRlKTtcclxuXHJcbiAgICByZXR1cm4gbmV4dChzdGF0ZSwgZXZlbnQpLnBpcGUoXHJcbiAgICAgIHRhcChuZXh0U3RhdGUgPT4ge1xyXG4gICAgICAgIHRoaXMubG9nKCduZXh0IHN0YXRlJywgJ2NvbG9yOiAjNENBRjUwOyBmb250LXdlaWdodDogYm9sZCcsIG5leHRTdGF0ZSk7XHJcbiAgICAgIH0pLFxyXG4gICAgICBjYXRjaEVycm9yKGVycm9yID0+IHtcclxuICAgICAgICB0aGlzLmxvZygnZXJyb3InLCAnY29sb3I6ICNGRDgxODI7IGZvbnQtd2VpZ2h0OiBib2xkJywgZXJyb3IpO1xyXG5cclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgfSksXHJcbiAgICAgIGZpbmFsaXplKCgpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgbG9nZ2VyLmdyb3VwRW5kKCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgbG9nZ2VyLmxvZygn4oCU4oCUIGxvZyBlbmQg4oCU4oCUJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGxvZyh0aXRsZTogc3RyaW5nLCBjb2xvcjogc3RyaW5nLCBwYXlsb2FkOiBhbnkpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zIHx8IDxhbnk+e307XHJcbiAgICBjb25zdCBsb2dnZXIgPSBvcHRpb25zLmxvZ2dlciB8fCBjb25zb2xlO1xyXG5cclxuICAgIGlmICh0aGlzLmlzSUUoKSkge1xyXG4gICAgICBsb2dnZXIubG9nKHRpdGxlLCBwYXlsb2FkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxvZ2dlci5sb2coJyVjICcgKyB0aXRsZSwgY29sb3IsIHBheWxvYWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaXNJRSgpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHVhID1cclxuICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnRcclxuICAgICAgICA/IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50XHJcbiAgICAgICAgOiAnJztcclxuICAgIGxldCBtc19pZSA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0IG9sZF9pZSA9IHVhLmluZGV4T2YoJ01TSUUgJyk7XHJcbiAgICBjb25zdCBuZXdfaWUgPSB1YS5pbmRleE9mKCdUcmlkZW50LycpO1xyXG5cclxuICAgIGlmIChvbGRfaWUgPiAtMSB8fCBuZXdfaWUgPiAtMSkge1xyXG4gICAgICBtc19pZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1zX2llO1xyXG4gIH1cclxufVxyXG4iXX0=