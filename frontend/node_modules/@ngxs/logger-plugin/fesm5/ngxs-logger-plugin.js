import { __assign } from 'tslib';
import { InjectionToken, Injectable, Inject, NgModule } from '@angular/core';
import { tap, finalize, catchError } from 'rxjs/operators';
import { getActionTypeFromInstance, NGXS_PLUGINS } from '@ngxs/store';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NGXS_LOGGER_PLUGIN_OPTIONS = new InjectionToken('NGXS_LOGGER_PLUGIN_OPTIONS');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var repeat = (/**
 * @param {?} str
 * @param {?} times
 * @return {?}
 */
function (str, times) { return new Array(times + 1).join(str); });
/** @type {?} */
var pad = (/**
 * @param {?} num
 * @param {?} maxLength
 * @return {?}
 */
function (num, maxLength) {
    return repeat('0', maxLength - num.toString().length) + num;
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxsLoggerPlugin = /** @class */ (function () {
    function NgxsLoggerPlugin(_options) {
        this._options = _options;
    }
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    NgxsLoggerPlugin.prototype.handle = /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    function (state, event, next) {
        var _this = this;
        if (this._options.disabled) {
            return next(state, event);
        }
        /** @type {?} */
        var options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        var logger = options.logger || console;
        /** @type {?} */
        var actionName = getActionTypeFromInstance(event);
        /** @type {?} */
        var time = new Date();
        // tslint:disable-next-line
        /** @type {?} */
        var formattedTime = " @ " + pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
        /** @type {?} */
        var message = "action " + actionName + formattedTime;
        /** @type {?} */
        var startMessage = options.collapsed ? logger.groupCollapsed : logger.group;
        try {
            startMessage.call(logger, message);
        }
        catch (e) {
            console.log(message);
        }
        if (typeof event.payload !== 'undefined') {
            this.log('payload', 'color: #9E9E9E; font-weight: bold', event.payload);
        }
        this.log('prev state', 'color: #9E9E9E; font-weight: bold', state);
        return next(state, event).pipe(tap((/**
         * @param {?} nextState
         * @return {?}
         */
        function (nextState) {
            _this.log('next state', 'color: #4CAF50; font-weight: bold', nextState);
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.log('error', 'color: #FD8182; font-weight: bold', error);
            throw error;
        })), finalize((/**
         * @return {?}
         */
        function () {
            try {
                logger.groupEnd();
            }
            catch (e) {
                logger.log('—— log end ——');
            }
        })));
    };
    /**
     * @param {?} title
     * @param {?} color
     * @param {?} payload
     * @return {?}
     */
    NgxsLoggerPlugin.prototype.log = /**
     * @param {?} title
     * @param {?} color
     * @param {?} payload
     * @return {?}
     */
    function (title, color, payload) {
        /** @type {?} */
        var options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        var logger = options.logger || console;
        if (this.isIE()) {
            logger.log(title, payload);
        }
        else {
            logger.log('%c ' + title, color, payload);
        }
    };
    /**
     * @return {?}
     */
    NgxsLoggerPlugin.prototype.isIE = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ua = typeof window !== 'undefined' && window.navigator.userAgent
            ? window.navigator.userAgent
            : '';
        /** @type {?} */
        var ms_ie = false;
        /** @type {?} */
        var old_ie = ua.indexOf('MSIE ');
        /** @type {?} */
        var new_ie = ua.indexOf('Trident/');
        if (old_ie > -1 || new_ie > -1) {
            ms_ie = true;
        }
        return ms_ie;
    };
    NgxsLoggerPlugin.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgxsLoggerPlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGXS_LOGGER_PLUGIN_OPTIONS,] }] }
    ]; };
    return NgxsLoggerPlugin;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var USER_OPTIONS = new InjectionToken('LOGGER_USER_OPTIONS');
/**
 * @param {?} options
 * @return {?}
 */
function loggerOptionsFactory(options) {
    /** @type {?} */
    var defaultLoggerOptions = {
        logger: console,
        collapsed: false,
        disabled: false
    };
    return __assign({}, defaultLoggerOptions, options);
}
var NgxsLoggerPluginModule = /** @class */ (function () {
    function NgxsLoggerPluginModule() {
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    NgxsLoggerPluginModule.forRoot = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return {
            ngModule: NgxsLoggerPluginModule,
            providers: [
                {
                    provide: NGXS_PLUGINS,
                    useClass: NgxsLoggerPlugin,
                    multi: true
                },
                {
                    provide: USER_OPTIONS,
                    useValue: options
                },
                {
                    provide: NGXS_LOGGER_PLUGIN_OPTIONS,
                    useFactory: loggerOptionsFactory,
                    deps: [USER_OPTIONS]
                }
            ]
        };
    };
    NgxsLoggerPluginModule.decorators = [
        { type: NgModule }
    ];
    return NgxsLoggerPluginModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxsLoggerPluginModule, NgxsLoggerPlugin, NGXS_LOGGER_PLUGIN_OPTIONS, USER_OPTIONS as ɵa, loggerOptionsFactory as ɵb };

//# sourceMappingURL=ngxs-logger-plugin.js.map